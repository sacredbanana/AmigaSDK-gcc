#ifndef INLINE4_EXPANSION_H
#define INLINE4_EXPANSION_H

/*
** This file was auto generated by idltool 53.5.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef EXPANSION_PCI_H
#include <expansion/pci.h>
#endif
#ifndef EXPANSION_EXPANSION_H
#include <expansion/expansion.h>
#endif
#ifndef EXPANSION_CONFIGVARS_H
#include <expansion/configvars.h>
#endif
#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif
#ifndef DOS_DOSEXTENS_H
#include <dos/dosextens.h>
#endif
#ifndef DOS_FILEHANDLER_H
#include <dos/filehandler.h>
#endif
#include <interfaces/expansion.h>

/* Inline macros for Interface "main" */
#define AddConfigDev(configDev) IExpansion->AddConfigDev((configDev)) 
#define AddBootNode(bootPri, flags, deviceNode, configDev) IExpansion->AddBootNode((bootPri), (flags), (deviceNode), (configDev)) 
#define AllocBoardMem(slotSpec) IExpansion->AllocBoardMem((slotSpec)) 
#define AllocConfigDev() IExpansion->AllocConfigDev() 
#define AllocExpansionMem(numSlots, slotAlign) IExpansion->AllocExpansionMem((numSlots), (slotAlign)) 
#define ConfigBoard(board, configDev) IExpansion->ConfigBoard((board), (configDev)) 
#define ConfigChain(baseAddr) IExpansion->ConfigChain((baseAddr)) 
#define FindConfigDev(oldConfigDev, manufacturer, product) IExpansion->FindConfigDev((oldConfigDev), (manufacturer), (product)) 
#define FreeBoardMem(startSlot, slotSpec) IExpansion->FreeBoardMem((startSlot), (slotSpec)) 
#define FreeConfigDev(configDev) IExpansion->FreeConfigDev((configDev)) 
#define FreeExpansionMem(startSlot, numSlots) IExpansion->FreeExpansionMem((startSlot), (numSlots)) 
#define ReadExpansionByte(board, offset) IExpansion->ReadExpansionByte((board), (offset)) 
#define ReadExpansionRom(board, configDev) IExpansion->ReadExpansionRom((board), (configDev)) 
#define RemConfigDev(configDev) IExpansion->RemConfigDev((configDev)) 
#define WriteExpansionByte(board, offset, byte) IExpansion->WriteExpansionByte((board), (offset), (byte)) 
#define ObtainConfigBinding() IExpansion->ObtainConfigBinding() 
#define ReleaseConfigBinding() IExpansion->ReleaseConfigBinding() 
#define SetCurrentBinding(currentBinding, bindingSize) IExpansion->SetCurrentBinding((currentBinding), (bindingSize)) 
#define GetCurrentBinding(currentBinding, bindingSize) IExpansion->GetCurrentBinding((currentBinding), (bindingSize)) 
#define MakeDosNode(parmPacket) IExpansion->MakeDosNode((parmPacket)) 
#define AddDosNode(bootPri, flags, deviceNode) IExpansion->AddDosNode((bootPri), (flags), (deviceNode)) 
#define WriteExpansionWord(board, offset, word) IExpansion->WriteExpansionWord((board), (offset), (word)) 
#define GetMachineInfo(tagList) IExpansion->GetMachineInfo((tagList)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define GetMachineInfoTags(...) IExpansion->GetMachineInfoTags(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define GetMachineInfoTags(...) IExpansion->GetMachineInfoTags(## vargs) 
#endif

#endif /* INLINE4_EXPANSION_H */
