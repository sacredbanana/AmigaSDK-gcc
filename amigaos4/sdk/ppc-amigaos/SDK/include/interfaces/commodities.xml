<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE library SYSTEM "library.dtd">
<library name="commodities" basename="CxBase" openname="commodities.library">
	<include>exec/types.h</include>
	<include>exec/nodes.h</include>
	<include>libraries/commodities.h</include>
	<include>devices/inputevent.h</include>
	<include>devices/keymap.h</include>
	<interface name="main" version="1.0" struct="CommoditiesIFace" prefix="_Commodities_" asmprefix="ICommodities" global="ICommodities">
		<method name="Obtain" result="uint32"/>
		<method name="Release" result="uint32"/>
		<method name="Expunge" result="void" status="unimplemented"/>
		<method name="Clone" result="struct Interface *" status="unimplemented"/>
		<method name="CreateCxObj" result="CxObj *">
			<arg name="type" type="uint32"/>
			<arg name="arg1" type="int32"/>
			<arg name="arg2" type="int32"/>
		</method>
		<method name="CxBroker" result="CxObj *">
			<arg name="nb" type="const struct NewBroker *"/>
			<arg name="error" type="int32 *"/>
		</method>
		<method name="ActivateCxObj" result="int32">
			<arg name="co" type="CxObj *"/>
			<arg name="doIt" type="int32"/>
		</method>
		<method name="DeleteCxObj" result="VOID">
			<arg name="co" type="CxObj *"/>
		</method>
		<method name="DeleteCxObjAll" result="VOID">
			<arg name="co" type="CxObj *"/>
		</method>
		<method name="CxObjType" result="uint32">
			<arg name="co" type="const CxObj *"/>
		</method>
		<method name="CxObjError" result="int32">
			<arg name="co" type="const CxObj *"/>
		</method>
		<method name="ClearCxObjError" result="VOID">
			<arg name="co" type="CxObj *"/>
		</method>
		<method name="SetCxObjPri" result="int32">
			<arg name="co" type="CxObj *"/>
			<arg name="pri" type="int32"/>
		</method>
		<method name="AttachCxObj" result="VOID">
			<arg name="headObj" type="CxObj *"/>
			<arg name="co" type="CxObj *"/>
		</method>
		<method name="EnqueueCxObj" result="VOID">
			<arg name="headObj" type="CxObj *"/>
			<arg name="co" type="CxObj *"/>
		</method>
		<method name="InsertCxObj" result="VOID">
			<arg name="headObj" type="CxObj *"/>
			<arg name="co" type="CxObj *"/>
			<arg name="pred" type="CxObj *"/>
		</method>
		<method name="RemoveCxObj" result="VOID">
			<arg name="co" type="CxObj *"/>
		</method>
		<method name="CxReserved0" result="VOID">
		</method>
		<method name="SetTranslate" result="VOID">
			<arg name="translator" type="CxObj *"/>
			<arg name="events" type="struct InputEvent *"/>
		</method>
		<method name="SetFilter" result="VOID">
			<arg name="filter" type="CxObj *"/>
			<arg name="text" type="CONST_STRPTR"/>
		</method>
		<method name="SetFilterIX" result="VOID">
			<arg name="filter" type="CxObj *"/>
			<arg name="ix" type="const IX *"/>
		</method>
		<method name="ParseIX" result="int32">
			<arg name="description" type="CONST_STRPTR"/>
			<arg name="ix" type="IX *"/>
		</method>
		<method name="CxMsgType" result="uint32">
			<arg name="cxm" type="const CxMsg *"/>
		</method>
		<method name="CxMsgData" result="APTR">
			<arg name="cxm" type="const CxMsg *"/>
		</method>
		<method name="CxMsgID" result="int32">
			<arg name="cxm" type="const CxMsg *"/>
		</method>
		<method name="DivertCxMsg" result="VOID">
			<arg name="cxm" type="CxMsg *"/>
			<arg name="headObj" type="CxObj *"/>
			<arg name="returnObj" type="CxObj *"/>
		</method>
		<method name="RouteCxMsg" result="VOID">
			<arg name="cxm" type="CxMsg *"/>
			<arg name="co" type="CxObj *"/>
		</method>
		<method name="DisposeCxMsg" result="VOID">
			<arg name="cxm" type="CxMsg *"/>
		</method>
		<method name="InvertKeyMap" result="BOOL">
			<arg name="ansiCode" type="uint32"/>
			<arg name="event" type="struct InputEvent *"/>
			<arg name="km" type="const struct KeyMap *"/>
		</method>
		<method name="AddIEvents" result="VOID">
			<arg name="events" type="struct InputEvent *"/>
		</method>
		<method name="CopyBrokerList" result="int32">
			<arg name="blist" type="struct List *"/>
		</method>
		<method name="FreeBrokerList" result="VOID">
			<arg name="list" type="struct List *"/>
		</method>
		<method name="BrokerCommand" result="int32">
			<arg name="name" type="CONST_STRPTR"/>
			<arg name="id" type="int32"/>
		</method>
		<method name="MatchIX" result="BOOL">
			<arg name="event" type="const struct InputEvent *"/>
			<arg name="ix" type="const IX *"/>
		</method>
	</interface>
</library>
