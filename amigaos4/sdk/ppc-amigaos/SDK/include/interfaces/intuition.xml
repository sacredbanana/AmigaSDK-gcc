<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE library SYSTEM "library.dtd">
<library name="intuition" basename="IntuitionBase" basetype="IntuitionBase" openname="intuition.library">
	<include>intuition/intuitionbase.h</include>
	<include>intuition/classes.h</include>
	<include>intuition/cghooks.h</include>
	<include>intuition/sghooks.h</include>
	<include>intuition/classusr.h</include>
	<include>intuition/notify.h</include>
	<interface name="main" version="1.0" struct="IntuitionIFace" prefix="_Intuition_" asmprefix="IIntuition" global="IIntuition">
		<method name="Obtain" result="uint32"/>
		<method name="Release" result="uint32"/>
		<method name="Expunge" result="void" status="unimplemented"/>
		<method name="Clone" result="struct Interface *" status="unimplemented"/>
		<method name="OpenIntuition" result="VOID">
		</method>
		<method name="Intuition" result="VOID">
			<arg name="iEvent" type="struct InputEvent *"/>
		</method>
		<method name="AddGadget" result="UWORD">
			<arg name="window" type="struct Window *"/>
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="position" type="UWORD"/>
		</method>
		<method name="ClearDMRequest" result="BOOL">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="ClearMenuStrip" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="ClearPointer" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="CloseScreen" result="BOOL">
			<arg name="screen" type="struct Screen *"/>
		</method>
		<method name="CloseWindow" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="CloseWorkBench" result="LONG">
		</method>
		<method name="CurrentTime" result="VOID">
			<arg name="seconds" type="ULONG *"/>
			<arg name="micros" type="ULONG *"/>
		</method>
		<method name="DisplayAlert" result="BOOL">
			<arg name="alertNumber" type="uint32"/>
			<arg name="string" type="CONST_STRPTR"/>
			<arg name="height" type="uint16"/>
		</method>
		<method name="DisplayBeep" result="VOID">
			<arg name="screen" type="struct Screen *"/>
		</method>
		<method name="DoubleClick" result="BOOL">
			<arg name="sSeconds" type="ULONG"/>
			<arg name="sMicros" type="ULONG"/>
			<arg name="cSeconds" type="ULONG"/>
			<arg name="cMicros" type="ULONG"/>
		</method>
		<method name="DrawBorder" result="VOID">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="border" type="const struct Border *"/>
			<arg name="leftOffset" type="WORD"/>
			<arg name="topOffset" type="WORD"/>
		</method>
		<method name="DrawImage" result="VOID">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="image" type="struct Image *"/>
			<arg name="leftOffset" type="WORD"/>
			<arg name="topOffset" type="WORD"/>
		</method>
		<method name="EndRequest" result="VOID">
			<arg name="requester" type="struct Requester *"/>
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="GetDefPrefs" result="struct Preferences *">
			<arg name="preferences" type="struct Preferences *"/>
			<arg name="size" type="WORD"/>
		</method>
		<method name="GetPrefs" result="struct Preferences *">
			<arg name="preferences" type="struct Preferences *"/>
			<arg name="size" type="WORD"/>
		</method>
		<method name="InitRequester" result="VOID">
			<arg name="requester" type="struct Requester *"/>
		</method>
		<method name="ItemAddress" result="struct MenuItem *">
			<arg name="menuStrip" type="const struct Menu *"/>
			<arg name="menuNumber" type="UWORD"/>
		</method>
		<method name="ModifyIDCMP" result="BOOL">
			<arg name="window" type="struct Window *"/>
			<arg name="flags" type="ULONG"/>
		</method>
		<method name="ModifyProp" result="VOID">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
			<arg name="flags" type="UWORD"/>
			<arg name="horizPot" type="UWORD"/>
			<arg name="vertPot" type="UWORD"/>
			<arg name="horizBody" type="UWORD"/>
			<arg name="vertBody" type="UWORD"/>
		</method>
		<method name="MoveScreen" result="VOID">
			<arg name="screen" type="struct Screen *"/>
			<arg name="dx" type="WORD"/>
			<arg name="dy" type="WORD"/>
		</method>
		<method name="MoveWindow" result="VOID">
			<arg name="window" type="struct Window *"/>
			<arg name="dx" type="WORD"/>
			<arg name="dy" type="WORD"/>
		</method>
		<method name="OffGadget" result="VOID">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
		</method>
		<method name="OffMenu" result="VOID">
			<arg name="window" type="struct Window *"/>
			<arg name="menuNumber" type="UWORD"/>
		</method>
		<method name="OnGadget" result="VOID">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
		</method>
		<method name="OnMenu" result="VOID">
			<arg name="window" type="struct Window *"/>
			<arg name="menuNumber" type="UWORD"/>
		</method>
		<method name="OpenScreen" result="struct Screen *">
			<arg name="newScreen" type="const struct NewScreen *"/>
		</method>
		<method name="OpenWindow" result="struct Window *">
			<arg name="newWindow" type="const struct NewWindow *"/>
		</method>
		<method name="OpenWorkBench" result="ULONG">
		</method>
		<method name="PrintIText" result="VOID">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="iText" type="const struct IntuiText *"/>
			<arg name="left" type="WORD"/>
			<arg name="top" type="WORD"/>
		</method>
		<method name="RefreshGadgets" result="VOID">
			<arg name="gadgets" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
		</method>
		<method name="RemoveGadget" result="UWORD">
			<arg name="window" type="struct Window *"/>
			<arg name="gadget" type="struct Gadget *"/>
		</method>
		<method name="ReportMouse" result="VOID">
			<arg name="flag" type="BOOL"/>
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="ReportMouse1" result="VOID">
			<arg name="window" type="struct Window *"/>
			<arg name="flag" type="BOOL"/>
		</method>
		<method name="Request" result="BOOL">
			<arg name="requester" type="struct Requester *"/>
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="ScreenToBack" result="VOID">
			<arg name="screen" type="struct Screen *"/>
		</method>
		<method name="ScreenToFront" result="VOID">
			<arg name="screen" type="struct Screen *"/>
		</method>
		<method name="SetDMRequest" result="BOOL">
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
		</method>
		<method name="SetMenuStrip" result="BOOL">
			<arg name="window" type="struct Window *"/>
			<arg name="menu" type="struct Menu *"/>
		</method>
		<method name="SetPointer" result="VOID">
			<arg name="window" type="struct Window *"/>
			<arg name="pointer" type="UWORD *"/>
			<arg name="height" type="WORD"/>
			<arg name="width" type="WORD"/>
			<arg name="xOffset" type="WORD"/>
			<arg name="yOffset" type="WORD"/>
		</method>
		<method name="SetWindowTitles" result="void">
			<arg name="window" type="struct Window *"/>
			<arg name="windowTitle" type="CONST_STRPTR"/>
			<arg name="screenTitle" type="CONST_STRPTR"/>
		</method>
		<method name="ShowTitle" result="VOID">
			<arg name="screen" type="struct Screen *"/>
			<arg name="showIt" type="BOOL"/>
		</method>
		<method name="SizeWindow" result="VOID">
			<arg name="window" type="struct Window *"/>
			<arg name="dx" type="WORD"/>
			<arg name="dy" type="WORD"/>
		</method>
		<method name="ViewAddress" result="struct View *">
		</method>
		<method name="ViewPortAddress" result="struct ViewPort *">
			<arg name="window" type="const struct Window *"/>
		</method>
		<method name="WindowToBack" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="WindowToFront" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="WindowLimits" result="BOOL">
			<arg name="window" type="struct Window *"/>
			<arg name="widthMin" type="LONG"/>
			<arg name="heightMin" type="LONG"/>
			<arg name="widthMax" type="ULONG"/>
			<arg name="heightMax" type="ULONG"/>
		</method>
		<method name="SetPrefs" result="struct Preferences *">
			<arg name="preferences" type="const struct Preferences *"/>
			<arg name="size" type="LONG"/>
			<arg name="inform" type="BOOL"/>
		</method>
		<method name="IntuiTextLength" result="LONG">
			<arg name="iText" type="const struct IntuiText *"/>
		</method>
		<method name="WBenchToBack" result="BOOL">
		</method>
		<method name="WBenchToFront" result="BOOL">
		</method>
		<method name="AutoRequest" result="BOOL">
			<arg name="window" type="struct Window *"/>
			<arg name="body" type="const struct IntuiText *"/>
			<arg name="posText" type="const struct IntuiText *"/>
			<arg name="negText" type="const struct IntuiText *"/>
			<arg name="pFlag" type="ULONG"/>
			<arg name="nFlag" type="ULONG"/>
			<arg name="width" type="UWORD"/>
			<arg name="height" type="UWORD"/>
		</method>
		<method name="BeginRefresh" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="BuildSysRequest" result="struct Window *">
			<arg name="window" type="struct Window *"/>
			<arg name="body" type="const struct IntuiText *"/>
			<arg name="posText" type="const struct IntuiText *"/>
			<arg name="negText" type="const struct IntuiText *"/>
			<arg name="flags" type="ULONG"/>
			<arg name="width" type="UWORD"/>
			<arg name="height" type="UWORD"/>
		</method>
		<method name="EndRefresh" result="VOID">
			<arg name="window" type="struct Window *"/>
			<arg name="complete" type="LONG"/>
		</method>
		<method name="FreeSysRequest" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="MakeScreen" result="LONG">
			<arg name="screen" type="struct Screen *"/>
		</method>
		<method name="RemakeDisplay" result="LONG">
		</method>
		<method name="RethinkDisplay" result="LONG">
		</method>
		<method name="AllocRemember" result="APTR">
			<arg name="rememberKey" type="struct Remember **"/>
			<arg name="size" type="ULONG"/>
			<arg name="flags" type="ULONG"/>
		</method>
		<method name="AlohaWorkbench" result="VOID" status="private">
			<arg name="wbport" type="LONG"/>
		</method>
		<method name="FreeRemember" result="VOID">
			<arg name="rememberKey" type="struct Remember **"/>
			<arg name="reallyForget" type="BOOL"/>
		</method>
		<method name="LockIBase" result="ULONG">
			<arg name="dontknow" type="ULONG"/>
		</method>
		<method name="UnlockIBase" result="VOID">
			<arg name="ibLock" type="ULONG"/>
		</method>
		<method name="GetScreenData" result="LONG">
			<arg name="buffer" type="APTR"/>
			<arg name="size" type="UWORD"/>
			<arg name="type" type="UWORD"/>
			<arg name="screen" type="const struct Screen *"/>
		</method>
		<method name="RefreshGList" result="VOID">
			<arg name="gadgets" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
			<arg name="numGad" type="WORD"/>
		</method>
		<method name="AddGList" result="UWORD">
			<arg name="window" type="struct Window *"/>
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="position" type="UWORD"/>
			<arg name="numGad" type="WORD"/>
			<arg name="requester" type="struct Requester *"/>
		</method>
		<method name="RemoveGList" result="UWORD">
			<arg name="remPtr" type="struct Window *"/>
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="numGad" type="WORD"/>
		</method>
		<method name="ActivateWindow" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="RefreshWindowFrame" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="ActivateGadget" result="BOOL">
			<arg name="gadgets" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
		</method>
		<method name="NewModifyProp" result="VOID">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
			<arg name="flags" type="UWORD"/>
			<arg name="horizPot" type="UWORD"/>
			<arg name="vertPot" type="UWORD"/>
			<arg name="horizBody" type="UWORD"/>
			<arg name="vertBody" type="UWORD"/>
			<arg name="numGad" type="WORD"/>
		</method>
		<method name="QueryOverscan" result="LONG">
			<arg name="displayID" type="ULONG"/>
			<arg name="rect" type="struct Rectangle *"/>
			<arg name="oScanType" type="WORD"/>
		</method>
		<method name="MoveWindowInFrontOf" result="VOID">
			<arg name="window" type="struct Window *"/>
			<arg name="behindWindow" type="struct Window *"/>
		</method>
		<method name="ChangeWindowBox" result="VOID">
			<arg name="window" type="struct Window *"/>
			<arg name="left" type="WORD"/>
			<arg name="top" type="WORD"/>
			<arg name="width" type="WORD"/>
			<arg name="height" type="WORD"/>
		</method>
		<method name="SetEditHook" result="struct Hook *">
			<arg name="hook" type="struct Hook *"/>
		</method>
		<method name="SetMouseQueue" result="LONG">
			<arg name="window" type="struct Window *"/>
			<arg name="queueLength" type="UWORD"/>
		</method>
		<method name="ZipWindow" result="VOID">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="LockPubScreen" result="struct Screen *">
			<arg name="name" type="CONST_STRPTR"/>
		</method>
		<method name="UnlockPubScreen" result="void">
			<arg name="name" type="CONST_STRPTR"/>
			<arg name="screen" type="struct Screen *"/>
		</method>
		<method name="LockPubScreenList" result="struct List *">
		</method>
		<method name="UnlockPubScreenList" result="VOID">
		</method>
		<method name="NextPubScreen" result="STRPTR">
			<arg name="screen" type="const struct Screen *"/>
			<arg name="namebuf" type="STRPTR"/>
		</method>
		<method name="SetDefaultPubScreen" result="void">
			<arg name="name" type="CONST_STRPTR"/>
		</method>
		<method name="SetPubScreenModes" result="UWORD">
			<arg name="modes" type="UWORD"/>
		</method>
		<method name="PubScreenStatus" result="UWORD">
			<arg name="screen" type="struct Screen *"/>
			<arg name="statusFlags" type="UWORD"/>
		</method>
		<method name="ObtainGIRPort" result="struct RastPort *">
			<arg name="gInfo" type="struct GadgetInfo *"/>
		</method>
		<method name="ReleaseGIRPort" result="VOID">
			<arg name="rp" type="struct RastPort *"/>
		</method>
		<method name="GadgetMouse" result="VOID">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="gInfo" type="struct GadgetInfo *"/>
			<arg name="mousePoint" type="WORD *"/>
		</method>
		<method name="SetIPrefs" result="APTR" status="private">
			<arg name="ptr" type="APTR"/>
			<arg name="size" type="LONG"/>
			<arg name="type" type="LONG"/>
		</method>
		<method name="GetDefaultPubScreen" result="VOID">
			<arg name="nameBuffer" type="STRPTR"/>
		</method>
		<method name="EasyRequestArgs" result="LONG">
			<arg name="window" type="struct Window *"/>
			<arg name="easyStruct" type="const struct EasyStruct *"/>
			<arg name="idcmpPtr" type="ULONG *"/>
			<arg name="args" type="const APTR"/>
		</method>
		<method name="EasyRequest" result="LONG">
			<arg name="window" type="struct Window *"/>
			<arg name="easyStruct" type="const struct EasyStruct *"/>
			<arg name="idcmpPtr" type="ULONG *"/>
			<vararg name="dummy" type="ULONG"/>
		</method>
		<method name="BuildEasyRequestArgs" result="struct Window *">
			<arg name="window" type="struct Window *"/>
			<arg name="easyStruct" type="const struct EasyStruct *"/>
			<arg name="idcmp" type="ULONG"/>
			<arg name="args" type="const APTR"/>
		</method>
		<method name="BuildEasyRequest" result="struct Window *">
			<arg name="window" type="struct Window *"/>
			<arg name="easyStruct" type="const struct EasyStruct *"/>
			<arg name="idcmp" type="ULONG"/>
			<vararg name="dummy" type="ULONG"/>
		</method>
		<method name="SysReqHandler" result="LONG">
			<arg name="window" type="struct Window *"/>
			<arg name="idcmpPtr" type="ULONG *"/>
			<arg name="waitInput" type="BOOL"/>
		</method>
		<method name="OpenWindowTagList" result="struct Window *">
			<arg name="newWindow" type="const struct NewWindow *"/>
			<arg name="tagList" type="const struct TagItem *"/>
		</method>
		<method name="OpenWindowTags" result="struct Window *">
			<arg name="newWindow" type="const struct NewWindow *"/>
			<vararg name="tag1Type" type="ULONG"/>
		</method>
		<method name="OpenScreenTagList" result="struct Screen *">
			<arg name="newScreen" type="const struct NewScreen *"/>
			<arg name="tagList" type="const struct TagItem *"/>
		</method>
		<method name="OpenScreenTags" result="struct Screen *">
			<arg name="newScreen" type="const struct NewScreen *"/>
			<vararg name="tag1Type" type="ULONG"/>
		</method>
		<method name="DrawImageState" result="VOID">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="image" type="struct Image *"/>
			<arg name="leftOffset" type="WORD"/>
			<arg name="topOffset" type="WORD"/>
			<arg name="state" type="ULONG"/>
			<arg name="drawInfo" type="const struct DrawInfo *"/>
		</method>
		<method name="PointInImage" result="BOOL">
			<arg name="point" type="ULONG"/>
			<arg name="image" type="struct Image *"/>
		</method>
		<method name="EraseImage" result="VOID">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="image" type="struct Image *"/>
			<arg name="leftOffset" type="WORD"/>
			<arg name="topOffset" type="WORD"/>
		</method>
		<method name="NewObjectA" result="Object *">
			<arg name="cl" type="Class *"/>
			<arg name="classID" type="ClassID"/>
			<arg name="tagList" type="const struct TagItem *"/>
		</method>
		<method name="NewObject" result="Object *" inline4="simple">
			<arg name="cl" type="Class *"/>
			<arg name="classID" type="ClassID"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="DisposeObject" result="void">
			<arg name="object" type="Object *"/>
		</method>
		<method name="SetAttrsA" result="uint32">
			<arg name="object" type="Object *"/>
			<arg name="tagList" type="const struct TagItem *"/>
		</method>
		<method name="SetAttrs" result="uint32">
			<arg name="object" type="APTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="GetAttr" result="uint32">
			<arg name="attrID" type="uint32"/>
			<arg name="object" type="Object *"/>
			<arg name="storagePtr" type="uint32 *"/>
		</method>
		<method name="SetGadgetAttrsA" result="uint32">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
			<arg name="tagList" type="const struct TagItem *"/>
		</method>
		<method name="SetGadgetAttrs" result="uint32">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="requester" type="struct Requester *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="NextObject" result="Object *">
			<arg name="objectPtrPtr" type="Object **"/>
		</method>
		<method name="FindClass" result="Class *" status="private">
			<arg name="classID" type="ClassID"/>
		</method>
		<method name="MakeClass" result="Class *">
			<arg name="classID" type="ClassID"/>
			<arg name="superClassID" type="ClassID"/>
			<arg name="superClassPtr" type="const Class *"/>
			<arg name="instanceSize" type="uint16"/>
			<arg name="flags" type="uint32"/>
		</method>
		<method name="AddClass" result="void">
			<arg name="cl" type="Class *"/>
		</method>
		<method name="GetScreenDrawInfo" result="struct DrawInfo *">
			<arg name="screen" type="struct Screen *"/>
		</method>
		<method name="FreeScreenDrawInfo" result="VOID">
			<arg name="screen" type="struct Screen *"/>
			<arg name="drawInfo" type="struct DrawInfo *"/>
		</method>
		<method name="ResetMenuStrip" result="BOOL">
			<arg name="window" type="struct Window *"/>
			<arg name="menu" type="struct Menu *"/>
		</method>
		<method name="RemoveClass" result="void">
			<arg name="cl" type="Class *"/>
		</method>
		<method name="FreeClass" result="BOOL">
			<arg name="cl" type="Class *"/>
		</method>
		<method name="LockClassList" result="struct List *" status="private">
		</method>
		<method name="UnlockClassList" result="VOID" status="private">
		</method>
		<method name="Reserved1" result="void" status="unimplemented"/>
		<method name="Reserved2" result="void" status="unimplemented"/>
		<method name="Reserved3" result="void" status="unimplemented"/>
		<method name="Reserved4" result="void" status="unimplemented"/>
		<method name="Reserved5" result="void" status="unimplemented"/>
		<method name="Reserved6" result="void" status="unimplemented"/>
		<method name="AllocScreenBuffer" result="struct ScreenBuffer *">
			<arg name="sc" type="struct Screen *"/>
			<arg name="bm" type="struct BitMap *"/>
			<arg name="flags" type="ULONG"/>
		</method>
		<method name="FreeScreenBuffer" result="VOID">
			<arg name="sc" type="struct Screen *"/>
			<arg name="sb" type="struct ScreenBuffer *"/>
		</method>
		<method name="ChangeScreenBuffer" result="ULONG">
			<arg name="sc" type="struct Screen *"/>
			<arg name="sb" type="struct ScreenBuffer *"/>
		</method>
		<method name="ScreenDepth" result="VOID">
			<arg name="screen" type="struct Screen *"/>
			<arg name="flags" type="ULONG"/>
			<arg name="reserved" type="APTR"/>
		</method>
		<method name="ScreenPosition" result="VOID">
			<arg name="screen" type="struct Screen *"/>
			<arg name="flags" type="ULONG"/>
			<arg name="x1" type="LONG"/>
			<arg name="y1" type="LONG"/>
			<arg name="x2" type="LONG"/>
			<arg name="y2" type="LONG"/>
		</method>
		<method name="ScrollWindowRaster" result="VOID">
			<arg name="win" type="struct Window *"/>
			<arg name="dx" type="WORD"/>
			<arg name="dy" type="WORD"/>
			<arg name="xMin" type="WORD"/>
			<arg name="yMin" type="WORD"/>
			<arg name="xMax" type="WORD"/>
			<arg name="yMax" type="WORD"/>
		</method>
		<method name="LendMenus" result="VOID">
			<arg name="fromwindow" type="struct Window *"/>
			<arg name="towindow" type="struct Window *"/>
		</method>
		<method name="DoGadgetMethodA" result="uint32">
			<arg name="gad" type="struct Gadget *"/>
			<arg name="win" type="struct Window *"/>
			<arg name="req" type="struct Requester *"/>
			<arg name="message" type="Msg"/>
		</method>
		<method name="DoGadgetMethod" result="uint32">
			<arg name="gad" type="struct Gadget *"/>
			<arg name="win" type="struct Window *"/>
			<arg name="req" type="struct Requester *"/>
			<vararg name="methodID" type="ULONG"/>
		</method>
		<method name="SetWindowPointerA" result="VOID">
			<arg name="win" type="struct Window *"/>
			<arg name="taglist" type="const struct TagItem *"/>
		</method>
		<method name="SetWindowPointer" result="VOID">
			<arg name="win" type="struct Window *"/>
			<vararg name="tag1" type="ULONG"/>
		</method>
		<method name="TimedDisplayAlert" result="BOOL">
			<arg name="alertNumber" type="uint32"/>
			<arg name="string" type="CONST_STRPTR"/>
			<arg name="height" type="uint16"/>
			<arg name="Time" type="uint32"/>
		</method>
		<method name="HelpControl" result="VOID">
			<arg name="win" type="struct Window *"/>
			<arg name="flags" type="ULONG"/>
		</method>
		<method name="ShowWindow" result="BOOL">
			<arg name="window" type="struct Window *"/>
			<arg name="other" type="struct Window *"/>
		</method>
		<method name="HideWindow" result="BOOL">
			<arg name="window" type="struct Window *"/>
		</method>
		<method name="GetAttrsA" result="uint32">
			<arg name="object" type="Object *"/>
			<arg name="tagList" type="struct TagItem *"/>
		</method>
		<method name="GetAttrs" result="uint32">
			<arg name="object" type="APTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="LockGUIPrefs" result="APTR">
			<arg name="reserved" type="ULONG"/>
		</method>
		<method name="UnlockGUIPrefs" result="VOID">
			<arg name="lock" type="APTR"/>
		</method>
		<method name="SetGUIAttrsA" result="ULONG">
			<arg name="reserved" type="APTR"/>
			<arg name="drawinfo" type="struct DrawInfo *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="SetGUIAttrs" result="ULONG">
			<arg name="reserved" type="APTR"/>
			<arg name="drawinfo" type="struct DrawInfo *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="GetGUIAttrsA" result="ULONG">
			<arg name="reserved" type="APTR"/>
			<arg name="drawinfo" type="struct DrawInfo *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="GetGUIAttrs" result="ULONG">
			<arg name="reserved" type="APTR"/>
			<arg name="drawinfo" type="struct DrawInfo *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="GetHalfPens" result="ULONG">
			<arg name="drawinfo" type="struct DrawInfo *"/>
			<arg name="basepen" type="ULONG"/>
			<arg name="halfshineptr" type="UWORD *"/>
			<arg name="halfshadowptr" type="UWORD *"/>
		</method>
		<method name="GadgetBox" result="ULONG">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="domain" type="APTR"/>
			<arg name="domaintype" type="ULONG"/>
			<arg name="flags" type="ULONG"/>
			<arg name="box" type="APTR"/>
		</method>
		<method name="RefreshSetGadgetAttrsA" result="void">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="req" type="struct Requester *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="RefreshSetGadgetAttrs" result="void">
			<arg name="gadget" type="struct Gadget *"/>
			<arg name="window" type="struct Window *"/>
			<arg name="req" type="struct Requester *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="IDoSuperMethodA" result="uint32">
			<arg name="cl" type="Class *"/>
			<arg name="object" type="Object *"/>
			<arg name="msg" type="Msg"/>
		</method>
		<method name="IDoSuperMethod" result="uint32">
			<arg name="cl" type="Class *"/>
			<arg name="object" type="Object *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="ISetSuperAttrsA" result="uint32">
			<arg name="cl" type="Class *"/>
			<arg name="object" type="Object *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="ISetSuperAttrs" result="uint32">
			<arg name="cl" type="Class *"/>
			<arg name="object" type="Object *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="ICoerceMethodA" result="uint32">
			<arg name="cl" type="Class *"/>
			<arg name="object" type="Object *"/>
			<arg name="msg" type="Msg"/>
		</method>
		<method name="ICoerceMethod" result="uint32">
			<arg name="cl" type="Class *"/>
			<arg name="object" type="Object *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="IDoMethodA" result="uint32">
			<arg name="object" type="Object *"/>
			<arg name="msg" type="Msg"/>
		</method>
		<method name="IDoMethod" result="uint32">
			<arg name="object" type="Object *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="OpenClass" result="struct ClassLibrary *">
			<arg name="name" type="CONST_STRPTR"/>
			<arg name="version" type="uint32"/>
			<arg name="cl_ptr" type="Class **"/>
		</method>
		<method name="CloseClass" result="void">
			<arg name="cl" type="struct ClassLibrary *"/>
		</method>
		<method name="SetDisplayBeepHook" result="struct Hook *" status="private">
			<arg name="hook" type="struct Hook *"/>
		</method>
		<method name="LockScreen" result="BOOL">
			<arg name="screen" type="struct Screen *"/>
			<arg name="micros" type="ULONG"/>
		</method>
		<method name="UnlockScreen" result="VOID">
			<arg name="screen" type="struct Screen *"/>
		</method>
		<method name="GetWindowAttrsA" result="LONG">
			<arg name="win" type="struct Window *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="GetWindowAttrs" result="LONG">
			<arg name="win" type="struct Window *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="SetWindowAttrsA" result="LONG">
			<arg name="win" type="struct Window *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="SetWindowAttrs" result="LONG">
			<arg name="win" type="struct Window *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="GetWindowAttr" result="LONG">
			<arg name="win" type="struct Window *"/>
			<arg name="attr" type="ULONG"/>
			<arg name="data" type="APTR"/>
			<arg name="size" type="ULONG"/>
		</method>
		<method name="SetWindowAttr" result="LONG">
			<arg name="win" type="struct Window *"/>
			<arg name="attr" type="ULONG"/>
			<arg name="data" type="APTR"/>
			<arg name="size" type="ULONG"/>
		</method>
		<method name="StripIntuiMessages" result="VOID">
			<arg name="port" type="struct MsgPort *"/>
			<arg name="win" type="struct Window *"/>
		</method>
		<method name="Reserved7" result="void" status="unimplemented"/>
		<method name="Reserved8" result="void" status="unimplemented"/>
		<method name="GetScreenAttrsA" result="LONG">
			<arg name="scr" type="struct Screen *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="GetScreenAttrs" result="LONG">
			<arg name="scr" type="struct Screen *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="SetScreenAttrsA" result="LONG">
			<arg name="scr" type="struct Screen *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="SetScreenAttrs" result="LONG">
			<arg name="scr" type="struct Screen *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="GetScreenAttr" result="LONG">
			<arg name="scr" type="struct Screen *"/>
			<arg name="attr" type="ULONG"/>
			<arg name="data" type="APTR"/>
			<arg name="size" type="ULONG"/>
		</method>
		<method name="SetScreenAttr" result="LONG">
			<arg name="scr" type="struct Screen *"/>
			<arg name="attr" type="ULONG"/>
			<arg name="data" type="APTR"/>
			<arg name="size" type="ULONG"/>
		</method>
		<method name="LockScreenList" result="struct Screen *">
		</method>
		<method name="UnlockScreenList" result="VOID">
		</method>
		<method name="LockScreenGI" result="struct RastPort *">
			<arg name="gi" type="struct GadgetInfo *"/>
			<arg name="micros" type="ULONG"/>
		</method>
		<method name="UnlockScreenGI" result="VOID">
			<arg name="gi" type="struct GadgetInfo *"/>
			<arg name="rp" type="struct RastPort *"/>
		</method>
		<method name="GetMarkedBlock" result="ULONG">
			<arg name="sgw" type="struct SGWork *"/>
		</method>
		<method name="SetMarkedBlock" result="VOID">
			<arg name="sgw" type="struct SGWork *"/>
			<arg name="block" type="ULONG"/>
		</method>
		<method name="ObtainBitMapSourceA" result="APTR">
			<arg name="name" type="CONST_STRPTR"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="ObtainBitMapSource" result="APTR">
			<arg name="name" type="CONST_STRPTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="ReleaseBitMapSource" result="VOID">
			<arg name="bitmapsource" type="APTR"/>
		</method>
		<method name="ObtainBitMapInstanceA" result="APTR">
			<arg name="bitmapsource" type="APTR"/>
			<arg name="screen" type="struct Screen *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="ObtainBitMapInstance" result="APTR">
			<arg name="bitmapsource" type="APTR"/>
			<arg name="screen" type="struct Screen *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="ReleaseBitMapInstance" result="VOID">
			<arg name="bitmapinstance" type="APTR"/>
		</method>
		<method name="EmbossDisableRect" result="void">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="minx" type="int32"/>
			<arg name="miny" type="int32"/>
			<arg name="maxx" type="int32"/>
			<arg name="maxy" type="int32"/>
			<arg name="backtype" type="uint32"/>
			<arg name="contrast" type="uint32"/>
			<arg name="dri" type="struct DrawInfo *"/>
		</method>
		<method name="EmbossDisableText" result="void">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="text" type="CONST_STRPTR"/>
			<arg name="len" type="uint32"/>
			<arg name="backtype" type="uint32"/>
			<arg name="contrast" type="uint32"/>
			<arg name="dri" type="struct DrawInfo *"/>
		</method>
		<method name="PrintEmbossedDisabledIText" result="VOID">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="itext" type="struct IntuiText *"/>
			<arg name="left" type="LONG"/>
			<arg name="top" type="LONG"/>
			<arg name="backtype" type="ULONG"/>
			<arg name="contrast" type="ULONG"/>
			<arg name="dri" type="struct DrawInfo *"/>
		</method>
		<method name="IntuiTextExtent" result="ULONG">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="itext" type="struct IntuiText *"/>
			<arg name="textent" type="struct TextExtent *"/>
		</method>
		<method name="ShadeRectOld" result="ULONG">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="minx" type="LONG"/>
			<arg name="miny" type="LONG"/>
			<arg name="maxx" type="LONG"/>
			<arg name="maxy" type="LONG"/>
			<arg name="shadelevel" type="ULONG"/>
			<arg name="backtype" type="ULONG"/>
			<arg name="state" type="ULONG"/>
			<arg name="dri" type="struct DrawInfo *"/>
		</method>
		<method name="DisableTemplateRGB" result="VOID" status="private">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="left" type="LONG"/>
			<arg name="top" type="LONG"/>
			<arg name="width" type="LONG"/>
			<arg name="height" type="LONG"/>
			<arg name="template_ptr" type="PLANEPTR"/>
			<arg name="brightlevel" type="ULONG"/>
			<arg name="darklevel" type="ULONG"/>
		</method>
		<method name="SetScreenBitMapInstance" result="ULONG" status="private">
			<arg name="scr" type="struct Screen *"/>
			<arg name="id" type="ULONG"/>
			<arg name="source" type="APTR"/>
		</method>
		<method name="FindMenuKey" result="UWORD">
			<arg name="menu" type="struct Menu *"/>
			<arg name="code" type="LONG"/>
		</method>
		<method name="BitMapInstanceControlA" result="ULONG">
			<arg name="bitmapinstance" type="APTR"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="BitMapInstanceControl" result="ULONG">
			<arg name="bitmapinstance" type="APTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="ObtainIPluginList" result="struct List *">
			<arg name="type" type="ULONG"/>
			<arg name="attrmask" type="ULONG"/>
			<arg name="applymask" type="ULONG"/>
		</method>
		<method name="ReleaseIPluginList" result="VOID">
			<arg name="list" type="struct List *"/>
		</method>
		<method name="OpenGUIPlugin" result="struct GUIPlugin *">
			<arg name="name" type="STRPTR"/>
			<arg name="version" type="ULONG"/>
			<arg name="type" type="ULONG"/>
			<arg name="attrmask" type="ULONG"/>
			<arg name="applymask" type="ULONG"/>
		</method>
		<method name="CloseGUIPlugin" result="VOID">
			<arg name="plugin" type="struct GUIPlugin *"/>
		</method>
		<method name="DrawSysImageA" result="ULONG">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="left" type="LONG"/>
			<arg name="top" type="LONG"/>
			<arg name="width" type="LONG"/>
			<arg name="height" type="LONG"/>
			<arg name="which" type="ULONG"/>
			<arg name="backtype" type="ULONG"/>
			<arg name="state" type="ULONG"/>
			<arg name="dri" type="struct DrawInfo *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="DrawSysImage" result="ULONG">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="left" type="LONG"/>
			<arg name="top" type="LONG"/>
			<arg name="width" type="LONG"/>
			<arg name="height" type="LONG"/>
			<arg name="which" type="ULONG"/>
			<arg name="backtype" type="ULONG"/>
			<arg name="state" type="ULONG"/>
			<arg name="dri" type="struct DrawInfo *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="DoRender" result="uint32">
			<arg name="o" type="Object *"/>
			<arg name="gi" type="struct GadgetInfo *"/>
			<arg name="flags" type="uint32"/>
		</method>
		<method name="SetRenderDomain" result="ULONG">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="domain" type="struct Rectangle *"/>
		</method>
		<method name="GetRenderDomain" result="ULONG">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="domain" type="struct Rectangle *"/>
		</method>
		<method name="DrawGradient" result="ULONG">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="left" type="LONG"/>
			<arg name="top" type="LONG"/>
			<arg name="width" type="LONG"/>
			<arg name="height" type="LONG"/>
			<arg name="domain" type="struct IBox *"/>
			<arg name="reserved" type="ULONG"/>
			<arg name="gradientspec" type="struct GradientSpec *"/>
			<arg name="dri" type="struct DrawInfo *"/>
		</method>
		<method name="DirectionVector" result="ULONG">
			<arg name="degrees" type="ULONG"/>
		</method>
		<method name="ShadeRectA" result="ULONG">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="minx" type="LONG"/>
			<arg name="miny" type="LONG"/>
			<arg name="maxx" type="LONG"/>
			<arg name="maxy" type="LONG"/>
			<arg name="shadelevel" type="ULONG"/>
			<arg name="backtype" type="ULONG"/>
			<arg name="state" type="ULONG"/>
			<arg name="dri" type="struct DrawInfo *"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="ShadeRect" result="ULONG">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="minx" type="LONG"/>
			<arg name="miny" type="LONG"/>
			<arg name="maxx" type="LONG"/>
			<arg name="maxy" type="LONG"/>
			<arg name="shadelevel" type="ULONG"/>
			<arg name="backtype" type="ULONG"/>
			<arg name="state" type="ULONG"/>
			<arg name="dri" type="struct DrawInfo *"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="DoScrollHook" result="VOID">
			<arg name="scrollhook" type="struct ScrollHook *"/>
			<arg name="scrollmode" type="LONG"/>
		</method>
		<method name="ObtainIBackFill" result="struct Hook *">
			<arg name="dri" type="struct DrawInfo *"/>
			<arg name="element" type="ULONG"/>
			<arg name="state" type="ULONG"/>
			<arg name="flags" type="ULONG"/>
		</method>
		<method name="ReleaseIBackFill" result="VOID">
			<arg name="hook" type="struct Hook *"/>
		</method>
		<method name="IntuitionControlA" result="ULONG">
			<arg name="object" type="APTR"/>
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="IntuitionControl" result="ULONG">
			<arg name="object" type="APTR"/>
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="StartScreenNotifyTagList" result="APTR">
			<arg name="taglist" type="struct TagItem *"/>
		</method>
		<method name="StartScreenNotifyTags" result="APTR">
			<vararg name="tag1" type="Tag"/>
		</method>
		<method name="EndScreenNotify" result="BOOL">
			<arg name="request" type="APTR"/>
		</method>
		<method name="DisableTemplate" result="VOID">
			<arg name="rp" type="struct RastPort *"/>
			<arg name="left" type="LONG"/>
			<arg name="top" type="LONG"/>
			<arg name="width" type="LONG"/>
			<arg name="height" type="LONG"/>
			<arg name="template_ptr" type="APTR"/>
			<arg name="offx" type="LONG"/>
			<arg name="template_type" type="ULONG"/>
			<arg name="bytesperrow" type="ULONG"/>
			<arg name="backtype" type="ULONG"/>
			<arg name="dri" type="struct DrawInfo *"/>
		</method>
	</interface>
</library>
