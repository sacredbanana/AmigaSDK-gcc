<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE library SYSTEM "library.dtd">
<!-- autogenerated by fdtrans v51.22 -->
<library name="rexxsyslib" basename="RexxSysBase" openname="rexxsyslib.library">
	<include>exec/types.h</include>
	<include>rexx/rxslib.h</include>
	<include>rexx/rexxio.h</include>
	<include>dos/dos.h</include>
	<interface name="main" version="1.0" struct="RexxSysIFace" prefix="_RexxSys_" asmprefix="IRexxSys" global="IRexxSys">
		<method name="Obtain" result="uint32"/>
		<method name="Release" result="uint32"/>
		<method name="Expunge" result="void" status="unimplemented"/>
		<method name="Clone" result="struct Interface *" status="unimplemented"/>
		<method name="Rexx" result="LONG" status="private">
			<arg name="task" type="struct RexxTask *"/>
			<arg name="message" type="struct RexxMsg *"/>
		</method>
		<method name="rxParse" result="VOID" status="private">
			<arg name="task" type="struct RexxTask *"/>
		</method>
		<method name="rxInstruct" result="VOID" status="private">
			<arg name="task" type="struct RexxTask *"/>
			<arg name="env" type="struct Environment *"/>
			<arg name="clause" type="APTR"/>
			<arg name="instruction" type="LONG"/>
			<arg name="error" type="LONG"/>
			<arg name="tracing" type="LONG"/>
		</method>
		<method name="rxSuspend" result="LONG" status="private">
			<arg name="task" type="struct RexxTask *"/>
		</method>
		<method name="EvalOp" result="LONG" status="private">
			<arg name="env" type="struct Environment *"/>
			<arg name="left_operand" type="APTR"/>
			<arg name="opcode" type="LONG"/>
			<arg name="right_operand" type="APTR"/>
		</method>
		<method name="AssignValue" result="LONG" status="private">
			<arg name="env" type="struct Environment *"/>
			<arg name="token" type="APTR"/>
			<arg name="valuestring" type="LONG"/>
			<arg name="symboltable" type="LONG"/>
		</method>
		<method name="EnterSymbol" result="struct Node *" status="private">
			<arg name="env" type="struct Environment *"/>
			<arg name="stem_string" type="STRPTR"/>
			<arg name="compound_string" type="STRPTR"/>
		</method>
		<method name="FetchValue" result="struct Node *" status="private">
			<arg name="env" type="struct Environment *"/>
			<arg name="stem_name" type="STRPTR"/>
			<arg name="compount_name" type="STRPTR"/>
			<arg name="node" type="struct Node *"/>
		</method>
		<method name="LookUpValue" result="LONG" status="private">
			<arg name="env" type="struct Environment *"/>
			<arg name="token" type="APTR"/>
			<arg name="node" type="struct Node *"/>
		</method>
		<method name="SetValue" result="struct Node *" status="private">
			<arg name="env" type="struct Environment *"/>
			<arg name="string" type="struct NexxStr *"/>
			<arg name="symbol_table_node" type="struct Node *"/>
		</method>
		<method name="SymExpand" result="LONG" status="private">
			<arg name="env" type="struct Environment *"/>
			<arg name="symbol_stem_string" type="STRPTR"/>
		</method>
		<method name="ErrorMsg" result="LONG" status="private">
			<arg name="code" type="LONG"/>
		</method>
		<method name="IsSymbol" result="LONG" status="private">
			<arg name="string" type="STRPTR"/>
		</method>
		<method name="CurrentEnv" result="VOID" status="private">
			<arg name="rexxtaskptr" type="struct RexxTask *"/>
		</method>
		<method name="GetSpace" result="APTR" status="private">
			<arg name="envptr" type="struct Environment *"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="FreeSpace" result="VOID" status="private">
			<arg name="envptr" type="struct Environment *"/>
			<arg name="block" type="APTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="CreateArgstring" result="STRPTR">
			<arg name="string" type="CONST_STRPTR"/>
			<arg name="length" type="ULONG"/>
		</method>
		<method name="DeleteArgstring" result="VOID">
			<arg name="argstring" type="STRPTR"/>
		</method>
		<method name="LengthArgstring" result="LONG">
			<arg name="argstring" type="CONST_STRPTR"/>
		</method>
		<method name="CreateRexxMsg" result="struct RexxMsg *">
			<arg name="port" type="struct MsgPort *"/>
			<arg name="extension" type="CONST_STRPTR"/>
			<arg name="host" type="CONST_STRPTR"/>
		</method>
		<method name="DeleteRexxMsg" result="VOID">
			<arg name="packet" type="struct RexxMsg *"/>
		</method>
		<method name="ClearRexxMsg" result="VOID">
			<arg name="msgptr" type="struct RexxMsg *"/>
			<arg name="count" type="ULONG"/>
		</method>
		<method name="FillRexxMsg" result="BOOL">
			<arg name="msgptr" type="struct RexxMsg *"/>
			<arg name="count" type="ULONG"/>
			<arg name="mask" type="ULONG"/>
		</method>
		<method name="IsRexxMsg" result="BOOL">
			<arg name="msgptr" type="struct RexxMsg *"/>
		</method>
		<method name="AddRsrcNode" result="struct Node *" status="private">
			<arg name="list" type="struct List *"/>
			<arg name="name" type="STRPTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="FindRsrcNode" result="struct Node *" status="private">
			<arg name="list" type="struct List *"/>
			<arg name="name" type="STRPTR"/>
			<arg name="type" type="LONG"/>
		</method>
		<method name="RemRsrcList" result="VOID" status="private">
			<arg name="list" type="struct List *"/>
		</method>
		<method name="RemRsrcNode" result="VOID" status="private">
			<arg name="node" type="struct Node *"/>
		</method>
		<method name="OpenPublicPort" result="struct RexxMsgPort *" status="private">
			<arg name="list" type="struct List *"/>
			<arg name="name" type="STRPTR"/>
		</method>
		<method name="ClosePublicPort" result="VOID" status="private">
			<arg name="node" type="struct RexxMsgPort *"/>
		</method>
		<method name="ListNames" result="struct RexxArg *" status="private">
			<arg name="list" type="struct List *"/>
			<arg name="separator" type="UBYTE"/>
		</method>
		<method name="RexxClearMem" result="VOID" status="private">
			<arg name="address" type="APTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="InitList" result="VOID" status="private">
			<arg name="list" type="struct List *"/>
		</method>
		<method name="InitPort" result="LONG" status="private">
			<arg name="port" type="struct MsgPort *"/>
			<arg name="name" type="STRPTR"/>
		</method>
		<method name="FreePort" result="VOID" status="private">
			<arg name="port" type="struct MsgPort *"/>
		</method>
		<method name="CmpString" result="LONG" status="private">
			<arg name="ss1" type="struct NexxStr *"/>
			<arg name="ss2" type="struct NexxStr *"/>
		</method>
		<method name="StcToken" result="LONG" status="private">
			<arg name="string" type="STRPTR"/>
		</method>
		<method name="StrcmpN" result="LONG" status="private">
			<arg name="string1" type="STRPTR"/>
			<arg name="string2" type="STRPTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="StrcmpU" result="LONG" status="private">
			<arg name="string1" type="STRPTR"/>
			<arg name="string2" type="STRPTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="StrcpyA" result="ULONG" status="private">
			<arg name="destination" type="STRPTR"/>
			<arg name="source" type="STRPTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="StrcpyN" result="ULONG" status="private">
			<arg name="destination" type="STRPTR"/>
			<arg name="source" type="STRPTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="StrcpyU" result="ULONG" status="private">
			<arg name="destination" type="STRPTR"/>
			<arg name="source" type="STRPTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="StrflipN" result="VOID" status="private">
			<arg name="string" type="STRPTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="Strlen" result="LONG" status="private">
			<arg name="string" type="STRPTR"/>
		</method>
		<method name="RexxToUpper" result="UBYTE" status="private">
			<arg name="character" type="UBYTE"/>
		</method>
		<method name="CVa2i" result="LONG" status="private">
			<arg name="buffer" type="STRPTR"/>
		</method>
		<method name="CVi2a" result="LONG" status="private">
			<arg name="buffer" type="STRPTR"/>
			<arg name="value" type="LONG"/>
			<arg name="digits" type="LONG"/>
		</method>
		<method name="CVi2arg" result="struct RexxArg *" status="private">
			<arg name="value" type="LONG"/>
		</method>
		<method name="CVi2az" result="LONG" status="private">
			<arg name="buffer" type="STRPTR"/>
			<arg name="value" type="LONG"/>
			<arg name="digits" type="LONG"/>
		</method>
		<method name="CVc2x" result="LONG" status="private">
			<arg name="outbuff" type="STRPTR"/>
			<arg name="string" type="STRPTR"/>
			<arg name="length" type="LONG"/>
			<arg name="mode" type="LONG"/>
		</method>
		<method name="CVx2c" result="LONG" status="private">
			<arg name="outbuff" type="STRPTR"/>
			<arg name="string" type="STRPTR"/>
			<arg name="length" type="LONG"/>
			<arg name="mode" type="LONG"/>
		</method>
		<method name="OpenF" result="struct IoBuff *" status="private">
			<arg name="list" type="struct List *"/>
			<arg name="filename" type="STRPTR"/>
			<arg name="mode" type="LONG"/>
			<arg name="logical" type="LONG"/>
		</method>
		<method name="CloseF" result="BOOL" status="private">
			<arg name="iob" type="struct IoBuff *"/>
		</method>
		<method name="ReadStr" result="LONG" status="private">
			<arg name="iob" type="struct IoBuff *"/>
			<arg name="buffer" type="APTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="ReadF" result="LONG" status="private">
			<arg name="iob" type="struct IoBuff *"/>
			<arg name="buffer" type="APTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="WriteF" result="LONG" status="private">
			<arg name="iob" type="struct IoBuff *"/>
			<arg name="buffer" type="APTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="SeekF" result="LONG" status="private">
			<arg name="iob" type="struct IoBuff *"/>
			<arg name="offset" type="LONG"/>
			<arg name="anchor" type="LONG"/>
		</method>
		<method name="QueueF" result="LONG" status="private">
			<arg name="iob" type="struct IoBuff *"/>
			<arg name="buffer" type="APTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="StackF" result="LONG" status="private">
			<arg name="iob" type="struct IoBuff *"/>
			<arg name="buffer" type="APTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="ExistF" result="BOOL" status="private">
			<arg name="filename" type="STRPTR"/>
		</method>
		<method name="DOSCommand" result="LONG" status="private">
			<arg name="commandstring" type="STRPTR"/>
			<arg name="outputhandle" type="BPTR"/>
			<arg name="inputhandle" type="BPTR"/>
		</method>
		<method name="DOSRead" result="LONG" status="private">
			<arg name="filehandle" type="BPTR"/>
			<arg name="buffer" type="APTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="DOSWrite" result="LONG" status="private">
			<arg name="filehandle" type="BPTR"/>
			<arg name="buffer" type="APTR"/>
			<arg name="length" type="LONG"/>
		</method>
		<method name="CreateDOSPkt" result="struct StandardPacket *" status="private">
		</method>
		<method name="DeleteDOSPkt" result="VOID" status="private">
			<arg name="sp" type="struct StandardPacket *"/>
		</method>
		<method name="SendDOSPkt" result="VOID" status="private">
			<arg name="handler" type="struct MsgPort *"/>
			<arg name="sp" type="struct StandardPacket *"/>
		</method>
		<method name="WaitDOSPkt" result="struct Message *" status="private">
			<arg name="waitport" type="struct MsgPort *"/>
			<arg name="waitmask" type="ULONG"/>
		</method>
		<method name="FindDevice" result="struct DosList *" status="private">
			<arg name="devicename" type="STRPTR"/>
			<arg name="type" type="LONG"/>
		</method>
		<method name="AddClipNode" result="struct Node *" status="private">
			<arg name="list" type="struct List *"/>
			<arg name="node" type="struct Node *"/>
			<arg name="length" type="LONG"/>
			<arg name="value" type="APTR"/>
		</method>
		<method name="RemClipNode" result="VOID" status="private">
			<arg name="node" type="struct Node *"/>
		</method>
		<method name="LockRexxBase" result="VOID">
			<arg name="resource" type="ULONG"/>
		</method>
		<method name="UnlockRexxBase" result="VOID">
			<arg name="resource" type="ULONG"/>
		</method>
		<method name="CreateCLI" result="BPTR" status="private">
			<arg name="cli" type="BPTR"/>
		</method>
		<method name="DeleteCLI" result="VOID" status="private">
			<arg name="cli" type="BPTR"/>
		</method>
		<method name="CVs2i" result="LONG" status="private">
			<arg name="ss" type="struct NexxStr *"/>
		</method>
		<method name="CreateRexxHostPort" result="struct MsgPort *">
			<arg name="base_name" type="STRPTR"/>
		</method>
		<method name="DeleteRexxHostPort" result="VOID">
			<arg name="port" type="struct MsgPort *"/>
		</method>
		<method name="GetRexxVarFromMsg" result="LONG">
			<arg name="name" type="STRPTR"/>
			<arg name="buffer" type="STRPTR"/>
			<arg name="message" type="struct RexxMsg *"/>
		</method>
		<method name="SetRexxVarFromMsg" result="LONG">
			<arg name="name" type="STRPTR"/>
			<arg name="value" type="STRPTR"/>
			<arg name="message" type="struct RexxMsg *"/>
		</method>
		<method name="LaunchRexxScript" result="struct RexxMsg *">
			<arg name="script_name" type="STRPTR"/>
			<arg name="host_port" type="struct MsgPort *"/>
			<arg name="extension" type="STRPTR"/>
			<arg name="input_handle" type="BPTR"/>
			<arg name="output_handle" type="BPTR"/>
		</method>
		<method name="FreeRexxMsg" result="VOID">
			<arg name="message" type="struct RexxMsg *"/>
		</method>
	</interface>
</library>
