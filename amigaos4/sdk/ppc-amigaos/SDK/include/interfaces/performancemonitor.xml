<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE library SYSTEM "library.dtd">
<library name="performancemonitor" basename="PMBase" openname="performancemonitor.resource">

  <copyright>Copyright (C) 2004 Trevor Dickinson</copyright>

  <include>interfaces/performancemonitor.h</include>
  <include>resources/performancemonitor.h</include>

  <interface name="main" version="1.0" struct="PerformanceMonitorIFace" prefix="main" asmprefix="IPM" global="IPM">
    <method name="Obtain" result="uint32"/>
    <method name="Release" result="uint32"/>
    <method name="Expunge" result="void" status="unimplemented"/>
    <method name="Clone" result="struct Interface *" status="unimplemented"/>

    <method name="CounterGet" result="uint32">
      <arg name="whatCount" type="uint32"/>
    </method>

    <method name="CounterMatch" result="uint32">
      <arg name="itemNum" type="uint32"/>
    </method>

    <method name="CounterControl" result="BOOL">
      <arg name="whichCount" type="uint32"/>
      <arg name="value" type="int32"/>
      <arg name="what" type="uint32"/>
    </method>

    <method name="EventControl" result="uint32">
      <arg name="tagList" type="struct TagItem *"/>
    </method>

    <method name="EventControlTags" result="uint32">
      <vararg name="Tag1" type="uint32"/>
    </method>

    <method name="SetInterruptVector" result="struct Interrupt *">
      <arg name="event" type="uint32"/>
      <arg name="handler" type="struct Interrupt *"/>
    </method>

    <method name="Mark" result="void">
      <arg name="task" type="struct Task *"/>
    </method>

    <method name="Unmark" result="void">
      <arg name="task" type="struct Task *"/>
    </method>

    <method name="MonitorControl" result="uint32">
      <arg name="tagList" type="struct TagItem *"/>
    </method>

    <method name="MonitorControlTags" result="uint32">
      <vararg name="Tag1" type="uint32"/>
    </method>

    <method name="Query" result="uint32">
      <arg name="item" type="uint32"/>
    </method>

    <method name="SetSampledAddress" result="void">
      <arg name="addr" type="APTR"/>
    </method>

    <method name="GetSampledAddress" result="APTR">
    </method>

    <method name="SetBreakpoint" result="void">
      <arg name="type" type="uint32"/>
      <arg name="instAddr" type="APTR"/>
      <arg name="instMask" type="uint32"/>
      <arg name="except" type="BOOL"/>
    </method>
  </interface>
</library>
