#ifndef INLINE4_RENDER_H
#define INLINE4_RENDER_H

/*
** This file was auto generated by idltool 51.3.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef GRAPHICS_GFX_H
#include <graphics/gfx.h>
#endif
#ifndef UTILITY_HOOKS_H
#include <utility/hooks.h>
#endif
#ifndef UTILITY_TAGITEM_H
#include <utility/tagitem.h>
#endif

/* Inline macros for Interface "main" */
#define TurboFillMem(dst, len, val) IRender->TurboFillMem(dst, len, val) 
#define TurboCopyMem(src, dst, len) IRender->TurboCopyMem(src, dst, len) 
#define CreateRMHandlerA(taglist) IRender->CreateRMHandlerA(taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define CreateRMHandler(...) IRender->CreateRMHandler(__VA_ARGS__) 
#endif
#define DeleteRMHandler(rmh) IRender->DeleteRMHandler(rmh) 
#define AllocRenderMem(rendermemhandler, size) IRender->AllocRenderMem(rendermemhandler, size) 
#define FreeRenderMem(rendermemhandler, mem, size) IRender->FreeRenderMem(rendermemhandler, mem, size) 
#define AllocRenderVec(rendermemhandler, size) IRender->AllocRenderVec(rendermemhandler, size) 
#define FreeRenderVec(mem) IRender->FreeRenderVec(mem) 
#define CreateHistogramA(taglist) IRender->CreateHistogramA(taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define CreateHistogram(...) IRender->CreateHistogram(__VA_ARGS__) 
#endif
#define DeleteHistogram(histogram) IRender->DeleteHistogram(histogram) 
#define QueryHistogram(histogram, d0arg) IRender->QueryHistogram(histogram, d0arg) 
#define AddRGB(histogram, RGB, count) IRender->AddRGB(histogram, RGB, count) 
#define AddRGBImageA(histogram, rgb, width, height, taglist) IRender->AddRGBImageA(histogram, rgb, width, height, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define AddRGBImage(histogram, rgb, width, ...) IRender->AddRGBImage(histogram, rgb, width, __VA_ARGS__) 
#endif
#define AddChunkyImageA(histogram, chunky, width, height, palette, taglist) IRender->AddChunkyImageA(histogram, chunky, width, height, palette, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define AddChunkyImage(histogram, chunky, width, height, ...) IRender->AddChunkyImage(histogram, chunky, width, height, __VA_ARGS__) 
#endif
#define ExtractPaletteA(histogram, palette, numcolors, taglist) IRender->ExtractPaletteA(histogram, palette, numcolors, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define ExtractPalette(histogram, palette, ...) IRender->ExtractPalette(histogram, palette, __VA_ARGS__) 
#endif
#define RenderA(rgb, width, height, chunky, palette, taglist) IRender->RenderA(rgb, width, height, chunky, palette, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define Render(rgb, width, height, chunky, ...) IRender->Render(rgb, width, height, chunky, __VA_ARGS__) 
#endif
#define Planar2ChunkyA(planetab, bytewidth, height, depth, bytesperrow, chunky, taglist) IRender->Planar2ChunkyA(planetab, bytewidth, height, depth, bytesperrow, chunky, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define Planar2Chunky(planetab, bytewidth, height, depth, bytesperrow, ...) IRender->Planar2Chunky(planetab, bytewidth, height, depth, bytesperrow, __VA_ARGS__) 
#endif
#define Chunky2RGBA(chunky, width, height, rgb, palette, taglist) IRender->Chunky2RGBA(chunky, width, height, rgb, palette, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define Chunky2RGB(chunky, width, height, rgb, ...) IRender->Chunky2RGB(chunky, width, height, rgb, __VA_ARGS__) 
#endif
#define Chunky2BitMapA(chunky, sx, sy, width, height, bitmap, dx, dy, taglist) IRender->Chunky2BitMapA(chunky, sx, sy, width, height, bitmap, dx, dy, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define Chunky2BitMap(chunky, sx, sy, width, height, bitmap, dx, ...) IRender->Chunky2BitMap(chunky, sx, sy, width, height, bitmap, dx, __VA_ARGS__) 
#endif
#define CreateScaleEngineA(sourcewidth, sourceheight, destwidth, destheight, taglist) IRender->CreateScaleEngineA(sourcewidth, sourceheight, destwidth, destheight, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define CreateScaleEngine(sourcewidth, sourceheight, destwidth, ...) IRender->CreateScaleEngine(sourcewidth, sourceheight, destwidth, __VA_ARGS__) 
#endif
#define DeleteScaleEngine(engine) IRender->DeleteScaleEngine(engine) 
#define ScaleA(engine, source, dest, taglist) IRender->ScaleA(engine, source, dest, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define Scale(engine, source, ...) IRender->Scale(engine, source, __VA_ARGS__) 
#endif
#define ConvertChunkyA(source, oldpalette, width, height, dest, newpalette, taglist) IRender->ConvertChunkyA(source, oldpalette, width, height, dest, newpalette, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define ConvertChunky(source, oldpalette, width, height, dest, ...) IRender->ConvertChunky(source, oldpalette, width, height, dest, __VA_ARGS__) 
#endif
#define CreatePenTableA(chunky, oldpalette, width, height, newpalette, convtab, taglist) IRender->CreatePenTableA(chunky, oldpalette, width, height, newpalette, convtab, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define CreatePenTable(chunky, oldpalette, width, height, newpalette, ...) IRender->CreatePenTable(chunky, oldpalette, width, height, newpalette, __VA_ARGS__) 
#endif
#define CreatePaletteA(taglist) IRender->CreatePaletteA(taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define CreatePalette(...) IRender->CreatePalette(__VA_ARGS__) 
#endif
#define DeletePalette(palette) IRender->DeletePalette(palette) 
#define ImportPaletteA(palette, coltab, numcols, taglist) IRender->ImportPaletteA(palette, coltab, numcols, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define ImportPalette(palette, coltab, ...) IRender->ImportPalette(palette, coltab, __VA_ARGS__) 
#endif
#define ExportPaletteA(palette, coltab, taglist) IRender->ExportPaletteA(palette, coltab, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define ExportPalette(palette, ...) IRender->ExportPalette(palette, __VA_ARGS__) 
#endif
#define CountRGB(histogram, rgb) IRender->CountRGB(histogram, rgb) 
#define BestPen(palette, rgb) IRender->BestPen(palette, rgb) 
#define FlushPalette(palette) IRender->FlushPalette(palette) 
#define SortPaletteA(palette, mode, taglist) IRender->SortPaletteA(palette, mode, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define SortPalette(palette, ...) IRender->SortPalette(palette, __VA_ARGS__) 
#endif
#define AddHistogramA(histogram1, histogram2, taglist) IRender->AddHistogramA(histogram1, histogram2, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define AddHistogram(histogram1, ...) IRender->AddHistogram(histogram1, __VA_ARGS__) 
#endif
#define ScaleOrdinate(source, dest, ordinate) IRender->ScaleOrdinate(source, dest, ordinate) 
#define CreateHistogramPointerArray(histogram) IRender->CreateHistogramPointerArray(histogram) 
#define CountHistogram(histogram) IRender->CountHistogram(histogram) 
#define CreateMapEngineA(palette, taglist) IRender->CreateMapEngineA(palette, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define CreateMapEngine(...) IRender->CreateMapEngine(__VA_ARGS__) 
#endif
#define DeleteMapEngine(engine) IRender->DeleteMapEngine(engine) 
#define MapRGBArrayA(engine, rgb, width, height, chunky, taglist) IRender->MapRGBArrayA(engine, rgb, width, height, chunky, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define MapRGBArray(engine, rgb, width, height, ...) IRender->MapRGBArray(engine, rgb, width, height, __VA_ARGS__) 
#endif
#define RGBArrayDiversityA(rgb, width, height, taglist) IRender->RGBArrayDiversityA(rgb, width, height, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define RGBArrayDiversity(rgb, width, ...) IRender->RGBArrayDiversity(rgb, width, __VA_ARGS__) 
#endif
#define ChunkyArrayDiversityA(chunky, palette, width, height, taglist) IRender->ChunkyArrayDiversityA(chunky, palette, width, height, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define ChunkyArrayDiversity(chunky, palette, width, ...) IRender->ChunkyArrayDiversity(chunky, palette, width, __VA_ARGS__) 
#endif
#define MapChunkyArrayA(engine, source, palette, width, height, dest, taglist) IRender->MapChunkyArrayA(engine, source, palette, width, height, dest, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define MapChunkyArray(engine, source, palette, width, height, ...) IRender->MapChunkyArray(engine, source, palette, width, height, __VA_ARGS__) 
#endif
#define InsertAlphaChannelA(maskarray, width, height, rgbarray, taglist) IRender->InsertAlphaChannelA(maskarray, width, height, rgbarray, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define InsertAlphaChannel(maskarray, width, height, ...) IRender->InsertAlphaChannel(maskarray, width, height, __VA_ARGS__) 
#endif
#define ExtractAlphaChannelA(rgbarray, width, height, chunkyarray, taglist) IRender->ExtractAlphaChannelA(rgbarray, width, height, chunkyarray, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define ExtractAlphaChannel(rgbarray, width, height, ...) IRender->ExtractAlphaChannel(rgbarray, width, height, __VA_ARGS__) 
#endif
#define ApplyAlphaChannelA(sourcearray, width, height, destarray, taglist) IRender->ApplyAlphaChannelA(sourcearray, width, height, destarray, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define ApplyAlphaChannel(sourcearray, width, height, ...) IRender->ApplyAlphaChannel(sourcearray, width, height, __VA_ARGS__) 
#endif
#define MixRGBArrayA(sourcearray, width, height, destarray, ratio, taglist) IRender->MixRGBArrayA(sourcearray, width, height, destarray, ratio, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define MixRGBArray(sourcearray, width, height, destarray, ...) IRender->MixRGBArray(sourcearray, width, height, destarray, __VA_ARGS__) 
#endif
#define AllocRenderVecClear(rendermemhandler, size) IRender->AllocRenderVecClear(rendermemhandler, size) 
#define CreateAlphaArrayA(rgbarray, width, height, taglist) IRender->CreateAlphaArrayA(rgbarray, width, height, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define CreateAlphaArray(rgbarray, width, ...) IRender->CreateAlphaArray(rgbarray, width, __VA_ARGS__) 
#endif
#define MixAlphaChannelA(source1, source2, width, height, dest, taglist) IRender->MixAlphaChannelA(source1, source2, width, height, dest, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define MixAlphaChannel(source1, source2, width, height, ...) IRender->MixAlphaChannel(source1, source2, width, height, __VA_ARGS__) 
#endif
#define TintRGBArrayA(source, width, height, RGB, ratio, dest, taglist) IRender->TintRGBArrayA(source, width, height, RGB, ratio, dest, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define TintRGBArray(source, width, height, RGB, ratio, ...) IRender->TintRGBArray(source, width, height, RGB, ratio, __VA_ARGS__) 
#endif
#define GetPaletteAttrs(palette, args) IRender->GetPaletteAttrs(palette, args) 
#define RemapArrayA(source, width, height, dest, pentab, taglist) IRender->RemapArrayA(source, width, height, dest, pentab, taglist) 
#if !defined(__cplusplus) && (__GNUC__ >= 3    \
    || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \
    || (__STDC_VERSION__ && __STDC_VERSION__ >= 199901L))
#define RemapArray(source, width, height, dest, ...) IRender->RemapArray(source, width, height, dest, __VA_ARGS__) 
#endif

#endif /* INLINE4_RENDER_H */
