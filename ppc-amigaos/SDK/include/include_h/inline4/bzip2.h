#ifndef INLINE4_BZIP2_H
#define INLINE4_BZIP2_H

/*
** This file was auto generated by idltool 53.5.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef LIBRARIES_BZIP2_H
#include <libraries/bzip2.h>
#endif
#include <interfaces/bzip2.h>

/* Inline macros for Interface "main" */
#define BZ2_bzlibVersion() IBZip2->BZ2_bzlibVersion()
#define BZ2_bzCompressInit(strm, blockSize100k, verbosity, workFactor) IBZip2->BZ2_bzCompressInit((strm), (blockSize100k), (verbosity), (workFactor))
#define BZ2_bzCompress(strm, action) IBZip2->BZ2_bzCompress((strm), (action))
#define BZ2_bzCompressEnd(strm) IBZip2->BZ2_bzCompressEnd((strm))
#define BZ2_bzDecompressInit(strm, verbosity, small) IBZip2->BZ2_bzDecompressInit((strm), (verbosity), (small))
#define BZ2_bzDecompress(strm) IBZip2->BZ2_bzDecompress((strm))
#define BZ2_bzDecompressEnd(strm) IBZip2->BZ2_bzDecompressEnd((strm))
#define BZ2_bzBuffToBuffCompress(dest, destLen, source, sourceLen, blockSize100k, verbosity, workFactor) IBZip2->BZ2_bzBuffToBuffCompress((dest), (destLen), (source), (sourceLen), (blockSize100k), (verbosity), (workFactor))
#define BZ2_bzBuffToBuffDecompress(dest, destLen, source, sourceLen, small, verbosity) IBZip2->BZ2_bzBuffToBuffDecompress((dest), (destLen), (source), (sourceLen), (small), (verbosity))
#define BZ2_bzReadOpen(bzerror, f, verbosity, small, unused, nUnused) IBZip2->BZ2_bzReadOpen((bzerror), (f), (verbosity), (small), (unused), (nUnused))
#define BZ2_bzReadClose(bzerror, b) IBZip2->BZ2_bzReadClose((bzerror), (b))
#define BZ2_bzReadGetUnused(bzerror, b, unused, nUnused) IBZip2->BZ2_bzReadGetUnused((bzerror), (b), (unused), (nUnused))
#define BZ2_bzRead(bzerror, b, buf, len) IBZip2->BZ2_bzRead((bzerror), (b), (buf), (len))
#define BZ2_bzWriteOpen(bzerror, f, blockSize100k, verbosity, workFactor) IBZip2->BZ2_bzWriteOpen((bzerror), (f), (blockSize100k), (verbosity), (workFactor))
#define BZ2_bzWrite(bzerror, b, buf, len) IBZip2->BZ2_bzWrite((bzerror), (b), (buf), (len))
#define BZ2_bzWriteClose(bzerror, b, abandon, nbytes_in, nbytes_out) IBZip2->BZ2_bzWriteClose((bzerror), (b), (abandon), (nbytes_in), (nbytes_out))
#define BZ2_bzWriteClose64(bzerror, b, abandon, nbytes_in_lo32, nbytes_in_hi32, nbytes_out_lo32, nbytes_out_hi32) IBZip2->BZ2_bzWriteClose64((bzerror), (b), (abandon), (nbytes_in_lo32), (nbytes_in_hi32), (nbytes_out_lo32), (nbytes_out_hi32))
#define BZ2_bzopen(path, mode) IBZip2->BZ2_bzopen((path), (mode))
#define BZ2_bzdopen(fd, mode) IBZip2->BZ2_bzdopen((fd), (mode))
#define BZ2_bzread(b, buf, len) IBZip2->BZ2_bzread((b), (buf), (len))
#define BZ2_bzwrite(b, buf, len) IBZip2->BZ2_bzwrite((b), (buf), (len))
#define BZ2_bzflush(b) IBZip2->BZ2_bzflush((b))
#define BZ2_bzclose(b) IBZip2->BZ2_bzclose((b))
#define BZ2_bzerror(b, errnum) IBZip2->BZ2_bzerror((b), (errnum))

#endif /* INLINE4_BZIP2_H */
