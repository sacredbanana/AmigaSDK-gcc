#ifndef INLINE4_UTILITY_H
#define INLINE4_UTILITY_H

/*
** This file was auto generated by idltool 53.7.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef UTILITY_UTILITY_H
#include <utility/utility.h>
#endif
#include <interfaces/utility.h>

/* Inline macros for Interface "main" */
#define AllocateTagItems(numTags) IUtility->AllocateTagItems((numTags)) 
#define ApplyTagChanges(list, changeList) IUtility->ApplyTagChanges((list), (changeList)) 
#define CloneTagItems(original) IUtility->CloneTagItems((original)) 
#define FilterTagChanges(changeList, originalList, apply) IUtility->FilterTagChanges((changeList), (originalList), (apply)) 
#define FilterTagItems(taglist, filterArray, logic) IUtility->FilterTagItems((taglist), (filterArray), (logic)) 
#define FindTagItem(tagValue, tagList) IUtility->FindTagItem((tagValue), (tagList)) 
#define FreeTagItems(tagList) IUtility->FreeTagItems((tagList)) 
#define GetTagData(tagValue, defaultVal, tagList) IUtility->GetTagData((tagValue), (defaultVal), (tagList)) 
#define MapTags(tagList, mapList, mapType) IUtility->MapTags((tagList), (mapList), (mapType)) 
#define NextTagItem(tags) IUtility->NextTagItem((tags)) 
#define PackBoolTags(initialFlags, tagList, boolMap) IUtility->PackBoolTags((initialFlags), (tagList), (boolMap)) 
#define RefreshTagItemClones(clone, original) IUtility->RefreshTagItemClones((clone), (original)) 
#define TagInArray(tagValue, tagArray) IUtility->TagInArray((tagValue), (tagArray)) 
#define CallHookPkt(hook, object, message) IUtility->CallHookPkt((hook), (object), (message)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define CallHook(hook, ...) IUtility->CallHook((hook), __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define CallHook(hook, vargs...) IUtility->CallHook(hook, ## vargs) 
#endif
#define AddNamedObject(nameSpace, object) IUtility->AddNamedObject((nameSpace), (object)) 
#define AllocNamedObjectA(name, tags) IUtility->AllocNamedObjectA((name), (tags)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define AllocNamedObject(...) IUtility->AllocNamedObject(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define AllocNamedObject(vargs...) IUtility->AllocNamedObject(## vargs) 
#endif
#define AttemptRemNamedObject(object) IUtility->AttemptRemNamedObject((object)) 
#define FindNamedObject(name_space, name, previous_object) IUtility->FindNamedObject((name_space), (name), (previous_object)) 
#define FreeNamedObject(obj) IUtility->FreeNamedObject((obj)) 
#define NamedObjectName(obj) IUtility->NamedObjectName((obj)) 
#define ReleaseNamedObject(obj) IUtility->ReleaseNamedObject((obj)) 
#define RemNamedObject(obj, message) IUtility->RemNamedObject((obj), (message)) 
#define Amiga2Date(date_amiga, cd) IUtility->Amiga2Date((date_amiga), (cd)) 
#define CheckDate(date) IUtility->CheckDate((date)) 
#define Date2Amiga(date) IUtility->Date2Amiga((date)) 
#define CreateSkipList(hook, max_levels) IUtility->CreateSkipList((hook), (max_levels)) 
#define DeleteSkipList(skipList) IUtility->DeleteSkipList((skipList)) 
#define FindSkipNode(skipList, key) IUtility->FindSkipNode((skipList), (key)) 
#define GetFirstSkipNode(skipList) IUtility->GetFirstSkipNode((skipList)) 
#define GetNextSkipNode(skipList, node) IUtility->GetNextSkipNode((skipList), (node)) 
#define InsertSkipNode(skipList, key, dataSize) IUtility->InsertSkipNode((skipList), (key), (dataSize)) 
#define RemoveSkipNode(skipList, key) IUtility->RemoveSkipNode((skipList), (key)) 
#define CreateSplayTree(compareHook) IUtility->CreateSplayTree((compareHook)) 
#define DeleteSplayTree(splayTree) IUtility->DeleteSplayTree((splayTree)) 
#define FindSplayNode(splayTree, key) IUtility->FindSplayNode((splayTree), (key)) 
#define InsertSplayNode(splayTree, key, date_size) IUtility->InsertSplayNode((splayTree), (key), (date_size)) 
#define RemoveSplayNode(splayTree, key) IUtility->RemoveSplayNode((splayTree), (key)) 
#define FindNameNC(list, name) IUtility->FindNameNC((list), (name)) 
#define GetUniqueID() IUtility->GetUniqueID() 
#define MessageDigest_SHA_Final(shas) IUtility->MessageDigest_SHA_Final((shas)) 
#define MessageDigest_SHA_Init(shas) IUtility->MessageDigest_SHA_Init((shas)) 
#define MessageDigest_SHA_Update(shas, data, num_bytes) IUtility->MessageDigest_SHA_Update((shas), (data), (num_bytes)) 
#define PackStructureTags(pack, pack_table, tagList) IUtility->PackStructureTags((pack), (pack_table), (tagList)) 
#define UnpackStructureTags(pack, pack_table, tagList) IUtility->UnpackStructureTags((pack), (pack_table), (tagList)) 
#define Random(state) IUtility->Random((state)) 
#define SetMem(destination, fillChar, length) IUtility->SetMem((destination), (fillChar), (length)) 
#define Stricmp(s1, s2) IUtility->Stricmp((s1), (s2)) 
#define Strlcpy(dst, src, size) IUtility->Strlcpy((dst), (src), (size)) 
#define Strlcat(dst, src, size) IUtility->Strlcat((dst), (src), (size)) 
#define Strnicmp(s1, s2, n) IUtility->Strnicmp((s1), (s2), (n)) 
#define ToLower(c) IUtility->ToLower((c)) 
#define ToUpper(c) IUtility->ToUpper((c)) 
#define VASPrintf(fmt, args) IUtility->VASPrintf((fmt), (args)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ASPrintf(...) IUtility->ASPrintf(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ASPrintf(vargs...) IUtility->ASPrintf(## vargs) 
#endif
#define VSNPrintf(buffer, bufferSize, fmt, args) IUtility->VSNPrintf((buffer), (bufferSize), (fmt), (args)) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define SNPrintf(buffer, bufferSize, ...) IUtility->SNPrintf((buffer), (bufferSize), __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define SNPrintf(buffer, bufferSize, vargs...) IUtility->SNPrintf(buffer, bufferSize, ## vargs) 
#endif
#define ClearMem(destination, size) IUtility->ClearMem((destination), (size)) 
#define MoveMem(source, destination, size) IUtility->MoveMem((source), (destination), (size)) 
#define Strlen(string) IUtility->Strlen((string)) 
#define UTF8toUCS4(utf8_source, ucs4_destination, ucs4_destination_size, flags) IUtility->UTF8toUCS4((utf8_source), (ucs4_destination), (ucs4_destination_size), (flags)) 
#define UCS4toUTF8(ucs4_source, utf8_destination, utf8_destination_size, flags) IUtility->UCS4toUTF8((ucs4_source), (utf8_destination), (utf8_destination_size), (flags)) 
#define UTF8Strnicmp(utf8string1, utf8string2, maxUCSchars) IUtility->UTF8Strnicmp((utf8string1), (utf8string2), (maxUCSchars)) 
#define UTF8Stricmp(utf8string1, utf8string2) IUtility->UTF8Stricmp((utf8string1), (utf8string2)) 
#define UTF8Count(utf8string, validate) IUtility->UTF8Count((utf8string), (validate)) 
#define UCS4Count(ucs4string, validate) IUtility->UCS4Count((ucs4string), (validate)) 
#define UTF8Encode(ucs4, buffer, bufsize, flags) IUtility->UTF8Encode((ucs4), (buffer), (bufsize), (flags)) 
#define UTF8Decode(utf8_pptr, flags) IUtility->UTF8Decode((utf8_pptr), (flags)) 
#define UCS4ToLower(ucs4in) IUtility->UCS4ToLower((ucs4in)) 
#define UCS4ToUpper(ucs4in) IUtility->UCS4ToUpper((ucs4in)) 
#define UCS4Valid(ucs4) IUtility->UCS4Valid((ucs4)) 

#endif /* INLINE4_UTILITY_H */
