#ifndef INLINE4_LOCALE_H
#define INLINE4_LOCALE_H

/*
** This file was auto generated by idltool 51.8.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef LIBRARIES_LOCALE_H
#include <libraries/locale.h>
#endif
#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif
#ifndef UTILITY_HOOKS_H
#include <utility/hooks.h>
#endif
#ifndef UTILITY_TAGITEM_H
#include <utility/tagitem.h>
#endif
#ifndef REXX_STORAGE_H
#include <rexx/storage.h>
#endif

/* Inline macros for Interface "main" */
#define CloseCatalog(catalog) ILocale->CloseCatalog(catalog) 
#define CloseLocale(locale) ILocale->CloseLocale(locale) 
#define ConvToLower(locale, character) ILocale->ConvToLower(locale, character) 
#define ConvToUpper(locale, character) ILocale->ConvToUpper(locale, character) 
#define FormatDate(locale, fmtTemplate, date, putCharFunc) ILocale->FormatDate(locale, fmtTemplate, date, putCharFunc) 
#define FormatString(locale, fmtTemplate, dataStream, putCharFunc) ILocale->FormatString(locale, fmtTemplate, dataStream, putCharFunc) 
#define GetCatalogStr(catalog, stringNum, defaultString) ILocale->GetCatalogStr(catalog, stringNum, defaultString) 
#define GetLocaleStr(locale, stringNum) ILocale->GetLocaleStr(locale, stringNum) 
#define IsAlNum(locale, character) ILocale->IsAlNum(locale, character) 
#define IsAlpha(locale, character) ILocale->IsAlpha(locale, character) 
#define IsCntrl(locale, character) ILocale->IsCntrl(locale, character) 
#define IsDigit(locale, character) ILocale->IsDigit(locale, character) 
#define IsGraph(locale, character) ILocale->IsGraph(locale, character) 
#define IsLower(locale, character) ILocale->IsLower(locale, character) 
#define IsPrint(locale, character) ILocale->IsPrint(locale, character) 
#define IsPunct(locale, character) ILocale->IsPunct(locale, character) 
#define IsSpace(locale, character) ILocale->IsSpace(locale, character) 
#define IsUpper(locale, character) ILocale->IsUpper(locale, character) 
#define IsXDigit(locale, character) ILocale->IsXDigit(locale, character) 
#define OpenCatalogA(locale, name, tags) ILocale->OpenCatalogA(locale, name, tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define OpenCatalog(locale, ...) ILocale->OpenCatalog(locale, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define OpenCatalog(locale, vargs...) ILocale->OpenCatalog(locale, ## vargs) 
#endif
#define OpenLocale(name) ILocale->OpenLocale(name) 
#define ParseDate(locale, date, fmtTemplate, getCharFunc) ILocale->ParseDate(locale, date, fmtTemplate, getCharFunc) 
#define StrConvert(locale, string, buffer, bufferSize, type) ILocale->StrConvert(locale, string, buffer, bufferSize, type) 
#define StrnCmp(locale, string1, string2, length, type) ILocale->StrnCmp(locale, string1, string2, length, type) 
#define Locale_DateToStr(datetime) ILocale->Locale_DateToStr(datetime) 
#define Locale_StrToDate(datetime) ILocale->Locale_StrToDate(datetime) 
#define IsBlank(locale, character) ILocale->IsBlank(locale, character) 
#define FormatString32(locale, fmtTemplate, dataStream, putCharFunc) ILocale->FormatString32(locale, fmtTemplate, dataStream, putCharFunc) 

#endif /* INLINE4_LOCALE_H */
