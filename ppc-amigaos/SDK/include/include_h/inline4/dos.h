#ifndef INLINE4_DOS_H
#define INLINE4_DOS_H

/*
** This file was auto generated by idltool 53.24.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif
#ifndef DOS_DOSEXTENS_H
#include <dos/dosextens.h>
#endif
#ifndef DOS_RECORD_H
#include <dos/record.h>
#endif
#ifndef DOS_RDARGS_H
#include <dos/rdargs.h>
#endif
#ifndef DOS_DOSASL_H
#include <dos/dosasl.h>
#endif
#ifndef DOS_VAR_H
#include <dos/var.h>
#endif
#ifndef DOS_NOTIFY_H
#include <dos/notify.h>
#endif
#ifndef DOS_DATETIME_H
#include <dos/datetime.h>
#endif
#ifndef DOS_EXALL_H
#include <dos/exall.h>
#endif
#ifndef DOS_FILEHANDLER_H
#include <dos/filehandler.h>
#endif
#ifndef DOS_DOSTAGS_H
#include <dos/dostags.h>
#endif
#ifndef DOS_MOUNT_H
#include <dos/mount.h>
#endif
#ifndef DOS_DOSHUNKS_H
#include <dos/doshunks.h>
#endif
#ifndef DOS_PATH_H
#include <dos/path.h>
#endif
#ifndef DOS_ANCHORPATH_H
#include <dos/anchorpath.h>
#endif
#include <interfaces/dos.h>

/* Inline macros for Interface "main" */
#define Open(name, accessMode) IDOS->Open((name), (accessMode))
#define Close(file) IDOS->Close((file))
#define Read(file, buffer, length) IDOS->Read((file), (buffer), (length))
#define Write(file, buffer, length) IDOS->Write((file), (buffer), (length))
#define Input() IDOS->Input()
#define Output() IDOS->Output()
#define OBSOLETESeek(file, position, offset) IDOS->OBSOLETESeek((file), (position), (offset))
#define Delete(name) IDOS->Delete((name))
#define Rename(oldName, newName) IDOS->Rename((oldName), (newName))
#define Lock(name, type) IDOS->Lock((name), (type))
#define UnLock(lock) IDOS->UnLock((lock))
#define DupLock(lock) IDOS->DupLock((lock))
#define OBSOLETEExamine(lock, fileInfoBlock) IDOS->OBSOLETEExamine((lock), (fileInfoBlock))
#define OBSOLETEExNext(lock, fileInfoBlock) IDOS->OBSOLETEExNext((lock), (fileInfoBlock))
#define Info(lock, parameterBlock) IDOS->Info((lock), (parameterBlock))
#define CreateDir(name) IDOS->CreateDir((name))
#define SetCurrentDir(lock) IDOS->SetCurrentDir((lock))
#define IoErr() IDOS->IoErr()
#define OBSOLETECreateProc(name, pri, segList, stackSize) IDOS->OBSOLETECreateProc((name), (pri), (segList), (stackSize))
#define OBSOLETEExit(returnCode) IDOS->OBSOLETEExit((returnCode))
#define OBSOLETELoadSeg(name, hunktab, stream) IDOS->OBSOLETELoadSeg((name), (hunktab), (stream))
#define UnLoadSeg(seglist) IDOS->UnLoadSeg((seglist))
#define PRIVATEDoPkt32(port, action, arg1, arg2, arg3, arg4, arg5, arg6, arg7) IDOS->PRIVATEDoPkt32((port), (action), (arg1), (arg2), (arg3), (arg4), (arg5), (arg6), (arg7))
#define LoadSeg(name) IDOS->LoadSeg((name))
#define OBSOLETEDeviceProc(name) IDOS->OBSOLETEDeviceProc((name))
#define SetComment(name, comment) IDOS->SetComment((name), (comment))
#define SetProtection(name, protect) IDOS->SetProtection((name), (protect))
#define DateStamp(date) IDOS->DateStamp((date))
#define Delay(timeout) IDOS->Delay((timeout))
#define WaitForChar(file, timeout) IDOS->WaitForChar((file), (timeout))
#define ParentDir(lock) IDOS->ParentDir((lock))
#define IsInteractive(file) IDOS->IsInteractive((file))
#define OBSOLETEExecute(string, file, file2) IDOS->OBSOLETEExecute((string), (file), (file2))
#define AllocDosObject(type, tags) IDOS->AllocDosObject((type), (tags))
#define AllocDosObjectTagList(type, tags) IDOS->AllocDosObjectTagList((type), (tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define AllocDosObjectTags(...) IDOS->AllocDosObjectTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define AllocDosObjectTags(vargs...) IDOS->AllocDosObjectTags(## vargs)
#endif
#define FreeDosObject(type, ptr) IDOS->FreeDosObject((type), (ptr))
#define DoPkt(port, action, arg1, arg2, arg3, arg4, arg5) IDOS->DoPkt((port), (action), (arg1), (arg2), (arg3), (arg4), (arg5))
#define DoPkt0(port, action) IDOS->DoPkt0((port), (action))
#define DoPkt1(port, action, arg1) IDOS->DoPkt1((port), (action), (arg1))
#define DoPkt2(port, action, arg1, arg2) IDOS->DoPkt2((port), (action), (arg1), (arg2))
#define DoPkt3(port, action, arg1, arg2, arg3) IDOS->DoPkt3((port), (action), (arg1), (arg2), (arg3))
#define DoPkt4(port, action, arg1, arg2, arg3, arg4) IDOS->DoPkt4((port), (action), (arg1), (arg2), (arg3), (arg4))
#define SendPkt(dp, port, replyport) IDOS->SendPkt((dp), (port), (replyport))
#define WaitPkt(task_replyport) IDOS->WaitPkt((task_replyport))
#define ReplyPkt(dp, res1, res2) IDOS->ReplyPkt((dp), (res1), (res2))
#define OBSOLETELockRecord(fh, offset, length, mode, timeout) IDOS->OBSOLETELockRecord((fh), (offset), (length), (mode), (timeout))
#define LockRecords(recArray, timeout) IDOS->LockRecords((recArray), (timeout))
#define OBSOLETEUnLockRecord(fh, offset, length) IDOS->OBSOLETEUnLockRecord((fh), (offset), (length))
#define UnLockRecords(recArray) IDOS->UnLockRecords((recArray))
#define SelectInput(fh) IDOS->SelectInput((fh))
#define SelectOutput(fh) IDOS->SelectOutput((fh))
#define FGetC(fh) IDOS->FGetC((fh))
#define FPutC(fh, ch) IDOS->FPutC((fh), (ch))
#define FUnGetC(fh, character) IDOS->FUnGetC((fh), (character))
#define FRead(fh, block, blocklen, number) IDOS->FRead((fh), (block), (blocklen), (number))
#define FWrite(fh, block, blocklen, number) IDOS->FWrite((fh), (block), (blocklen), (number))
#define FGets(fh, buf, buflen) IDOS->FGets((fh), (buf), (buflen))
#define FPuts(fh, str) IDOS->FPuts((fh), (str))
#define OBSOLETEVFWritef(fh, format, argarray) IDOS->OBSOLETEVFWritef((fh), (format), (argarray))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define OBSOLETEFWritef(fh, ...) IDOS->OBSOLETEFWritef((fh), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define OBSOLETEFWritef(fh, vargs...) IDOS->OBSOLETEFWritef(fh, ## vargs)
#endif
#define VFPrintf(fh, format, argarray) IDOS->VFPrintf((fh), (format), (argarray))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define FPrintf(fh, ...) IDOS->FPrintf((fh), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define FPrintf(fh, vargs...) IDOS->FPrintf(fh, ## vargs)
#endif
#define FFlush(fh) IDOS->FFlush((fh))
#define OBSOLETESetVBuf(fh, buff, type, size) IDOS->OBSOLETESetVBuf((fh), (buff), (type), (size))
#define DupLockFromFH(fh) IDOS->DupLockFromFH((fh))
#define OpenFromLock(lock) IDOS->OpenFromLock((lock))
#define ParentOfFH(fh) IDOS->ParentOfFH((fh))
#define OBSOLETEExamineFH(fh, fib) IDOS->OBSOLETEExamineFH((fh), (fib))
#define SetDate(name, date) IDOS->SetDate((name), (date))
#define NameFromLock(lock, buffer, len) IDOS->NameFromLock((lock), (buffer), (len))
#define NameFromFH(fh, buffer, len) IDOS->NameFromFH((fh), (buffer), (len))
#define SplitName(name, separator, buf, oldpos, size) IDOS->SplitName((name), (separator), (buf), (oldpos), (size))
#define SameLock(lock1, lock2) IDOS->SameLock((lock1), (lock2))
#define SetMode(fh, mode) IDOS->SetMode((fh), (mode))
#define OBSOLETEExAll(lock, buffer, size, data, control) IDOS->OBSOLETEExAll((lock), (buffer), (size), (data), (control))
#define ReadSoftLink(port, lock, path, buffer, size) IDOS->ReadSoftLink((port), (lock), (path), (buffer), (size))
#define MakeLink(name, dest, soft) IDOS->MakeLink((name), (dest), (soft))
#define ChangeMode(type, fh, newmode) IDOS->ChangeMode((type), (fh), (newmode))
#define OBSOLETESetFileSize(fh, pos, mode) IDOS->OBSOLETESetFileSize((fh), (pos), (mode))
#define SetIoErr(result) IDOS->SetIoErr((result))
#define Fault(code, header, buffer, len) IDOS->Fault((code), (header), (buffer), (len))
#define PrintFault(code, header) IDOS->PrintFault((code), (header))
#define ErrorReport(code, type, arg1, device) IDOS->ErrorReport((code), (type), (arg1), (device))
#define PRIVATERequester(s1, s2, s3, idcmp) IDOS->PRIVATERequester((s1), (s2), (s3), (idcmp))
#define Cli() IDOS->Cli()
#define CreateNewProc(tags) IDOS->CreateNewProc((tags))
#define CreateNewProcTagList(tags) IDOS->CreateNewProcTagList((tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define CreateNewProcTags(...) IDOS->CreateNewProcTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define CreateNewProcTags(...) IDOS->CreateNewProcTags(## vargs)
#endif
#define RunCommand(seg, stack, paramptr, paramlen) IDOS->RunCommand((seg), (stack), (paramptr), (paramlen))
#define GetConsolePort() IDOS->GetConsolePort()
#define SetConsolePort(port) IDOS->SetConsolePort((port))
#define GetFileSysPort() IDOS->GetFileSysPort()
#define SetFileSysPort(port) IDOS->SetFileSysPort((port))
#define GetArgStr() IDOS->GetArgStr()
#define SetArgStr(string) IDOS->SetArgStr((string))
#define FindCliProc(num) IDOS->FindCliProc((num))
#define MaxCli() IDOS->MaxCli()
#define SetCliCurrentDirName(name) IDOS->SetCliCurrentDirName((name))
#define GetCliCurrentDirName(buf, len) IDOS->GetCliCurrentDirName((buf), (len))
#define SetCliProgramName(name) IDOS->SetCliProgramName((name))
#define GetCliProgramName(buf, len) IDOS->GetCliProgramName((buf), (len))
#define SetCliPrompt(name) IDOS->SetCliPrompt((name))
#define GetCliPrompt(buf, len) IDOS->GetCliPrompt((buf), (len))
#define SetProgramDir(lock) IDOS->SetProgramDir((lock))
#define GetProgramDir() IDOS->GetProgramDir()
#define SystemTagList(command, tags) IDOS->SystemTagList((command), (tags))
#define System(command, tags) IDOS->System((command), (tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define SystemTags(...) IDOS->SystemTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define SystemTags(vargs...) IDOS->SystemTags(## vargs)
#endif
#define AssignLock(name, lock) IDOS->AssignLock((name), (lock))
#define AssignLate(name, path) IDOS->AssignLate((name), (path))
#define AssignPath(name, path) IDOS->AssignPath((name), (path))
#define AssignAdd(name, lock) IDOS->AssignAdd((name), (lock))
#define RemAssignList(name, lock) IDOS->RemAssignList((name), (lock))
#define GetDeviceProc(name, dp) IDOS->GetDeviceProc((name), (dp))
#define FreeDeviceProc(dp) IDOS->FreeDeviceProc((dp))
#define LockDosList(flags) IDOS->LockDosList((flags))
#define UnLockDosList(flags) IDOS->UnLockDosList((flags))
#define AttemptLockDosList(flags) IDOS->AttemptLockDosList((flags))
#define RemDosEntry(dlist) IDOS->RemDosEntry((dlist))
#define AddDosEntry(dlist) IDOS->AddDosEntry((dlist))
#define FindDosEntry(dlist, name, flags) IDOS->FindDosEntry((dlist), (name), (flags))
#define NextDosEntry(dlist, flags) IDOS->NextDosEntry((dlist), (flags))
#define MakeDosEntry(name, type) IDOS->MakeDosEntry((name), (type))
#define FreeDosEntry(dlist) IDOS->FreeDosEntry((dlist))
#define IsFileSystem(name) IDOS->IsFileSystem((name))
#define Format(filesystem, volumename, dostype, flags) IDOS->Format((filesystem), (volumename), (dostype), (flags))
#define Relabel(drive, newname) IDOS->Relabel((drive), (newname))
#define Inhibit(name, onoff) IDOS->Inhibit((name), (onoff))
#define AddBuffers(name, number) IDOS->AddBuffers((name), (number))
#define CompareDates(date1, date2) IDOS->CompareDates((date1), (date2))
#define DateToStr(datetime) IDOS->DateToStr((datetime))
#define StrToDate(datetime) IDOS->StrToDate((datetime))
#define OBSOLETEInternalLoadSeg(fh, table, funcarray) IDOS->OBSOLETEInternalLoadSeg((fh), (table), (funcarray))
#define OBSOLETEInternalUnLoadSeg(seglist, freefunc ) IDOS->OBSOLETEInternalUnLoadSeg((seglist), (freefunc ))
#define OBSOLETENewLoadSeg(file, tags) IDOS->OBSOLETENewLoadSeg((file), (tags))
#define OBSOLETENewLoadSegTagList(file, tags) IDOS->OBSOLETENewLoadSegTagList((file), (tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define OBSOLETENewLoadSegTags(...) IDOS->OBSOLETENewLoadSegTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define OBSOLETENewLoadSegTags(vargs...) IDOS->OBSOLETENewLoadSegTags(## vargs)
#endif
#define AddSegment(name, seg, type) IDOS->AddSegment((name), (seg), (type))
#define FindSegment(name, seg, sys) IDOS->FindSegment((name), (seg), (sys))
#define RemSegment(seg) IDOS->RemSegment((seg))
#define CheckSignal(mask) IDOS->CheckSignal((mask))
#define ReadArgs(arg_template, array, args) IDOS->ReadArgs((arg_template), (array), (args))
#define FindArg(arg_template, keyword) IDOS->FindArg((arg_template), (keyword))
#define ReadItem(buffer, maxchars, cSource) IDOS->ReadItem((buffer), (maxchars), (cSource))
#define StrToLong(string, value) IDOS->StrToLong((string), (value))
#define MatchFirst(pat, anchor) IDOS->MatchFirst((pat), (anchor))
#define MatchNext(anchor) IDOS->MatchNext((anchor))
#define MatchEnd(anchor) IDOS->MatchEnd((anchor))
#define ParsePattern(pat, buf, buflen) IDOS->ParsePattern((pat), (buf), (buflen))
#define MatchPattern(pat, str) IDOS->MatchPattern((pat), (str))
#define FreeArgs(args) IDOS->FreeArgs((args))
#define StartPart(path) IDOS->StartPart((path))
#define FilePart(path) IDOS->FilePart((path))
#define PathPart(path) IDOS->PathPart((path))
#define AddPart(destdirname, filename, size) IDOS->AddPart((destdirname), (filename), (size))
#define StartNotify(notify) IDOS->StartNotify((notify))
#define EndNotify(notify) IDOS->EndNotify((notify))
#define SetVar(name, buffer, size, flags) IDOS->SetVar((name), (buffer), (size), (flags))
#define GetVar(name, buffer, size, flags) IDOS->GetVar((name), (buffer), (size), (flags))
#define DeleteVar(name, flags) IDOS->DeleteVar((name), (flags))
#define FindVar(name, type) IDOS->FindVar((name), (type))
#define PRIVATECliInit(dp) IDOS->PRIVATECliInit((dp))
#define CliInitNewcli(dp) IDOS->CliInitNewcli((dp))
#define CliInitRun(dp) IDOS->CliInitRun((dp))
#define WriteChars(buf, buflen) IDOS->WriteChars((buf), (buflen))
#define PutStr(str) IDOS->PutStr((str))
#define VPrintf(format, argarray) IDOS->VPrintf((format), (argarray))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define Printf(...) IDOS->Printf(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define Printf(vargs...) IDOS->Printf(## vargs)
#endif
#define ParsePatternNoCase(pat, buf, buflen) IDOS->ParsePatternNoCase((pat), (buf), (buflen))
#define MatchPatternNoCase(pat, str) IDOS->MatchPatternNoCase((pat), (str))
#define PRIVATEDosGetString(num) IDOS->PRIVATEDosGetString((num))
#define SameDevice(lock1, lock2) IDOS->SameDevice((lock1), (lock2))
#define OBSOLETEExAllEnd(lock, buffer, size, data, control) IDOS->OBSOLETEExAllEnd((lock), (buffer), (size), (data), (control))
#define OBSOLETESetOwner(name, owner_info) IDOS->OBSOLETESetOwner((name), (owner_info))
#define GetEntryData() IDOS->GetEntryData()
#define ReadLineItem(buffer, maxchars, taglist) IDOS->ReadLineItem((buffer), (maxchars), (taglist))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ReadLineItemTags(buffer, ...) IDOS->ReadLineItemTags((buffer), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ReadLineItemTags(buffer, vargs...) IDOS->ReadLineItemTags(buffer, ## vargs)
#endif
#define PRIVATEInternalRunCommand(seg, stksize, args, arglen) IDOS->PRIVATEInternalRunCommand((seg), (stksize), (args), (arglen))
#define GetCurrentDir() IDOS->GetCurrentDir()
#define NonBlockingModifyDosEntry(dl, mode, arg1, arg2) IDOS->NonBlockingModifyDosEntry((dl), (mode), (arg1), (arg2))
#define SecondsToDateStamp(seconds, ds) IDOS->SecondsToDateStamp((seconds), (ds))
#define DateStampToSeconds(ds) IDOS->DateStampToSeconds((ds))
#define FixDateStamp(ds) IDOS->FixDateStamp((ds))
#define AddDates(to, from) IDOS->AddDates((to), (from))
#define SubtractDates(to, from) IDOS->SubtractDates((to), (from))
#define AddSegmentTagList(name, type, tags) IDOS->AddSegmentTagList((name), (type), (tags))
#define ParseCapturePattern(pat, dst, length, casesen) IDOS->ParseCapturePattern((pat), (dst), (length), (casesen))
#define CapturePattern(pat, str, casesen, cap) IDOS->CapturePattern((pat), (str), (casesen), (cap))
#define ReleaseCapturedExpressions(first) IDOS->ReleaseCapturedExpressions((first))
#define FindTrackedAddress(address, hook) IDOS->FindTrackedAddress((address), (hook))
#define TrackAddressList(name, segment, extra_info, extra_info_size, aas, num_pairs) IDOS->TrackAddressList((name), (segment), (extra_info), (extra_info_size), (aas), (num_pairs))
#define TrackSegmentList(name, segment, extra_info, extra_info_size) IDOS->TrackSegmentList((name), (segment), (extra_info), (extra_info_size))
#define UnTrackAddress(address) IDOS->UnTrackAddress((address))
#define UnTrackSegmentList(segment) IDOS->UnTrackSegmentList((segment))
#define GetExitData() IDOS->GetExitData()
#define PutErrStr(str) IDOS->PutErrStr((str))
#define ErrorOutput() IDOS->ErrorOutput()
#define SelectErrorOutput(fh) IDOS->SelectErrorOutput((fh))
#define MountDevice(name, type, tags) IDOS->MountDevice((name), (type), (tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define MountDeviceTags(name, ...) IDOS->MountDeviceTags((name), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define MountDeviceTags(name, vargs...) IDOS->MountDeviceTags(name, ## vargs)
#endif
#define SetProcWindow(win) IDOS->SetProcWindow((win))
#define FindSegmentStackSize(segment) IDOS->FindSegmentStackSize((segment))
#define CalculateSegmentChecksum(segment) IDOS->CalculateSegmentChecksum((segment))
#define AllocSegList(entry, data, datalen, identkey) IDOS->AllocSegList((entry), (data), (datalen), (identkey))
#define GetSegListInfo(seglist, tags) IDOS->GetSegListInfo((seglist), (tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define GetSegListInfoTags(...) IDOS->GetSegListInfoTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define GetSegListInfoTags(vargs...) IDOS->GetSegListInfoTags(## vargs)
#endif
#define AddSegListTail(bseglist_head, bseg_new) IDOS->AddSegListTail((bseglist_head), (bseg_new))
#define DevNameFromLock(lock, buffer, buflen, mode) IDOS->DevNameFromLock((lock), (buffer), (buflen), (mode))
#define GetProcMsgPort(proc) IDOS->GetProcMsgPort((proc))
#define WaitForData(stream, data_direction, timeout) IDOS->WaitForData((stream), (data_direction), (timeout))
#define SetBlockingMode(stream, new_blocking_mode) IDOS->SetBlockingMode((stream), (new_blocking_mode))
#define SetCurrentCmdPathList(pn) IDOS->SetCurrentCmdPathList((pn))
#define AllocateCmdPathList(first_lock) IDOS->AllocateCmdPathList((first_lock))
#define FreeCmdPathList(pn) IDOS->FreeCmdPathList((pn))
#define RemoveCmdPathNode(pn, lock) IDOS->RemoveCmdPathNode((pn), (lock))
#define AddCmdPathNode(pn, lock, where) IDOS->AddCmdPathNode((pn), (lock), (where))
#define SearchCmdPathList(pn, h, name, tags) IDOS->SearchCmdPathList((pn), (h), (name), (tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define SearchCmdPathListTags(pn, h, ...) IDOS->SearchCmdPathListTags((pn), (h), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define SearchCmdPathListTags(pn, h, vargs...) IDOS->SearchCmdPathListTags(pn, h, ## vargs)
#endif
#define ScanVars(hook, flags, userdata) IDOS->ScanVars((hook), (flags), (userdata))
#define GetProcSegList(proc, flags) IDOS->GetProcSegList((proc), (flags))
#define HexToLong(string, value_ptr) IDOS->HexToLong((string), (value_ptr))
#define GetDeviceProcFlags(name, odp, flags) IDOS->GetDeviceProcFlags((name), (odp), (flags))
#define DosControl(tags) IDOS->DosControl((tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define DosControlTags(...) IDOS->DosControlTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define DosControlTags(...) IDOS->DosControlTags(## vargs)
#endif
#define CreateDirTree(name) IDOS->CreateDirTree((name))
#define NotifyVar(name, hook, flags, userdata) IDOS->NotifyVar((name), (hook), (flags), (userdata))
#define GetDiskFileSystemData(name) IDOS->GetDiskFileSystemData((name))
#define FreeDiskFileSystemData(fsd) IDOS->FreeDiskFileSystemData((fsd))
#define FOpen(name, mode, bufsize) IDOS->FOpen((name), (mode), (bufsize))
#define FClose(scb) IDOS->FClose((scb))
#define FOpenFromLock(lock, bufsize) IDOS->FOpenFromLock((lock), (bufsize))
#define DupCmdPathList(source) IDOS->DupCmdPathList((source))
#define TimedDosRequester(tags) IDOS->TimedDosRequester((tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define TimedDosRequesterTags(...) IDOS->TimedDosRequesterTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define TimedDosRequesterTags(...) IDOS->TimedDosRequesterTags(## vargs)
#endif
#define RenameDosEntry(dlist, newname) IDOS->RenameDosEntry((dlist), (newname))
#define DismountDevice(name, flags, reserved) IDOS->DismountDevice((name), (flags), (reserved))
#define DupFileHandle(scb) IDOS->DupFileHandle((scb))
#define DevNameFromFH(scb, buffer, buflen, mode) IDOS->DevNameFromFH((scb), (buffer), (buflen), (mode))
#define AssignAddToList(name, lock, endpos) IDOS->AssignAddToList((name), (lock), (endpos))
#define SetFileHandleAttr(fh, tags) IDOS->SetFileHandleAttr((fh), (tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define SetFileHandleAttrTags(...) IDOS->SetFileHandleAttrTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define SetFileHandleAttrTags(vargs...) IDOS->SetFileHandleAttrTags(## vargs)
#endif
#define FileSystemAttr(tags) IDOS->FileSystemAttr((tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define FileSystemAttrTags(...) IDOS->FileSystemAttrTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define FileSystemAttrTags(...) IDOS->FileSystemAttrTags(## vargs)
#endif
#define FReadLine(fh, frld) IDOS->FReadLine((fh), (frld))
#define CopyStringBSTRToC(bsrc, dst, siz) IDOS->CopyStringBSTRToC((bsrc), (dst), (siz))
#define CopyStringCToBSTR(src, bdest, siz) IDOS->CopyStringCToBSTR((src), (bdest), (siz))
#define GetFilePosition(fh) IDOS->GetFilePosition((fh))
#define ChangeFilePosition(file, position, offset) IDOS->ChangeFilePosition((file), (position), (offset))
#define ChangeFileSize(fh, pos, mode) IDOS->ChangeFileSize((fh), (pos), (mode))
#define GetFileSize(fh) IDOS->GetFileSize((fh))
#define DoPkt64(sendport, type, arg1, arg2, arg3, arg4, arg5) IDOS->DoPkt64((sendport), (type), (arg1), (arg2), (arg3), (arg4), (arg5))
#define PRIVATEDoPkt64(sendport, type, arg1, arg2, arg3, arg4, arg5) IDOS->PRIVATEDoPkt64((sendport), (type), (arg1), (arg2), (arg3), (arg4), (arg5))
#define ProcessScan(hook, userdata, reserved) IDOS->ProcessScan((hook), (userdata), (reserved))
#define NotifyDosListChange(process, signalnum, reserved) IDOS->NotifyDosListChange((process), (signalnum), (reserved))
#define NotifyProcListChange(process, signalnum, reserved) IDOS->NotifyProcListChange((process), (signalnum), (reserved))
#define GetDiskInfo(tags) IDOS->GetDiskInfo((tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define GetDiskInfoTags(...) IDOS->GetDiskInfoTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define GetDiskInfoTags(...) IDOS->GetDiskInfoTags(## vargs)
#endif
#define WriteProtectVolume(name, on_off, passkey, reserved) IDOS->WriteProtectVolume((name), (on_off), (passkey), (reserved))
#define ExamineObject(ctags) IDOS->ExamineObject((ctags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ExamineObjectTags(...) IDOS->ExamineObjectTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ExamineObjectTags(...) IDOS->ExamineObjectTags(## vargs)
#endif
#define ExamineDir(context) IDOS->ExamineDir((context))
#define ObtainDirContext(ctags) IDOS->ObtainDirContext((ctags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ObtainDirContextTags(...) IDOS->ObtainDirContextTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ObtainDirContextTags(...) IDOS->ObtainDirContextTags(## vargs)
#endif
#define ReleaseDirContext(contx) IDOS->ReleaseDirContext((contx))
#define GetOwnerInfo(tags) IDOS->GetOwnerInfo((tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define GetOwnerInfoTags(...) IDOS->GetOwnerInfoTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define GetOwnerInfoTags(...) IDOS->GetOwnerInfoTags(## vargs)
#endif
#define SetOwnerInfo(tags) IDOS->SetOwnerInfo((tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define SetOwnerInfoTags(...) IDOS->SetOwnerInfoTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define SetOwnerInfoTags(...) IDOS->SetOwnerInfoTags(## vargs)
#endif
#define LockTagList(tags) IDOS->LockTagList((tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define LockTags(...) IDOS->LockTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define LockTags(...) IDOS->LockTags(## vargs)
#endif
#define GetPID(process, which) IDOS->GetPID((process), (which))
#define FlushVolume(name) IDOS->FlushVolume((name))
#define ObtainConsoleData(ctags) IDOS->ObtainConsoleData((ctags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ObtainConsoleDataTags(...) IDOS->ObtainConsoleDataTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ObtainConsoleDataTags(...) IDOS->ObtainConsoleDataTags(## vargs)
#endif
#define ReleaseConsoleData(data) IDOS->ReleaseConsoleData((data))
#define Serialize(name) IDOS->Serialize((name))
#define NameFromPort(port, buffer, buflen, add_colon) IDOS->NameFromPort((port), (buffer), (buflen), (add_colon))
#define DevNameFromPort(port, buffer, buflen, add_colon) IDOS->DevNameFromPort((port), (buffer), (buflen), (add_colon))
#define SameFH(scb1, scb2) IDOS->SameFH((scb1), (scb2))
#define LockRecord(fh, offset, length, mode, timeout) IDOS->LockRecord((fh), (offset), (length), (mode), (timeout))
#define UnLockRecord(fh, offset, length) IDOS->UnLockRecord((fh), (offset), (length))
#define IsFileSystemPort(port) IDOS->IsFileSystemPort((port))
#define InhibitPort(port, state) IDOS->InhibitPort((port), (state))
#define FormatPort(port, volumename, dostype, flags) IDOS->FormatPort((port), (volumename), (dostype), (flags))
#define SerializePort(port) IDOS->SerializePort((port))
#define FlushVolumePort(port) IDOS->FlushVolumePort((port))
#define FileHandleScan(hook, userdata, reserved) IDOS->FileHandleScan((hook), (userdata), (reserved))
#define GetFileSystemVectorPort(port, min_version) IDOS->GetFileSystemVectorPort((port), (min_version))
#define ResolvePath(port, path, inlock, out, outlen, outdir, slcount) IDOS->ResolvePath((port), (path), (inlock), (out), (outlen), (outdir), (slcount))
#define WriteProtectVolumePort(port, on_off, passkey, reserved) IDOS->WriteProtectVolumePort((port), (on_off), (passkey), (reserved))
#define AsyncIO(tags) IDOS->AsyncIO((tags))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define AsyncIOTags(...) IDOS->AsyncIOTags(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define AsyncIOTags(...) IDOS->AsyncIOTags(## vargs)
#endif
#define WaitForChildExit(pid) IDOS->WaitForChildExit((pid))
#define CheckForChildExit(pid) IDOS->CheckForChildExit((pid))

#endif /* INLINE4_DOS_H */
