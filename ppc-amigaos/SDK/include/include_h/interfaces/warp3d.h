#ifndef WARP3D_INTERFACE_DEF_H
#define WARP3D_INTERFACE_DEF_H

/*
** This file was machine generated by idltool 53.1.
** Do not edit
*/

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef WARP3D_WARP3D_H
#include <warp3d/warp3d.h>
#endif
#ifndef GRAPHICS_GFX_H
#include <graphics/gfx.h>
#endif

#ifdef __cplusplus
#ifdef __USE_AMIGAOS_NAMESPACE__
namespace AmigaOS {
#endif
extern "C" {
#endif

struct Warp3DIFace
{
	struct InterfaceData Data;

	uint32 APICALL (*Obtain)(struct Warp3DIFace *Self);
	uint32 APICALL (*Release)(struct Warp3DIFace *Self);
	void APICALL (*Expunge)(struct Warp3DIFace *Self);
	struct Interface * APICALL (*Clone)(struct Warp3DIFace *Self);
	W3D_Context * APICALL (*W3D_CreateContext)(struct Warp3DIFace *Self, uint32 * error, struct TagItem * CCTags);
	W3D_Context * APICALL (*W3D_CreateContextTags)(struct Warp3DIFace *Self, uint32 * error, ...);
	void APICALL (*W3D_DestroyContext)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_GetState)(struct Warp3DIFace *Self, W3D_Context * context, uint32 state);
	uint32 APICALL (*W3D_SetState)(struct Warp3DIFace *Self, W3D_Context * context, uint32 state, uint32 action);
	uint32 APICALL (*W3D_CheckDriver)(struct Warp3DIFace *Self);
	uint32 APICALL (*W3D_LockHardware)(struct Warp3DIFace *Self, W3D_Context * context);
	void APICALL (*W3D_UnLockHardware)(struct Warp3DIFace *Self, W3D_Context * context);
	void APICALL (*W3D_WaitIdle)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_CheckIdle)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_Query)(struct Warp3DIFace *Self, W3D_Context * context, uint32 query, uint32 destfmt);
	uint32 APICALL (*W3D_GetTexFmtInfo)(struct Warp3DIFace *Self, W3D_Context * context, uint32 format, uint32 destfmt);
	W3D_Texture * APICALL (*W3D_AllocTexObj)(struct Warp3DIFace *Self, W3D_Context * context, uint32 * error, struct TagItem * ATOTags);
	W3D_Texture * APICALL (*W3D_AllocTexObjTags)(struct Warp3DIFace *Self, W3D_Context * context, uint32 * error, ...);
	void APICALL (*W3D_FreeTexObj)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture);
	void APICALL (*W3D_ReleaseTexture)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture);
	void APICALL (*W3D_FlushTextures)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_SetFilter)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture, uint32 min, uint32 mag);
	uint32 APICALL (*W3D_SetTexEnv)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture, uint32 envparam, W3D_Color * envcolor);
	uint32 APICALL (*W3D_SetWrapMode)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture, uint32 mode_s, uint32 mode_t, W3D_Color * bordercolor);
	uint32 APICALL (*W3D_UpdateTexImage)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture, void * teximage, int level, uint32 * palette);
	uint32 APICALL (*W3D_UploadTexture)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture);
	uint32 APICALL (*W3D_DrawLine)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Line * line);
	uint32 APICALL (*W3D_DrawPoint)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Point * point);
	uint32 APICALL (*W3D_DrawTriangle)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Triangle * triangle);
	uint32 APICALL (*W3D_DrawTriFan)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Triangles * triangles);
	uint32 APICALL (*W3D_DrawTriStrip)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Triangles * triangles);
	uint32 APICALL (*W3D_SetAlphaMode)(struct Warp3DIFace *Self, W3D_Context * context, uint32 mode, W3D_Float * refval);
	uint32 APICALL (*W3D_SetBlendMode)(struct Warp3DIFace *Self, W3D_Context * context, uint32 srcfunc, uint32 dstfunc);
	uint32 APICALL (*W3D_SetDrawRegion)(struct Warp3DIFace *Self, W3D_Context * context, struct BitMap * bm, int yoffset, W3D_Scissor * scissor);
	uint32 APICALL (*W3D_SetFogParams)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Fog * fogparams, uint32 fogmode);
	uint32 APICALL (*W3D_SetColorMask)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Bool red, W3D_Bool green, W3D_Bool blue, W3D_Bool alpha);
	uint32 APICALL (*W3D_SetStencilFunc)(struct Warp3DIFace *Self, W3D_Context * context, uint32 func, uint32 refvalue, uint32 mask);
	uint32 APICALL (*W3D_AllocZBuffer)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_FreeZBuffer)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_ClearZBuffer)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Double * clearvalue);
	uint32 APICALL (*W3D_ReadZPixel)(struct Warp3DIFace *Self, W3D_Context * context, uint32 x, uint32 y, W3D_Double * z);
	uint32 APICALL (*W3D_ReadZSpan)(struct Warp3DIFace *Self, W3D_Context * context, uint32 x, uint32 y, uint32 n, W3D_Double * z);
	uint32 APICALL (*W3D_SetZCompareMode)(struct Warp3DIFace *Self, W3D_Context * context, uint32 mode);
	uint32 APICALL (*W3D_AllocStencilBuffer)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_ClearStencilBuffer)(struct Warp3DIFace *Self, W3D_Context * context, uint32 * clearval);
	uint32 APICALL (*W3D_FillStencilBuffer)(struct Warp3DIFace *Self, W3D_Context * context, uint32 x, uint32 y, uint32 width, uint32 height, uint32 depth, void * data);
	uint32 APICALL (*W3D_FreeStencilBuffer)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_ReadStencilPixel)(struct Warp3DIFace *Self, W3D_Context * context, uint32 x, uint32 y, uint32 * st);
	uint32 APICALL (*W3D_ReadStencilSpan)(struct Warp3DIFace *Self, W3D_Context * context, uint32 x, uint32 y, uint32 n, uint32 * st);
	uint32 APICALL (*W3D_SetLogicOp)(struct Warp3DIFace *Self, W3D_Context * context, uint32 operation);
	uint32 APICALL (*W3D_Hint)(struct Warp3DIFace *Self, W3D_Context * context, uint32 mode, uint32 quality);
	uint32 APICALL (*W3D_SetDrawRegionWBM)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Bitmap * bitmap, W3D_Scissor * scissor);
	uint32 APICALL (*W3D_GetDriverState)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_Flush)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_SetPenMask)(struct Warp3DIFace *Self, W3D_Context * context, uint32 pen);
	uint32 APICALL (*W3D_SetStencilOp)(struct Warp3DIFace *Self, W3D_Context * context, uint32 sfail, uint32 dpfail, uint32 dppass);
	uint32 APICALL (*W3D_SetWriteMask)(struct Warp3DIFace *Self, W3D_Context * context, uint32 mask);
	uint32 APICALL (*W3D_WriteStencilPixel)(struct Warp3DIFace *Self, W3D_Context * context, uint32 x, uint32 y, uint32 st);
	uint32 APICALL (*W3D_WriteStencilSpan)(struct Warp3DIFace *Self, W3D_Context * context, uint32 x, uint32 y, uint32 n, uint32 * st, uint8 * mask);
	uint32 APICALL (*W3D_WriteZPixel)(struct Warp3DIFace *Self, W3D_Context * context, uint32 x, uint32 y, W3D_Double * z);
	uint32 APICALL (*W3D_WriteZSpan)(struct Warp3DIFace *Self, W3D_Context * context, uint32 x, uint32 y, uint32 n, W3D_Double * z, uint8 * maks);
	uint32 APICALL (*W3D_SetCurrentColor)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Color * color);
	uint32 APICALL (*W3D_SetCurrentPen)(struct Warp3DIFace *Self, W3D_Context * context, uint32 pen);
	uint32 APICALL (*W3D_UpdateTexSubImage)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture, void * teximage, uint32 lev, uint32 * palette, W3D_Scissor * scissor, uint32 srcbpr);
	uint32 APICALL (*W3D_FreeAllTexObj)(struct Warp3DIFace *Self, W3D_Context * context);
	uint32 APICALL (*W3D_GetDestFmt)(struct Warp3DIFace *Self);
	uint32 APICALL (*W3D_DrawLineStrip)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Lines * lines);
	uint32 APICALL (*W3D_DrawLineLoop)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Lines * lines);
	W3D_Driver ** APICALL (*W3D_GetDrivers)(struct Warp3DIFace *Self);
	uint32 APICALL (*W3D_QueryDriver)(struct Warp3DIFace *Self, W3D_Driver * driver, uint32 query, uint32 destfmt);
	uint32 APICALL (*W3D_GetDriverTexFmtInfo)(struct Warp3DIFace *Self, W3D_Driver * driver, uint32 format, uint32 destfmt);
	uint32 APICALL (*W3D_RequestMode)(struct Warp3DIFace *Self, struct TagItem * taglist);
	uint32 APICALL (*W3D_RequestModeTags)(struct Warp3DIFace *Self, ...);
	uint32 APICALL (*W3D_SetScissor)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Scissor * scissor);
	void APICALL (*W3D_FlushFrame)(struct Warp3DIFace *Self, W3D_Context * context);
	W3D_Driver * APICALL (*W3D_TestMode)(struct Warp3DIFace *Self, uint32 ModeID);
	uint32 APICALL (*W3D_SetChromaTestBounds)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture, uint32 rgba_lower, uint32 rgba_upper, uint32 mode);
	uint32 APICALL (*W3D_ClearDrawRegion)(struct Warp3DIFace *Self, W3D_Context * context, uint32 color);
	uint32 APICALL (*W3D_DrawTriangleV)(struct Warp3DIFace *Self, W3D_Context * context, W3D_TriangleV * triangle);
	uint32 APICALL (*W3D_DrawTriFanV)(struct Warp3DIFace *Self, W3D_Context * context, W3D_TrianglesV * triangles);
	uint32 APICALL (*W3D_DrawTriStripV)(struct Warp3DIFace *Self, W3D_Context * context, W3D_TrianglesV * triangles);
	W3D_ScreenMode * APICALL (*W3D_GetScreenmodeList)(struct Warp3DIFace *Self);
	void APICALL (*W3D_FreeScreenmodeList)(struct Warp3DIFace *Self, W3D_ScreenMode * list);
	uint32 APICALL (*W3D_BestModeID)(struct Warp3DIFace *Self, struct TagItem * tags);
	uint32 APICALL (*W3D_BestModeIDTags)(struct Warp3DIFace *Self, ...);
	uint32 APICALL (*W3D_VertexPointer)(struct Warp3DIFace *Self, W3D_Context * context, void * pointer, int stride, uint32 mode, uint32 flags);
	uint32 APICALL (*W3D_TexCoordPointer)(struct Warp3DIFace *Self, W3D_Context * context, void * pointer, int stride, int unit, int off_v, int off_w, uint32 flags);
	uint32 APICALL (*W3D_ColorPointer)(struct Warp3DIFace *Self, W3D_Context * context, void * pointer, int stride, uint32 format, uint32 mode, uint32 flags);
	uint32 APICALL (*W3D_BindTexture)(struct Warp3DIFace *Self, W3D_Context * context, uint32 tmu, W3D_Texture * texture);
	uint32 APICALL (*W3D_DrawArray)(struct Warp3DIFace *Self, W3D_Context * context, uint32 primitive, uint32 base, uint32 count);
	uint32 APICALL (*W3D_DrawElements)(struct Warp3DIFace *Self, W3D_Context * context, uint32 primitive, uint32 type, uint32 count, void * indices);
	void APICALL (*W3D_SetFrontFace)(struct Warp3DIFace *Self, W3D_Context * context, uint32 direction);
	uint32 APICALL (*W3D_SetTextureBlend)(struct Warp3DIFace *Self, W3D_Context * context, struct TagItem * tagList);
	uint32 APICALL (*W3D_SetTextureBlendTags)(struct Warp3DIFace *Self, W3D_Context * context, ...);
	uint32 APICALL (*W3D_SecondaryColorPointer)(struct Warp3DIFace *Self, W3D_Context * context, void * pointer, int stride, uint32 format, uint32 mode, uint32 flags);
	uint32 APICALL (*W3D_FogCoordPointer)(struct Warp3DIFace *Self, W3D_Context * context, void * pointer, int stride, uint32 mode, uint32 flags);
	uint32 APICALL (*W3D_InterleavedArray)(struct Warp3DIFace *Self, W3D_Context * context, void * pointer, int stride, uint32 format, uint32 flags);
	uint32 APICALL (*W3D_ClearBuffers)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Color * color, W3D_Double * depth, uint32 * stencil);
	uint32 APICALL (*W3D_SetParameter)(struct Warp3DIFace *Self, W3D_Context * context, uint32 target, void * pattern);
	uint32 APICALL (*W3D_SetMaxAnisotropy)(struct Warp3DIFace *Self, W3D_Context * context, W3D_Texture * texture, uint32 level);
};

#ifdef __cplusplus
}
#ifdef __USE_AMIGAOS_NAMESPACE__
}
#endif
#endif

#endif /* WARP3D_INTERFACE_DEF_H */
