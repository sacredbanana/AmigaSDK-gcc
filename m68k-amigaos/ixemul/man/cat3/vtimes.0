
VTIMES(3)                  UNIX Programmer's Manual                  VTIMES(3)

NNAAMMEE
     vvttiimmeess - get information about resource utilization

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//vvttiimmeess..hh>>

     vvttiimmeess(_s_t_r_u_c_t _v_t_i_m_e_s _*_p_a_r___v_m, _s_t_r_u_c_t _v_t_i_m_e_s _*_c_h___v_m)

DDEESSCCRRIIPPTTIIOONN
     TThhiiss iinntteerrffaaccee iiss oobbssoolleetteedd bbyy getrusage((22))..  IItt iiss aavvaaiillaabbllee ffrroomm tthhee
     ccoommppaattiibbiilliittyy lliibbrraarryy,, lliibbccoommppaatt..

     The vvttiimmeess() function returns accounting information for the current pro-
     cess and for the terminated child processes of the current process.  Ei-
     ther _p_a_r___v_m or _c_h___v_m or both may be 0, in which case only the information
     for the pointers which are non-zero is returned.

     After the call, each buffer contains information as defined by the con-
     tents of the include file _/_u_s_r_/_i_n_c_l_u_d_e_/_s_y_s_/_v_t_i_m_e_s_._h:

           struct vtimes {
                   int     vm_utime;       /* user time (*HZ) */
                   int     vm_stime;       /* system time (*HZ) */
                   /* divide next two by utime+stime to get averages */
                   unsigned vm_idsrss;     /* integral of d+s rss */
                   unsigned vm_ixrss;      /* integral of text rss */
                   int     vm_maxrss;      /* maximum rss */
                   int     vm_majflt;      /* major page faults */
                   int     vm_minflt;      /* minor page faults */
                   int     vm_nswap;       /* number of swaps */
                   int     vm_inblk;       /* block reads */
                   int     vm_oublk;       /* block writes */
           };

     The _v_m___u_t_i_m_e and _v_m___s_t_i_m_e fields give the user and system time respec-
     tively in 60ths of a second (or 50ths if that is the frequency of wall
     current in your locality.) The _v_m___i_d_r_s_s and _v_m___i_x_r_s_s measure memory us-
     age.  They are computed by integrating the number of memory pages in use
     each over CPU time.  They are reported as though computed discretely,
     adding the current memory usage (in 512 byte pages) each time the clock
     ticks.  If a process used 5 core pages over 1 cpu-second for its data and
     stack, then _v_m___i_d_s_r_s_s would have the value 5*60, where _v_m___u_t_i_m_e_+_v_m___s_t_i_m_e
     would be the 60.  The _V_m___i_d_s_r_s_s argument integrates data and stack seg-
     ment usage, while _v_m___i_x_r_s_s integrates text segment usage.  The _V_m___m_a_x_r_s_s
     function reports the maximum instantaneous sum of the text+data+stack
     core-resident page count.

     The _v_m___m_a_j_f_l_t field gives the number of page faults which resulted in
     disk activity; the _v_m___m_i_n_f_l_t field gives the number of page faults in-
     curred in simulation of reference bits; _v_m___n_s_w_a_p is the number of swaps
     which occurred.  The number of file system input/output events are re-
     ported in _v_m___i_n_b_l_k and _v_m___o_u_b_l_k These numbers account only for real I/O;
     data supplied by the caching mechanism is charged only to the first pro-
     cess to read or write the data.

SSEEEE AALLSSOO
     time(2),  wait3(2),  getrusage(2)

HHIISSTTOORRYY
     The vvlliimmiitt() function appeared in 4.2BSD.

4th Berkeley Distribution        June 4, 1993                                1
