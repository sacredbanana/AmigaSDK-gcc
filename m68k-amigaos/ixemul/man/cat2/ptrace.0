
PTRACE(2)                  UNIX Programmer's Manual                  PTRACE(2)

NNAAMMEE
     ppttrraaccee - process tracing and debugging

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<ssyyss//ppttrraaccee..hh>>

     _i_n_t
     ppttrraaccee(_i_n_t _r_e_q_u_e_s_t, _p_i_d___t _p_i_d, _c_a_d_d_r___t _a_d_d_r, _i_n_t _d_a_t_a)

DDEESSCCRRIIPPTTIIOONN
     ppttrraaccee() provides tracing and debugging facilities.  It allows one pro-
     cess (the _t_r_a_c_i_n_g process) to control another (the _t_r_a_c_e_d process).  Most
     of the time, the traced process runs normally, but when it receives a
     signal (see sigaction(2)), it stops.  The tracing process is expected to
     notice this via wait(2) or the delivery of a SIGCHLD signal, examine the
     state of the stopped process, and cause it to terminate or continue as
     appropriate.  ppttrraaccee() is the mechanism by which all this happens.

     The _r_e_q_u_e_s_t argument specifies what operation is being performed; the
     meaning of the rest of the arguments depends on the operation, but except
     for one special case noted below, all ppttrraaccee() calls are made by the
     tracing process, and the _p_i_d argument specifies the process ID of the
     traced process.  _r_e_q_u_e_s_t can be:

     PT_TRACE_ME   This request is the only one used by the traced process; it
                   declares that the process expects to be traced by its par-
                   ent.  All the other arguments are ignored.  (If the parent
                   process does not expect to trace the child, it will proba-
                   bly be rather confused by the results; once the traced pro-
                   cess stops, it cannot be made to continue except via
                   ppttrraaccee().)  When a process has used this request and calls
                   execve(2) or any of the routines built on it (such as
                   execv(3)), it will stop before executing the first instruc-
                   tion of the new image.  Also, any setuid or setgid bits on
                   the executable being executed will be ignored.

     PT_READ_I, PT_READ_D
                   These requests read a single int of data from the traced
                   process' address space.  Traditionally, ppttrraaccee() has al-
                   lowed for machines with distinct address spaces for in-
                   struction and data, which is why there are two requests:
                   conceptually, PT_READ_I reads from the instruction space
                   and PT_READ_D reads from the data space.  In the current
                   NetBSD implementation, these two requests are completely
                   identical.  The _a_d_d_r argument specifies the address (in the
                   traced process' virtual address space) at which the read is
                   to be done.  This address does not have to meet any align-
                   ment constraints.  The value read is returned as the return
                   value from ppttrraaccee().

     PT_WRITE_I, PT_WRITE_D
                   These requests parallel PT_READ_I and PT_READ_D, except
                   that they write rather than read.  The _d_a_t_a argument sup-
                   plies the value to be written.

     PT_READ_U     This request reads an int from the traced process' user
                   structure.  The _a_d_d_r argument specifies the location of the
                   int relative to the base of the user structure; it will
                   usually be an integer value cast to caddr_t either explic-
                   itly or via the presence of a prototype for ppttrraaccee().  Un-
                   like PT_READ_I and PT_READ_D, _a_d_d_r must be aligned on an
                   int boundary.  The value read is returned as the return
                   value from ppttrraaccee().

     PT_WRITE_U    This request writes an int into the traced process' user
                   structure.  _a_d_d_r specifies the offset, just as for
                   PT_READ_U, and _d_a_t_a specifies the value to be written, just
                   as for PT_WRITE_I and PT_WRITE_D.

     PT_CONTINUE   The traced process continues execution.  _a_d_d_r is an address
                   specifying the place where execution is to be resumed (a
                   new value for the program counter), or (caddr_t)1 to indi-
                   cate that execution is to pick up where it left off.  _d_a_t_a
                   provides a signal number to be delivered to the traced pro-
                   cess as it resumes execution, or 0 if no signal is to be
                   sent.

     PT_KILL       The traced process terminates, as if PT_CONTINUE had been
                   used with SIGKILL given as the signal to be delivered.

     PT_ATTACH     This request allows a process to gain control of an other-
                   wise unrelated process and begin tracing it.  It does not
                   need any cooperation from the to-be-traced process.  In
                   this case, _p_i_d specifies the process ID of the to-be-traced
                   process, and the other two arguments are ignored.  This re-
                   quest requires that the target process must have the same
                   real UID as the tracing process, and that it must not be
                   executing a setuid or setgid executable.  (If the tracing
                   process is running as root, these restrictions do not ap-
                   ply.)  The tracing process will see the newly-traced pro-
                   cess stop and may then control it as if it had been traced
                   all along.

     PT_DETACH     This request is like PT_CONTINUE, except that it does not
                   allow specifying an alternate place to continue execution,
                   and after it succeeds, the traced process is no longer
                   traced and continues execution normally.

     Additionally, machine-specific requests can exist.  On the SPARC, these
     are:

     PT_GETREGS    This request reads the traced process' machine registers
                   into the ``struct reg'' (defined in <_m_a_c_h_i_n_e_/_r_e_g_._h>) point-
                   ed to by _a_d_d_r.

     PT_SETREGS    This request is the converse of PT_GETREGS; it loads the
                   traced process' machine registers from the ``struct reg''
                   (defined in <_m_a_c_h_i_n_e_/_r_e_g_._h>) pointed to by _a_d_d_r.

     PT_GETFPREGS  This request reads the traced process' floating-point reg-
                   isters into the ``struct fpreg'' (defined in
                   <_m_a_c_h_i_n_e_/_r_e_g_._h>) pointed to by _a_d_d_r.

     PT_SETFPREGS  This request is the converse of PT_GETFPREGS; it loads the
                   traced process' floating-point registers from the ``struct
                   fpreg'' (defined in <_m_a_c_h_i_n_e_/_r_e_g_._h>) pointed to by _a_d_d_r.

     PT_SYSCALL    This request is like PT_CONTINUE except that the process
                   will stop next time it executes any system call.  Informa-
                   tion about the system call can be examined with PT_READ_U
                   and potentially modified with PT_WRITE_U through the
                   u_kproc.kp_proc.p_md element of the user structure (see be-
                   low).  If the process is continued with another PT_SYSCALL
                   request, it will stop again on exit from the syscall, at
                   which point the return values can be examined and poten-
                   tially changed.  The u_kproc.kp_proc.p_md element is of
                   type ``struct mdproc'', which should be declared by includ-
                   ing <_s_y_s_/_p_a_r_a_m_._h>, <_s_y_s_/_u_s_e_r_._h>, and <_m_a_c_h_i_n_e_/_p_r_o_c_._h>, and
                   contains the following fields (among others):
                         syscall_num
                         syscall_nargs
                         syscall_args[8]
                         syscall_err
                         syscall_rv[2]
                   When a process stops on entry to a syscall, syscall_num
                   holds the number of the syscall, syscall_nargs holds the
                   number of arguments it expects, and syscall_args holds the
                   arguments themselves.  (Only the first syscall_nargs ele-
                   ments of syscall_args are guaranteed to be useful.)  When a
                   process stops on exit from a syscall, syscall_num is -1,
                   syscall_err holds the error number (see errno(2)), or 0 if
                   no error occurred, and syscall_rv holds the return values.
                   (If the syscall returns only one value, only syscall_rv[0]
                   is useful.)  The tracing process can modify any of these
                   with PT_WRITE_U; only some modifications are useful.

                   On entry to a syscall, syscall_num can be changed, and the
                   syscall actually performed will correspond to the new num-
                   ber (it is the responsibility of the tracing process to
                   fill in syscall_args appropriately for the new call, but
                   there is no need to modify syscall_nargs).  If the new
                   syscall number is 0, no syscall is actually performed; in-
                   stead, syscall_err and syscall_rv are passed back to the
                   traced process directly (and therefore should be filled
                   in).  If the syscall number is otherwise out of range, a
                   dummy syscall which simply produces an ENOSYS error is ef-
                   fectively performed.

                   On exit from a syscall, only syscall_err and syscall_rv can
                   usefully be changed; they are set to the values returned by
                   the syscall and will be passed back to the traced process
                   by the normal syscall return mechanism.

EERRRROORRSS
     Some requests can cause ppttrraaccee() to return -1 as a non-error value; to
     disambiguate, _e_r_r_n_o can be set to 0 before the call and checked after-
     wards.  The possible errors are:

     [ESRCH]
           No process having the specified process ID exists.

     [EINVAL]
           ++oo   A process attempted to use PT_ATTACH on itself.
           ++oo   The _r_e_q_u_e_s_t was not one of the legal requests.
           ++oo   The _a_d_d_r to PT_READ_U or PT_WRITE_U was not int-aligned.
           ++oo   The signal number (in _d_a_t_a) to PT_CONTINUE or PT_SYSCALL was
               neither 0 nor a legal signal number.
           ++oo   PT_GETREGS, PT_SETREGS, PT_GETFPREGS, or PT_SETFPREGS was at-
               tempted on a process with no valid register set.  (This is nor-
               mally true only of system processes.)

     [EBUSY]
           ++oo   PT_ATTACH was attempted on a process that was already being
               traced.
           ++oo   A request attempted to manipulate a process that was being
               traced by some process other than the one making the request.
           ++oo   A request (other than PT_ATTACH) specified a process that
               wasn't stopped.

     [EPERM]
           ++oo   A request (other than PT_ATTACH) attempted to manipulate a pro-


               cess that wasn't being traced at all.
           ++oo   An attempt was made to use PT_ATTACH on a process in violation
               of the requirements listed under PT_ATTACH above.

BBUUGGSS
     On the SPARC, the PC is set to the provided PC value for PT_CONTINUE and
     similar calls, but the NPC is set willy-nilly to 4 greater than the PC
     value.  Using PT_GETREGS and PT_SETREGS to modify the PC, passing
     (caddr_t)1 to ppttrraaccee(), should be able to sidestep this.

     Single-stepping is not available.

     When using PT_SYSCALL, there is no easy way to tell whether the traced
     process stopped because it made a syscall or because a signal was sent at
     a moment that it just happened to have valid-looking garbage in its
     ``struct mdproc''.

 NetBSD                        November 7, 1994                              4
