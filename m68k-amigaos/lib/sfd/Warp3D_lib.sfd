* This SFD file was automatically generated by fd2sfd from
* /opt/amiga/m68k-amigaos/lib/fd/Warp3D_lib.fd and
* /opt/amiga/m68k-amigaos/include/clib/Warp3D_protos.h.
==base _Warp3DBase
==basetype struct Library *
==libname Warp3D.library
==include <exex/types.h>
==include <Warp3D/Warp3D.h>
==include <graphics/gfx.h>
==include <exec/types.h>
==include <utility/tagitem.h>
*
**
** Warp3D fd file for library generation
** $VER: Warp3D.fd 1.0 (27.07.98)
**
**
** This file is part of the Warp3D Project.
** Warp3D is copyrighted
** (C) 1998 Sam Jordan, Hans-Jörg Frieden, Thomas Frieden
** All rights reserved
**
** See the documentation for conditions.
**
*
*
*   Context functions (Context.c)
*
==bias 30
==public
W3D_Context    * W3D_CreateContext(ULONG * error, struct TagItem * CCTags) (a0,a1)
==varargs
W3D_Context    * W3D_CreateContextTags(ULONG * error, Tag CCTags, ...) (a0,a1)
void W3D_DestroyContext(W3D_Context * context) (a0)
ULONG W3D_GetState(W3D_Context * context, ULONG state) (a0,d1)
ULONG W3D_SetState(W3D_Context * context, ULONG state, ULONG action) (a0,d0,d1)
*
*   Driver functions (Driver.c)
*
ULONG W3D_CheckDriver() ()
ULONG W3D_LockHardware(W3D_Context * context) (a0)
void W3D_UnLockHardware(W3D_Context * context) (a0)
void W3D_WaitIdle(W3D_Context * context) (a0)
ULONG W3D_CheckIdle(W3D_Context * context) (a0)
ULONG W3D_Query(W3D_Context * context, ULONG query, ULONG destfmt) (a0,d0,d1)
ULONG W3D_GetTexFmtInfo(W3D_Context * context, ULONG format, ULONG destfmt) (a0,d0,d1)
*
*   Texture functions (Texture.c)
*
W3D_Texture    * W3D_AllocTexObj(W3D_Context * context, ULONG * error, struct TagItem * ATOTags) (a0,a1,a2)
==varargs
W3D_Texture    * W3D_AllocTexObjTags(W3D_Context * context, ULONG * error, Tag ATOTags, ...) (a0,a1,a2)
void W3D_FreeTexObj(W3D_Context * context, W3D_Texture * texture) (a0,a1)
void W3D_ReleaseTexture(W3D_Context * context, W3D_Texture * texture) (a0,a1)
void W3D_FlushTextures(W3D_Context * context) (a0)
ULONG W3D_SetFilter(W3D_Context * context, W3D_Texture * texture, ULONG min, ULONG mag) (a0,a1,d0,d1)
ULONG W3D_SetTexEnv(W3D_Context * context, W3D_Texture * texture, ULONG envparam, W3D_Color * envcolor) (a0,a1,d1,a2)
ULONG W3D_SetWrapMode(W3D_Context * context, W3D_Texture * texture, ULONG mode_s, ULONG mode_t, W3D_Color * bordercolor) (a0,a1,d0,d1,a2)
ULONG W3D_UpdateTexImage(W3D_Context * context, W3D_Texture * texture, void * teximage, int level, ULONG * palette) (a0,a1,a2,d1,a3)
ULONG W3D_UploadTexture(W3D_Context * context, W3D_Texture * texture) (a0,a1)
*
*   Drawing functions
*
ULONG W3D_DrawLine(W3D_Context * context, W3D_Line * line) (a0,a1)
ULONG W3D_DrawPoint(W3D_Context * context, W3D_Point * point) (a0,a1)
ULONG W3D_DrawTriangle(W3D_Context * context, W3D_Triangle * triangle) (a0,a1)
ULONG W3D_DrawTriFan(W3D_Context * context, W3D_Triangles * triangles) (a0,a1)
ULONG W3D_DrawTriStrip(W3D_Context * context, W3D_Triangles * triangles) (a0,a1)
*
*   Effect functions
*
ULONG W3D_SetAlphaMode(W3D_Context * context, ULONG mode, W3D_Float * refval) (a0,d1,a1)
ULONG W3D_SetBlendMode(W3D_Context * context, ULONG srcfunc, ULONG dstfunc) (a0,d0,d1)
ULONG W3D_SetDrawRegion(W3D_Context * context, struct BitMap * bm, int yoffset, W3D_Scissor * scissor) (a0,a1,d1,a2)
ULONG W3D_SetFogParams(W3D_Context * context, W3D_Fog * fogparams, ULONG fogmode) (a0,a1,d1)
ULONG W3D_SetColorMask(W3D_Context * context, W3D_Bool red, W3D_Bool green, W3D_Bool blue, W3D_Bool alpha) (a0,d0,d1,d2,d3)
ULONG W3D_SetStencilFunc(W3D_Context * context, ULONG func, ULONG refvalue, ULONG mask) (a0,d0,d1,d2)
*
*   ZBuffer functions
*
ULONG W3D_AllocZBuffer(W3D_Context * context) (a0)
ULONG W3D_FreeZBuffer(W3D_Context * context) (a0)
ULONG W3D_ClearZBuffer(W3D_Context * context, W3D_Double * clearvalue) (a0,a1)
ULONG W3D_ReadZPixel(W3D_Context * context, ULONG x, ULONG y, W3D_Double * z) (a0,d0,d1,a1)
ULONG W3D_ReadZSpan(W3D_Context * context, ULONG x, ULONG y, ULONG n, W3D_Double * z) (a0,d0,d1,d2,a1)
ULONG W3D_SetZCompareMode(W3D_Context * context, ULONG mode) (a0,d1)
*
*   Stencil buffer functions
*
ULONG W3D_AllocStencilBuffer(W3D_Context * context) (a0)
ULONG W3D_ClearStencilBuffer(W3D_Context * context, ULONG * clearval) (a0,a1)
ULONG W3D_FillStencilBuffer(W3D_Context * context, ULONG x, ULONG y, ULONG width, ULONG height, ULONG depth, void * data) (a0,d0,d1,d2,d3,d4,a1)
ULONG W3D_FreeStencilBuffer(W3D_Context * context) (a0)
ULONG W3D_ReadStencilPixel(W3D_Context * context, ULONG x, ULONG y, ULONG * st) (a0,d0,d1,a1)
ULONG W3D_ReadStencilSpan(W3D_Context * context, ULONG x, ULONG y, ULONG n, ULONG * st) (a0,d0,d1,d2,a1)
*
*   New functions
*
ULONG W3D_SetLogicOp(W3D_Context * context, ULONG operation) (a0,d1)
ULONG W3D_Hint(W3D_Context * context, ULONG mode, ULONG quality) (a0,d0,d1)
ULONG W3D_SetDrawRegionWBM(W3D_Context * context, W3D_Bitmap * bitmap, W3D_Scissor * scissor) (a0,a1,a2)
ULONG W3D_GetDriverState(W3D_Context * context) (a0)
ULONG W3D_Flush(W3D_Context * context) (a0)
ULONG W3D_SetPenMask(W3D_Context * context, ULONG pen) (a0,d1)
ULONG W3D_SetStencilOp(W3D_Context * context, ULONG sfail, ULONG dpfail, ULONG dppass) (a0,d0,d1,d2)
ULONG W3D_SetWriteMask(W3D_Context * context, ULONG mask) (a0,d1)
ULONG W3D_WriteStencilPixel(W3D_Context * context, ULONG x, ULONG y, ULONG st) (a0,d0,d1,d2)
ULONG W3D_WriteStencilSpan(W3D_Context * context, ULONG x, ULONG y, ULONG n, ULONG * st, UBYTE * mask) (a0,d0,d1,d2,a1,a2)
void W3D_WriteZPixel(W3D_Context * context, ULONG x, ULONG y, W3D_Double * z) (a0,d0,d1,a1)
void W3D_WriteZSpan(W3D_Context * context, ULONG x, ULONG y, ULONG n, W3D_Double * z, UBYTE * maks) (a0,d0,d1,d2,a1,a2)
ULONG W3D_SetCurrentColor(W3D_Context * context, W3D_Color * color) (a0,a1)
ULONG W3D_SetCurrentPen(W3D_Context * context, ULONG pen) (a0,d1)
ULONG W3D_UpdateTexSubImage(W3D_Context * context, W3D_Texture * texture, void * teximage, ULONG lev, ULONG * palette, W3D_Scissor* scissor, ULONG srcbpr) (a0,a1,a2,d1,a3,a4,d0)
ULONG W3D_FreeAllTexObj(W3D_Context * context) (a0)
ULONG W3D_GetDestFmt() ()
*
* V2
*
ULONG W3D_DrawLineStrip(W3D_Context * context, W3D_Lines * lines) (a0,a1)
ULONG W3D_DrawLineLoop(W3D_Context * context, W3D_Lines * lines) (a0,a1)
W3D_Driver ** W3D_GetDrivers() ()
ULONG W3D_QueryDriver(W3D_Driver* driver, ULONG query, ULONG destfmt) (a0,d0,d1)
ULONG W3D_GetDriverTexFmtInfo(W3D_Driver* driver, ULONG format, ULONG destfmt) (a0,d0,d1)
ULONG W3D_RequestMode(struct TagItem * taglist) (a0)
==varargs
ULONG W3D_RequestModeTags(Tag taglist, ...) (a0)
void W3D_SetScissor(W3D_Context * context, W3D_Scissor * scissor) (a0,a1)
void W3D_FlushFrame(W3D_Context * context) (a0)
W3D_Driver * W3D_TestMode(ULONG ModeID) (d0)
ULONG W3D_SetChromaTestBounds(W3D_Context * context, W3D_Texture * texture, ULONG rgba_lower, ULONG rgba_upper, ULONG mode) (a0,a1,d0,d1,d2)
ULONG W3D_ClearDrawRegion(W3D_Context * context, ULONG color) (a0,d0)
*
* V3
*
ULONG W3D_DrawTriangleV(W3D_Context * context, W3D_TriangleV * triangle) (a0,a1)
ULONG W3D_DrawTriFanV(W3D_Context * context, W3D_TrianglesV * triangles) (a0,a1)
ULONG W3D_DrawTriStripV(W3D_Context * context, W3D_TrianglesV * triangles) (a0,a1)
W3D_ScreenMode * W3D_GetScreenmodeList() ()
void W3D_FreeScreenmodeList(W3D_ScreenMode * list) (a0)
ULONG W3D_BestModeID(struct TagItem * tags) (a0)
==varargs
ULONG W3D_BestModeIDTags(Tag tags, ...) (a0)
*
* V4
*
ULONG W3D_VertexPointer(W3D_Context* context, void * pointer, int stride, ULONG mode, ULONG flags) (a0,a1,d0,d1,d2)
ULONG W3D_TexCoordPointer(W3D_Context* context, void * pointer, int stride, int unit, int off_v, int off_w, ULONG flags) (a0,a1,d0,d1,d2,d3,d4)
ULONG W3D_ColorPointer(W3D_Context* context, void * pointer, int stride, ULONG format, ULONG mode, ULONG flags) (a0,a1,d0,d1,d2,d3)
ULONG W3D_BindTexture(W3D_Context* context, ULONG tmu, W3D_Texture * texture) (a0,d0,a1)
ULONG W3D_DrawArray(W3D_Context* context, ULONG primitive, ULONG base, ULONG count) (a0,d0,d1,d2)
ULONG W3D_DrawElements(W3D_Context* context, ULONG primitive, ULONG type, ULONG count, void * indices) (a0,d0,d1,d2,a1)
void W3D_SetFrontFace(W3D_Context* context, ULONG direction) (a0,d0)
==end
