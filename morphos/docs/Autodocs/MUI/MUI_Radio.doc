TABLE OF CONTENTS

Radio.mui/Radio.mui
Radio.mui/MUIA_Radio_Active
Radio.mui/MUIA_Radio_Entries
Radio.mui/Radio.mui

	Radio class generates radio button gadgets.
	They do the same job as cycle gadgets and
	eat up more window space, maybe that's the reason 
	why so few of them can be found in existing
	applications.
Radio.mui/MUIA_Radio_Active

    NAME
	MUIA_Radio_Active -- (V4 ) [ISG], LONG, 0x80429b41

    FUNCTION
	This attributes defines the number of the active
	entry in the radio gadgets. Valid range is from
	0 for the first entry to NumEntries-1 for the last.

	Setting MUIA_Radio_Active causes the gadget to
	be updated. On the other hand, when the user
	plays around with the gadget, MUIA_Radio_Active
	will always reflects the current state.

    EXAMPLE
	set(radioobj,MUIA_Radio_Active,3);

    SEE ALSO
	MUIA_Radio_Entries
Radio.mui/MUIA_Radio_Entries

    NAME
	MUIA_Radio_Entries -- (V4 ) [I..], STRPTR *, 0x8042b6a1

    FUNCTION
	Here you can define what entries shall be displayed
	in your radio gadget. You must supply a pointer to
	a string array, containing one entry for each item
	and terminated with a NULL.

	Remember that radio gadget entries may contain any
	text formatting code such as bold, italic or
	underlined characters.

	By default, MUI will place the entries vertically
	below each other. But since Radio.mui is a subclass
	of group class, you can use group layout attributes
	to adjust the layout to your needs, eg
	MUIA_Group_Horiz, TRUE
	for a horizontal radio button row or even
	MUIA_Group_Rows/Columns
	for a more fancy layout.
	If you use these layout features, keep in mind that
	Radio.mui creates exactly one child object for each
	entry.

    EXAMPLES
	static const char *RA_GroupTitleColor[] =
	{
	   "normal",
	   "highlight",
	   "3-dimensional",
	   NULL
	};

        CY_Title = RadioObject,
	   MUIA_Radio_Entries, RA_GroupTitleColor,
	   End;

    SEE ALSO
	MUIA_Radio_Active, MUIA_Text_Contents
