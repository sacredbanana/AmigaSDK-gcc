TABLE OF CONTENTS

clipboard.output/--background--
clipboard.output/MMA_OutputBytes
clipboard.output/MMA_StreamHandle
clipboard.output/MMA_StreamName
clipboard.output/MMA_TaskName
clipboard.output/MMA_TaskPriority
clipboard.output/MMM_MessageAtEnd
clipboard.output/MMM_Pause
clipboard.output/MMM_Play
clipboard.output/MMM_SignalAtEnd
clipboard.output/MMM_Stop
clipboard.output/OM_DISPOSE
clipboard.output/OM_NEW
clipboard.output/--background--

 DESCRIPTION
   The class is Reggae data output, writing data to a clipboard. An object
   of this class creates a subprocess fetching chunks of data from object's
   input port and writing it to a clipboard unit. In effect all the data
   processing in the pipe of Reggae objects is done in this subprocess
   asynchronously, offloading the application. Priority of the subprocess may
   be adjusted  before data writing with MMA_TaskPriority attribute.
   The default value of -1 is recommended for background processing, so it
   does not impact system responsivity. Data is written in 48 kB blocks.

   Data processing is started by MMM_Play(), may be paused with MMM_Pause().
   Clipboard unit is closed when an object is disposed. Disposing is usually
   done when object is paused, but disposing a running object is guarranted
   to  be safe. Natural end of processing, caused by end of data stream or
   error, may be signalled to the calling process with either
   MMM_SignalAtEnd() or MMM_MessageAtEnd().

   An instance of clipboard.output, has only one port number 0. This port is an
   input. This input accepts any data format.

   An object of the class may be shared between processes. All operations
   are protected by object's semaphore. The only exception is that the
   object must be created and disposed by the same process.

   The class supports dynamic input reconnection. It is usually done when
   object is paused, but may be also performed on a running object. In this
   case reconnection is done at end of current data block.

 NEW ATTRIBUTES
   Attributes applicability:
     I - may be set at creation time.
     S - may be set on an existing object.
     G - may be get from an object.
     P - may be set for an object's port.
     Q - may be queried from an object's port.

   MMA_TaskName             (V51)    [I.G.Q], STRPTR
   MMA_TaskPriority         (V51)    [I.G.Q], BYTE
   MMA_OutputBytes          (V51)    [..G.Q], QUAD

 NEW METHODS
   OM_NEW()                 (V51)
   OM_DISPOSE()             (V51)
   MMM_MessageAtEnd()       (V51)
   MMM_Pause()              (V51)
   MMM_Play()               (V51)
   MMM_SignalAtEnd()        (V51)
   MMM_Stop()               (V51)

 HISTORY
   51.1  (01.09.2016)
   - Initial release.

clipboard.output/MMA_OutputBytes

 NAME
   MMA_OutputBytes (v51) [..G.Q], QUAD, 0x8EDA0023

 FUNCTION
   Return number of bytes written to the clipboard unit so far.

 NOTES
   This is 64-bit attribute.

clipboard.output/MMA_StreamHandle

 NAME
   MMA_StreamHandle (V51) [..G.Q], LONG

 FUNCTION
   Specifies or returns clipboard unit as a number. For the constructor this
   attribute has priority over MMA_StreamName. If none of them is specified,
   clipboard unit defaults to 0.

 NOTES
   MorphOS clipboard.device supports 2^32 units (full ULONG range).

 SEE ALSO
   MMA_StreamName

clipboard.output/MMA_StreamName

 NAME
   MMA_StreamName (V51) [..G.Q], STRPTR

 FUNCTION
   Specifies or returns clipboard unit as a string. The string represents
   clipboard unit number as decimal string without leading zeros. For the
   constructor MMA_StreamHandle attribute has priority over this one. If
   none of them is specified, clipboard unit defaults to 0. When this
   attribute is read, the string returned must be treated as read-only.

 NOTES
   The string is converted to number with dos.library/StrToLong().

 BUGS
   Current version supports only units up to 2 147 483 647 ($7FFFFFFF).

 SEE ALSO
   MMA_StreamHandle

clipboard.output/MMA_TaskName

 NAME
   MMA_TaskName (v51) [I.G.Q], STRPTR, 0x8EDA001D

 FUNCTION
   Specifies the name of object subprocess. The default name is "Clipboard
   Output n", where 'n' is the class subprocesses counter value. The counter
   is initialized to 0, when the class is loaded to memory (at first open).
   The string passed must be null-terminated.

 NOTES
   The passed string is buffered, so it need not to be static.

clipboard.output/MMA_TaskPriority

 NAME
   MMA_TaskPriority (v51) [I.G.Q], BYTE, 0x8EDA0005

 FUNCTION
   Sets the priority of object subprocess. All Reggae objects connected to
   clipboard.output object input port perform data processing in context of
   the subprocess. The default priority is -1, which is suitable for
   background non-realtime jobs. Set it to 0 for foreground jobs and higher
   for saving realtime streams. The allowed priority range is <-128, +9>.

clipboard.output/MMM_MessageAtEnd

 NAME
   MMM_MessageAtEnd (v51) -- Adds a message to end of stream event.

 SYNOPSIS
   DoMethod(obj, MMM_MessageAtEnd, struct Message *msg);

 FUNCTION
   Adds a mesage to be replied at end of stream event. The message is put
   into an internal message port. If there are more calls to this method,
   messages passed are queued in the port. When end of stream event occurs,
   all queued messages are replied to their respective reply ports.

   Unlike MMM_SignalAtEnd(), this is an "one shot" attribute, as a message
   can be replied once only. Then it has to be reinitialized and sent
   again with this method. On the other hand only one signal to one process
   may be sent at end of stream, while number of messages replied is not
   limited.

 INPUTS
   - msg, a message to be sent. It must be a properly initialized system
     message, it means mn_Node.ln_Type, mn_Length and mn_ReplyPort fields
     must be valid.

 RESULT
   Boolean value of success. The method can fail for following reasons:
   - temporary message port used to communicate with the subprocess cannot
     be created, MMA_ErrorCode is MMERR_RESOURCE_MISSING.
   - NULL message pointer, MMA_ErrorCode is MMERR_WRONG_ARGUMENTS.

 SEE ALSO
   MMM_Stop, MMM_Pause, MMM_SignalAtEnd

clipboard.output/MMM_Pause

 NAME
   MMM_Pause (V51) -- Pauses data writing.

 SYNOPSIS
   DoMethod(obj, MMM_Pause);

 FUNCTION
   For clipboard.output this method is the same as MMM_Stop().

 INPUTS
   None.

 RESULT
   None.

 SEE ALSO
   MMM_Play, MMM_Stop

clipboard.output/MMM_Play

 NAME
   MMM_Play (V51) -- Starts data writing.

 SYNOPSIS
   success = DoMethod(obj, MMM_Play);

 FUNCTION
   The method starts the data processing. Data is being pulled from the
   object input and written to the output clipboard unit. The method is
   asynchronous, so it returns to the caller immediately. Writing is stopped
   automatically if data pull returns an error (MMERR_END_OF_DATA typically).
   It can be also stopped at any time with MMM_Stop(),or by just disposing
   the object. MMM_Play() issued while object is still processing, is
   ignored.

 INPUTS
   None.

 RESULT
   None.

 SEE ALSO
   MMM_Stop, MMM_Sound_SignalAtEnd, MMM_Sound_ReplyMsgAtEnd, MMA_ErrorCode

clipboard.output/MMM_SignalAtEnd

 NAME
   MMM_SignalAtEnd (v51) -- Sets a signal for end of stream event.

 SYNOPSIS
   DoMethod(obj, MMM_SignalAtEnd, *struct Process process, ULONG sigbit);

 FUNCTION
   As data processing in the class is asynchronous to calling application,
   there must be a way of signalling the end of stream. This method sets a
   signal to be sent to a process specified when end of stream event
   happens. End of stream event happens when processing is stopped for
   reasons independent of the application:

   - End of data in stream.
   - Data pull error.

   These cases can be distinguished by checking MMA_ErrorCode attribute. It
   will be MMERR_END_OF_DATA for end of stream, other error code in case of
   fail. Note that performing MMM_Stop(), MMM_Pause() or disposing the
   object do not trigger end of stream event.

   The signalling request remains active after end of stream event. The
   signal is sent at every such event until the object is disposed. To clear
   the signalling request call this method with NULL process pointer. Only
   one signal to one process may be sent. If in need of multiple processes
   signalling, one should use MMM_MessageAtEnd() method, or implement signal
   retransmission.

 INPUTS
   - process, the process to be signalled, or NULL to cancel the signalling.
   - sigbit, the signal number (not mask!) to be used, must be in (0, 31)
     range, the call will be ignored otherwise and error code set to
     MMERR_WRONG_ARGUMENTS for the object.

 RESULT
   Boolean value of success. The method can fail for following reasons:
   - temporary message port used to communicate with the subprocess cannot
     be created, MMA_ErrorCode is MMERR_RESOURCE_MISSING.
   - signal number out of range, MMA_ErrorCode is MMERR_WRONG_ARGUMENTS.

 NOTES
   When using a private signal (not one of SIGBREAKB_CTRL_(C|D|E|F)), the
   signal must be allocated by the process to be signalled with
   AllocSignal().

   Execution of MMM_Stop() or MMM_Pause() does not trigger the end of stream
   event.

 SEE ALSO
   MMM_Stop, MMM_Pause, MMM_MessageAtEnd

clipboard.output/MMM_Stop

 NAME
   MMM_Stop (V51) -- Pauses data writing.

 SYNOPSIS
   DoMethod(obj, MMM_Stop);

 FUNCTION
   The method stops writing data to the output clipboard unit, but does not
   close it. Writing can be resumed with MMM_Play(). Note that this method
   does not trigger end of stream events.

 INPUTS
   None.

 RESULT
   None.

 NOTES
   For clipboard.output there is no difference between MMM_Stop() and
   MMM_Pause().

 SEE ALSO
   MMM_Play

clipboard.output/OM_DISPOSE

 NAME
   OM_DISPOSE -- Disposes clipboard.output object (V51)

 SYNOPSIS
   DisposeObject(obj);

 FUNCTION
   Flushes data from buffer, frees it, closes output unit, kills the worker
   process, disposes the object.

 INPUTS
   obj - object to dispose

 RESULT
   None.

clipboard.output/OM_NEW

 NAME
   OM_NEW -- Creates new clipboard.output object (V51)

 SYNOPSIS
   obj = NewObject(NULL, "clipboard.output", ...);

 FUNCTION
   Creates a new clipboard.output object. Launches a worker process, the
   process allocates its data buffer. The process also opens the output
   clipboard.device unit.
   No data is written to the unit until MMM_Play() is issued.

 INPUTS
   tags - supported ones are MMA_TaskPriority, MMA_TaskName and
     MMA_ErrorCode.

 RESULT
   Object pointer or NULL when construction fails. Optional variable pointed
   by MMA_ErrorCode may be set to:
   - MMERR_OUT_OF_MEMORY, obvious.
   - MMERR_IO_ERROR, when unit cannot be opened. DOS error is logged.
   - MMERR_RESOURCE_MISSING, when worker process cannot open dos.library,
     intuition.library or multimedia.class. While theoretically possible, it
     is extremely unlikely to happen.

