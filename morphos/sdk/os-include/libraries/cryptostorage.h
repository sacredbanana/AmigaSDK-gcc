#ifndef LIBRARIES_CRYPTOSTORAGE_H
#define LIBRARIES_CRYPTOSTORAGE_H

/*
	cryptostorage.library include

	Copyright © 2017-2021 The MorphOS Development Team, All Rights Reserved.
*/

#ifndef EXEC_TYPES_H
# include <exec/types.h>
#endif

#ifndef UTILITY_TAGITEM_H
# include <utility/tagitem.h>
#endif

#pragma pack(2)

struct CryptoStorageCtx;

/*
 * Function return values
 */
enum
{
	CSS_OK,                 /* Success */
	CSS_BADFORMAT,          /* Bad storage format */
	CSS_NOMEM,              /* Out of memory */
	CSS_IO_ERROR,           /* Disk I/O error, including file not found */
	CSS_LOCKED,             /* Operation attempted on a locked storage */
	CSS_BAD_PASSPHRASE,     /* Decrypt error, likely due to wrong passphrase */
	CSS_NOKEY,              /* Specific key not found */
	CSS_BUFFER_OVERFLOW,    /* Buffer would have overflown */
};

/*
 * CryptoStorageOpen tags
 *
 * CST_FileName         CONST_STRPTR
 *
 *     Full path to the crypto storage. Omitting this tag creates a memory
 *     only storage. The memory only storage won't be stored to a file,
 *     and will be destroyed at CryptoStorageClose() call.
 *
 * CST_Passphrase       CONST_STRPTR
 *
 *    Passphrase to encrypt/decrypt the values in the storage. Note that
 *    keys themselves are not encrypted. This tag can be omitted if the
 *    storage is unlocked with the CryptoStorageUnlock() call when needed.
 *
 *    This tag is also applicaple to CryptoStorageUnlockA() and
 *    CryptoStorageChangePassphraseA() calls.
 *
 *    Note that the caller should memset the passphrase string to all zero
 *    as soon as possible to avoid leaking the password in memory.
 *
 * CST_RawHexKey        BOOL   (Default: FALSE)
 *
 *    String passed in CST_Passphrase is interpreted as a hex string
 *    representing the raw encryption key. Note that the key should *not*
 *    be generated by some fast hashing algorithm in order to prevent brute
 *    force attacks. The string shpuld be at least 64 hex digits (32 bytes)
 *    long. If TRUE CST_HashRounds is ignored.
 *
 *    This tag is also applicaple to CryptoStorageUnlockA() and
 *    CryptoStorageChangePassphraseA() calls.
 *
 * CST_FailIfMissing    BOOL   (Default: FALSE)
 *
 *    Fail CryptoStorageOpen() call if the storage file is missing.
 *
 * CST_CreateNew        BOOL   (Default: FALSE)
 *
 *    Wipe the storage empty if it already exists.
 *
 * CST_CommitAtStore    BOOL   (Default: FALSE)
 *
 *    Immediately commit new value fo the crypto storage after any
 *    successful CryptoStorageStore() call. Normally the file is only
 *    written out at CryptoStorageCommit() or CryptoStorageClose() call.
 *    Ignored for memory only storages.
 *
 * CST_HashRounds       ULONG  (Default: 50000)
 *
 *    Number of SHA256 rounds performed for the password hashing.
 *    For ultra high security you might want to use higher value
 *    than the default.
 *
 *    This tag is also applicaple to CryptoStorageChangePassphraseA()
 *    call. If specified the hashing rounds are changed to specified
 *    value.
 *
 * CST_OldPassphrase    CONST_STRPTR  (since V51.4)
 *
 *    Old passphrase to verify at CryptoStorageChangePassphrase(). If
 *    specified the passphrase needs to be correct to continue with
 *    passphrase change.
 *
 *    This tag is only valid for CryptoStorageChangePassphrase().
 *
 * CST_CloseRollback BOOL  (Default: TRUE) (since V52.5)
 *
 *    When set to TRUE CryptoStorageClose() will roll back the crypto
 *    storage in case of an I/O error and release resources associated
 *    with the context. If set to FALSE, the function instead will
 *    report the I/O error and keep the resources allocated.
 *
 */
#define CST_TagBase             (TAG_USER + 0x1A0000)
#define CST_FileName            (CST_TagBase + 1)
#define CST_Passphrase          (CST_TagBase + 2)
#define CST_RawHexKey           (CST_TagBase + 3)
#define CST_FailIfMissing       (CST_TagBase + 4)
#define CST_CreateNew           (CST_TagBase + 5)
#define CST_CommitAtStore       (CST_TagBase + 6)
#define CST_HashRounds          (CST_TagBase + 7)
#define CST_OldPassphrase       (CST_TagBase + 8)
#define CST_CloseRollback       (CST_TagBase + 9)

#pragma pack()

#endif /* LIBRARIES_CRYPTOSTORAGE_H */
