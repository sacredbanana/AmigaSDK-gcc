#ifndef LIBRARIES_SENSORS_H
#define LIBRARIES_SENSORS_H

/*
	sensors.library include (V51)

	Copyright © 2010-2012 The MorphOS Development Team, Jacek Piszczek, All Rights Reserved.

	Contact devenv@morphos-team.net if you would like to create custom sensors - to coordinate
	the tagbase for you to use.
*/

#ifndef EXEC_TYPES_H
# include <exec/types.h>
#endif

#ifndef EXEC_PORTS_H
# include <exec/ports.h>
#endif

#ifndef UTILITY_TAGITEM_H
# include <utility/tagitem.h>
#endif

/* A notification message is sent to all clients that requested to be notified
** whenever attributes of the sensor change. All fields are valid until the
** message is replied */

struct SensorsNotificationMessage
{
	struct Message  Msg;

	/* Pointer to the Sensor device that triggered the notification message */
	APTR            Sensor;

	/* The UserData set by the client when registering a notification */
	APTR            UserData;

	/* A taglist containing the changed attributes and their new values */
	struct TagItem *Notifications;
};

#define SENSORS_Dummy                           (TAG_USER + 0x200000)
 
/* Do note that the getter function assumes that the size of the var to write to is
** sizeof (ULONG) (in case of DOUBLE *, sizeof (APTR) and the stored value must be a
** valid address to a DOUBLE variable). So, for BOOL or UBYTE you still need to give it
** a pointer to an ULONG!
** All STRING variables are UTF-8 encoded.
*/

/* SensorType */
#define SENSORS_Type                            (SENSORS_Dummy + 1)

/* SensorClass defines a type of sensor class. The classes are used
** to group sensors by kind and to make searching for them easier.
** SensorClass_System is *reserved* for MorphOS internal sensors. */
#define SENSORS_Class                           (SENSORS_Dummy + 7)

/* Determines the parent sensor in child<>parent hierarchy of sensors.
** Each top level sensor may have an unlimited (constrained by memory)
** amount of child sensors. A child sensor may have child sensors
** of its own.
** 
** NOTE: when you obtain a parent sensor via GetSensorAttr, the parent
** pointer sensor will remain valid as long as the item you've called
** GetSensorAttr on stays valid.
*/
#define SENSORS_Parent                          (SENSORS_Dummy + 8)

/* BOOL, allows to hide a sensor (prevents it from appearing in the
** lists generated by ObtainSensorsList). This is useful when
** constructing a multi-child sensor to ensure nobody gets an
** incomplete parent sensor. */
#define SENSORS_Private                         (SENSORS_Dummy + 9)

/* BOOL, TRUE if this sensor has child sensors. Only supported in
** GetSensorAttr */
#define SENSORS_HasChildSensors                 (SENSORS_Dummy + 10)

/* SensorPlacement */
#define SENSORS_SensorPlacement                 (SENSORS_Dummy + 2)

/* Extra data related to SensorPlacement, may be a core number, etc */
#define SENSORS_SensorPlacementData             (SENSORS_Dummy + 3)

/* Expected reading update time in ms */
#define SENSORS_UpdateFrequency                 (SENSORS_Dummy + 4)

/* Attributes control */

/* With regular sensor attributes, only the owner of the sensor (as
** in, the caller of AddSensor) is allowed to set sensor values. In
** some cases though, the owner may like to expose some attributes
** to be setable by clients. In that case the owner must set the
** AllowSetAttr attribute and register a notification on the attr.
** Must be present *before* each value tag in AddSensor. */
#define SENSORS_AllowSetAttr                    (SENSORS_Dummy + 11)

/* Use this to force notifications sent even if the attribute's
** value did not change.
** Must be present *before* each value tag in AddSensor if you wish
** to set it. */
#define SENSORS_NotifyAlways                    (SENSORS_Dummy + 12)

/* Must be present *before* each value tag in AddSensor if you wish
** to add a DOUBLE data type tag. Otherwise ULONG/BOOL is assumed.
** If set to TRUE, the data will be treated as a DOUBLE. If FALSE or
** not present, the data will be treated as an ULONG/BOOL. */
#define SENSORS_DataIsDOUBLE                    (SENSORS_Dummy + 5)

/* Must be present *before* each value tag in AddSensor if you wish
** to add a STRING data type tag. Otherwise ULONG/BOOL is assumed.
** The strings are assumed to be in UTF-8 format, NULL terminated. */
#define SENSORS_DataIsSTRING                    (SENSORS_Dummy + 6)



/* System sensor attributes */

/* DOUBLE *, sensor reading in Celsius */
#define SENSORS_Temperature_Temperature         (SENSORS_Dummy + 100)

/* DOUBLE *, sensor reading in Fahrenheit */
#define SENSORS_Temperature_TemperatureF        (SENSORS_Dummy + 101)

/* DOUBLE *, maximum allowed value in Celsius */
#define SENSORS_Temperature_Max                 (SENSORS_Dummy + 102)

/* DOUBLE *, minimum allowed value in Celsius */
#define SENSORS_Temperature_Min                 (SENSORS_Dummy + 103)

/* DOUBLE *, overheat alert temperature */
#define SENSORS_Temperature_Alert               (SENSORS_Dummy + 104)

/* DOUBLE *, temperature at which the alert is cancelled */
#define SENSORS_Temperature_AlertCancel         (SENSORS_Dummy + 105)


/* ULONG, battery capacity in mAh */
#define SENSORS_Battery_Capacity                (SENSORS_Dummy + 200)

/* ULONG, maximum capacity in mAh */
#define SENSORS_Battery_MaxCapacity             (SENSORS_Dummy + 201)

/* ULONG, charge cycle count */
#define SENSORS_Battery_CycleCount              (SENSORS_Dummy + 202)

/* BOOL, TRUE if the battery is charging */
#define SENSORS_Battery_Charging                (SENSORS_Dummy + 203)

/* ULONG, battery voltage in mV */
#define SENSORS_Battery_Voltage                 (SENSORS_Dummy + 204)

/* BOOL, if FALSE means the machine has a battery slot, but there's no battery in it */
#define SENSORS_Battery_Present                 (SENSORS_Dummy + 205)

/* ULONG, battery current in mA, positive value when charging, negative when discharging */
#define SENSORS_Battery_Current                 (SENSORS_Dummy + 206)

/* BOOL, if turns to TRUE, it means the battery might be fault */
#define SENSORS_Battery_Faulty                  (SENSORS_Dummy + 207)

/* ULONG, battery charge OR discharge time remaining in seconds (avg) */
#define SENSORS_Battery_Remaining               (SENSORS_Dummy + 208)
#define SENSORS_Battery_Remaining_Calculating   0xFFFFFFFF
#define SENSORS_Battery_Remaining_Charged       0xFFFFFFFE

/* BOOL, set to TRUE on low battery alert */
#define SENSORS_Battery_LowBatteryAlert         (SENSORS_Dummy + 209)


/* DOUBLE, ambient light reading (0.0 - 1.0) */
#define SENSORS_AmbientLight_Level              (SENSORS_Dummy + 300)


/* BOOL, TRUE if the lid is open */
#define SENSORS_Lid_Open                        (SENSORS_Dummy + 400)


/* BOOL, TRUE when AC power is connected */
#define SENSORS_ACPower_PluggedIn               (SENSORS_Dummy + 500)


/* UBYTE, Fan speed - PWM cycle. Some fans may define speed in PWM duty
** cycle, others might report RPM */
#define SENSORS_Fan_Speed                       (SENSORS_Dummy + 600)

/* ULONG, Fan speed - RPM */
#define SENSORS_Fan_RPM                         (SENSORS_Dummy + 601)
/* ULONG, Max fan RPM */
#define SENSORS_Fan_RPM_Max                     (SENSORS_Dummy + 602)


/* BeginSensorNotify special attributes */

/* UserData will be placed in SensorsNotificationMessage */
#define SENSORS_Notification_UserData           (SENSORS_Dummy + 1000)

/* struct MsgPort *, Determines the port to send notifications to */
#define SENSORS_Notification_Destination        (SENSORS_Dummy + 1001)

/* BOOL, if TRUE, adding a notification will result in the value
** being sent to the client immediately */
#define SENSORS_Notification_SendInitialValue   (SENSORS_Dummy + 1002)

/* BOOL, if TRUE, it means our sensor was removed */
#define SENSORS_Notification_Removed            (SENSORS_Dummy + 1003)

/* BOOL, if TRUE, it means the list of sensors matching a given
** class has changed. When using this tag, it is assumed that you call
** StartSensorNotify with a NULL pointer. */
#define SENSORS_Notification_ClassListChanged   (SENSORS_Dummy + 1004)



typedef enum
{
	SensorType_Unknown                      = -1,
	SensorType_Temperature                  = 0,
	SensorType_Battery                      = 1,
	SensorType_AmbientLight                 = 2,
	SensorType_Lid                          = 3,
	SensorType_ACPower                      = 4,
	SensorType_Fan                          = 5,

	SensorType_NumTypes
} SensorType;

typedef enum
{
	SensorClass_All                         = -1,
	SensorClass_System                      = 0,
	SensorClass_Custom                      = 1,
	SensorClass_HID                         = 2,

	SensorClass_NumClasses
} SensorClass;

typedef enum
{
	SensorPlacement_Other                   = -1,
	SensorPlacement_Processor               = 0,
	SensorPlacement_NorthBridge             = 1,
	SensorPlacement_Battery                 = 2,
	SensorPlacement_Trackpad                = 3,
	SensorPlacement_Keyboard                = 4,
	SensorPlacement_PowerSupply             = 5,
	SensorPlacement_Lid                     = 6,
	SensorPlacement_Enclosure               = 7,
	SensorPlacement_EnclosureLeft           = 8,
	SensorPlacement_EnclosureRight          = 9,
	SensorPlacement_EnclosureBottom         = 10,
	SensorPlacement_EnclosureBottomLeft     = 11,
	SensorPlacement_EnclosureBottomRight    = 12,
	SensorPlacement_EnclosureTop            = 13,
	SensorPlacement_EnclosureTopLeft        = 14,
	SensorPlacement_EnclosureTopRight       = 15,
	SensorPlacement_SouthBridge             = 16,
	SensorPlacement_HardDrive               = 17,
	SensorPlacement_GPU                     = 18,
	SensorPlacement_AmbientAir              = 19,
	SensorPlacement_AmbientGPU              = 20,
	SensorPlacement_AmbientNorthBridge      = 21,
	SensorPlacement_ODD                     = 22,
	SensorPlacement_IncomingAir             = 23,
	SensorPlacement_BackSide                = 24,
	SensorPlacement_KodiakDiode             = 25,
	SensorPlacement_Tunnel                  = 26,
	SensorPlacement_TunnelHeatSink          = 27,
	SensorPlacement_MLBInletAmbient         = 28,
	SensorPlacement_DriveBay                = 29,

	SensorPlacement_NumPlacements
} SensorPlacement;

#endif /* LIBRARIES_SENSORS_H */

