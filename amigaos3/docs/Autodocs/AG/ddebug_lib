@database "ddebug_lib"
@master "AMIDEV:NDK/Autodocs/ddebug_lib.doc"

@Node Main "ddebug_lib.doc"
@toc "Autodocs/AG/INDEX/Main"
    @{" DDoFmt() " Link "DDoFmt()"}
    @{" DGetChar() " Link "DGetChar()"}
    @{" DGetNum() " Link "DGetNum()"}
    @{" DMayGetChar() " Link "DMayGetChar()"}
    @{" DPutChar() " Link "DPutChar()"}
    @{" DPutFmt() " Link "DPutFmt()"}
    @{" DPutStr() " Link "DPutStr()"}
    @{" KCmpStr() " Link "KCmpStr()"}
@EndNode

@Node "DDoFmt()" "ddebug.lib/DDoFmt"

@{b}   NAME@{ub}
	DDoFmt -- format data into a character stream.

@{b}   SYNOPSIS@{ub}
	DDoFmt(FormatString, DataStream, PutChProc, PutChData);
	      A0	    A1		A2	   A3

@{b}   FUNCTION@{ub}
	perform "C"-language-like formatting of a data stream,
	outputting the result a character at a time

@{b}   INPUTS@{ub}
	@{"FormatString" Link "locale/FormatString()"} - a "C"-language-like null terminated format
		string, with the following supported % types:
	DataStream - a stream of data that is interpreted according to
		the format string.
	PutChProc - the procedure to call with each character to be
		output, called as:
	    PutChProc(Char,  PutChData);
		      D0-0:8 A3
		the procedure is called with a null Char at the end of
		the format string.
	PutChData - an address register that passes thru to PutChProc.

@EndNode

@Node "DGetChar()" "ddebug.lib/DGetChar"

@{b}   NAME@{ub}
	DGetChar - get a character from the parallel port

@{b}   SYNOPSIS@{ub}
	char = DGetChar()
	D0

@{b}   FUNCTION@{ub}
	get the next character from the parallel port.

@EndNode

@Node "DGetNum()" "ddebug.lib/DGetNum"

@{b}   NAME@{ub}
	DGetNum - get a number from the parallel port

@{b}   SYNOPSIS@{ub}
	number = DGetNum()
	D0

@{b}   FUNCTION@{ub}
	get a signed decimal integer from the parallel port.

@EndNode

@Node "DMayGetChar()" "ddebug.lib/DMayGetChar"

@{b}   NAME@{ub}
	DMayGetChar - return a char iff present, but don't block

@{b}   SYNOPSIS@{ub}
	flagChar = DMayGetChar()
	D0

@{b}   FUNCTION@{ub}
	return either a -1, saying that there is no char present, or
	the char that was waiting

@EndNode

@Node "DPutChar()" "ddebug.lib/DPutChar"

@{b}   NAME@{ub}
	DPutChar - put a character to the parallel port

@{b}   SYNOPSIS@{ub}
	char = DPutChar(char)
	D0	       D0

@{b}   FUNCTION@{ub}
	put a character to the parallel port.

@EndNode

@Node "DPutFmt()" "ddebug.lib/DPutFmt"

@{b}   NAME@{ub}
	DPutFmt - print formatted data to the parallel port

@{b}   SYNOPSIS@{ub}
	DPutFmt(format,values)
	       A0     A1

@{b}   FUNCTION@{ub}
	print formatted data to the parallel port

@EndNode

@Node "DPutStr()" "ddebug.lib/DPutStr"

@{b}   NAME@{ub}
	DPutStr - put a string to the parallel port

@{b}   SYNOPSIS@{ub}
	DPutStr(string)
	       A0

@{b}   FUNCTION@{ub}
	put a null terminated string to the parallel port.

@EndNode

@Node "KCmpStr()" "ddebug.lib/KCmpStr"

@{b}   NAME@{ub}
	KCmpStr - compare two null terminated strings

@{b}   SYNOPSIS@{ub}
	mismatch = KCmpStr(string1, string2)
	D0		  A0	   A1

@{b}   FUNCTION@{ub}
	string1 is compared to string2 using the ASCII collating
	sequence.

@EndNode

