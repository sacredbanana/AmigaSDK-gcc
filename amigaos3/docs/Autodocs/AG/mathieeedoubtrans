@database "mathieeedoubtrans"
@master "AMIDEV:NDK/Autodocs/mathieeedoubtrans.doc"

@Node Main "mathieeedoubtrans.doc"
@toc "Autodocs/AG/INDEX/Main"
    @{" IEEEDPAcos() " Link "IEEEDPAcos()"}
    @{" IEEEDPAsin() " Link "IEEEDPAsin()"}
    @{" IEEEDPAtan() " Link "IEEEDPAtan()"}
    @{" IEEEDPCos() " Link "IEEEDPCos()"}
    @{" IEEEDPCosh() " Link "IEEEDPCosh()"}
    @{" IEEEDPExp() " Link "IEEEDPExp()"}
    @{" IEEEDPFieee() " Link "IEEEDPFieee()"}
    @{" IEEEDPLog() " Link "IEEEDPLog()"}
    @{" IEEEDPLog10() " Link "IEEEDPLog10()"}
    @{" IEEEDPPow() " Link "IEEEDPPow()"}
    @{" IEEEDPSin() " Link "IEEEDPSin()"}
    @{" IEEEDPSincos() " Link "IEEEDPSincos()"}
    @{" IEEEDPSinh() " Link "IEEEDPSinh()"}
    @{" IEEEDPSqrt() " Link "IEEEDPSqrt()"}
    @{" IEEEDPTan() " Link "IEEEDPTan()"}
    @{" IEEEDPTanh() " Link "IEEEDPTanh()"}
    @{" IEEEDPTieee() " Link "IEEEDPTieee()"}
@EndNode

@Node "IEEEDPAcos()" "mathieeedoubtrans.library/IEEEDPAcos"

@{b}   NAME@{ub}
       IEEEDPAcos -- compute the arc cosine of a number

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPAcos(  y  );
       d0/d1              d0/d1

       double  x,y;

@{b}   FUNCTION@{ub}
       Compute arc cosine of y in IEEE double precision

@{b}   INPUTS@{ub}
       y - IEEE double precision floating point value

@{b}   RESULT@{ub}
       x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPCos()" Link "IEEEDPCos()"}, @{"IEEEDPAtan()" Link "IEEEDPAtan()"}, @{"IEEEDPAsin()" Link "IEEEDPAsin()"}
@EndNode

@Node "IEEEDPAsin()" "mathieeedoubtrans.library/IEEEDPAsin"

@{b}   NAME@{ub}
       IEEEDPAsin -- compute the arcsine of a number

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPAsin(  y  );
       d0/d1              d0/d1

       double  x,y;

@{b}   FUNCTION@{ub}
       Compute the arc sine of y in IEEE double precision

@{b}   INPUTS@{ub}
       y - IEEE double precision floating point value

@{b}   RESULT@{ub}
       x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPSin()" Link "IEEEDPSin()"}, @{"IEEEDPAtan()" Link "IEEEDPAtan()"}, @{"IEEEDPAcos()" Link "IEEEDPAcos()"}
@EndNode

@Node "IEEEDPAtan()" "mathieeedoubtrans.library/IEEEDPAtan"

@{b}   NAME@{ub}
	IEEEDPAtan -- compute the arctangent of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEEDPAtan(  y  );
	d0/d1		   d0/d1

	double	x,y;

@{b}   FUNCTION@{ub}
	Compute arctangent of y in IEEE double precision

@{b}   INPUTS@{ub}
	y - IEEE double precision floating point value

@{b}   RESULT@{ub}
	x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEEDPTan()" Link "IEEEDPTan()"}, @{"IEEEDPAsin()" Link "IEEEDPAsin()"}, IEEEDPACos()
@EndNode

@Node "IEEEDPCos()" "mathieeedoubtrans.library/IEEEDPCos"

@{b}   NAME@{ub}
       IEEEDPCos -- compute the cosine of a floating point number

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPCos(  y  );
       d0/d1              d0/d1

       double  x,y;

@{b}   FUNCTION@{ub}
       Compute cosine of y in IEEE double precision

@{b}   INPUTS@{ub}
       y - IEEE double precision floating point value

@{b}   RESULT@{ub}
       x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPAcos()" Link "IEEEDPAcos()"}, @{"IEEEDPSin()" Link "IEEEDPSin()"}, @{"IEEEDPTan()" Link "IEEEDPTan()"}
@EndNode

@Node "IEEEDPCosh()" "mathieeedoubtrans.library/IEEEDPCosh"

@{b}   NAME@{ub}
	IEEEDPCosh -- compute the hyperbolic cosine of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEEDPCosh(  y  );
	d0/d1		   d0/d1

	double	x,y;

@{b}   FUNCTION@{ub}
	Compute hyperbolic cosine of y in IEEE double precision

@{b}   INPUTS@{ub}
	y - IEEE double precision floating point value

@{b}   RESULT@{ub}
	x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEEDPSinh()" Link "IEEEDPSinh()"}, @{"IEEEDPTanh()" Link "IEEEDPTanh()"}
@EndNode

@Node "IEEEDPExp()" "mathieeedoubtrans.library/IEEEDPExp"

@{b}   NAME@{ub}
       IEEEDPExp -- compute the exponential of e

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPExp(  y  );
       d0/d1             d0/d1

       double  x,y;

@{b}   FUNCTION@{ub}
       Compute e^y in IEEE double precision

@{b}   INPUTS@{ub}
       y - IEEE double precision floating point value

@{b}   RESULT@{ub}
       x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPLog()" Link "IEEEDPLog()"}
@EndNode

@Node "IEEEDPFieee()" "mathieeedoubtrans.library/IEEEDPFieee"

@{b}   NAME@{ub}
       IEEEDPFieee -- convert IEEE single to IEEE double

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPFieee(  y  );
       d0/d1                 d0

       float   y;
       double  x;

@{b}   FUNCTION@{ub}
       Convert IEEE single precision number to IEEE double precision.

@{b}   INPUTS@{ub}
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPTieee()" Link "IEEEDPTieee()"}
@EndNode

@Node "IEEEDPLog()" "mathieeedoubtrans.library/IEEEDPLog"

@{b}   NAME@{ub}
       IEEEDPLog -- compute the natural logarithm of a floating point number

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPLog(  y  );
       d0/d1             d0/d1

       double  x,y;

@{b}   FUNCTION@{ub}
       Compute ln(y) in IEEE double precision

@{b}   INPUTS@{ub}
       y - IEEE double precision floating point value

@{b}   RESULT@{ub}
       x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPExp()" Link "IEEEDPExp()"}
@EndNode

@Node "IEEEDPLog10()" "mathieeedoubtrans.library/IEEEDPLog10"

@{b}   NAME@{ub}
       IEEEDPLog10 -- compute logarithm base 10 of a number

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPLog10(  y  );
       d0/d1               d0/d1

       double  x,y;

@{b}   FUNCTION@{ub}
       Compute the logarithm base 10 of y in IEEE double precision

@{b}   INPUTS@{ub}
       y - IEEE double precision floating point value

@{b}   RESULT@{ub}
       x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPLog()" Link "IEEEDPLog()"}
@EndNode

@Node "IEEEDPPow()" "mathieeedoubtrans.library/IEEEDPPow"

@{b}   NAME@{ub}
       IEEEDPPow -- raise a number to another number power

@{b}   SYNOPSIS@{ub}
         z   = IEEEDPPow(  x  ,  y  );
       d0/d1             d2/d3 d0/d1

       double  x,y,z;

@{b}   FUNCTION@{ub}
       Compute y^x in IEEE double precision

@{b}   INPUTS@{ub}
       x - IEEE double precision floating point value
       y - IEEE double precision floating point value

@{b}   RESULT@{ub}
       z - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
@EndNode

@Node "IEEEDPSin()" "mathieeedoubtrans.library/IEEEDPSin"

@{b}   NAME@{ub}
	IEEEDPSin -- compute the sine of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEEDPSin(  y  );
	d0/d1		  d0/d1

	double	x,y;

@{b}   FUNCTION@{ub}
	Compute sine of y in IEEE double precision

@{b}   INPUTS@{ub}
	y - IEEE double precision floating point value

@{b}   RESULT@{ub}
	x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEEDPAsin()" Link "IEEEDPAsin()"}, @{"IEEEDPTan()" Link "IEEEDPTan()"}, @{"IEEEDPCos()" Link "IEEEDPCos()"}
@EndNode

@Node "IEEEDPSincos()" "mathieeedoubtrans.library/IEEEDPSincos"

@{b}   NAME@{ub}
       IEEEDPSincos -- compute the arc tangent of a floating point number

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPSincos( z ,  y  );
       d0/d1                a0  d0/d1

       double  x,y,*z;

@{b}   FUNCTION@{ub}
       Compute sin and cosine of y in IEEE double precision.
       Store the cosine in *z. Return the sine of y.

@{b}   INPUTS@{ub}
       y - IEEE double precision floating point value
       z - pointer to IEEE double precision floating point number

@{b}   RESULT@{ub}
       x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPSin()" Link "IEEEDPSin()"}, @{"IEEEDPCos()" Link "IEEEDPCos()"}
@EndNode

@Node "IEEEDPSinh()" "mathieeedoubtrans.library/IEEEDPSinh"

@{b}   NAME@{ub}
	IEEEDPSinh -- compute the hyperbolic sine of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEEDPSinh(  y  );
	d0/d1		   d0/d1

	double	x,y;

@{b}   FUNCTION@{ub}
	Compute hyperbolic sine of y in IEEE double precision

@{b}   INPUTS@{ub}
	y - IEEE double precision floating point value

@{b}   RESULT@{ub}
	x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEEDPCosh" Link "mathieeedoubtrans/IEEEDPCosh()"}, @{"IEEEDPTanh" Link "mathieeedoubtrans/IEEEDPTanh()"}
@EndNode

@Node "IEEEDPSqrt()" "mathieeedoubtrans.library/IEEEDPSqrt"

@{b}   NAME@{ub}
	IEEEDPSqrt -- compute the square root of a number

@{b}   SYNOPSIS@{ub}
	  x   = IEEEDPSqrt(  y  );
	d0/d1 	           d0/d1

	double	x,y;

@{b}   FUNCTION@{ub}
	Compute square root of y in IEEE double precision

@{b}   INPUTS@{ub}
	y - IEEE double precision floating point value

@{b}   RESULT@{ub}
	x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
@EndNode

@Node "IEEEDPTan()" "mathieeedoubtrans.library/IEEEDPTan"

@{b}   NAME@{ub}
       IEEEDPTan -- compute the tangent of a floating point number

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPTan(  y  );
       d0/d1             d0/d1

       double  x,y;

@{b}   FUNCTION@{ub}
       Compute tangent of y in IEEE double precision

@{b}   INPUTS@{ub}
       y - IEEE double precision floating point value

@{b}   RESULT@{ub}
       x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPAtan()" Link "IEEEDPAtan()"}, @{"IEEEDPSin()" Link "IEEEDPSin()"}, @{"IEEEDPCos()" Link "IEEEDPCos()"}
@EndNode

@Node "IEEEDPTanh()" "mathieeedoubtrans.library/IEEEDPTanh"

@{b}   NAME@{ub}
	IEEEDPTanh -- compute the hyperbolic tangent of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEEDPTanh(  y  );
	d0/d1		   d0/d1

	double	x,y;

@{b}   FUNCTION@{ub}
	Compute hyperbolic tangent of y in IEEE double precision

@{b}   INPUTS@{ub}
	y - IEEE double precision floating point value

@{b}   RESULT@{ub}
	x - IEEE double precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEEDPSinh()" Link "IEEEDPSinh()"}, @{"IEEEDPCosh()" Link "IEEEDPCosh()"}
@EndNode

@Node "IEEEDPTieee()" "mathieeedoubtrans.library/IEEEDPTieee"

@{b}   NAME@{ub}
       IEEEDPTieee -- convert IEEE double to IEEE single

@{b}   SYNOPSIS@{ub}
         x   = IEEEDPTieee(  y  );
        d0                 d0/d1

       double  y;
       float   x;

@{b}   FUNCTION@{ub}
       Convert IEEE double precision number to IEEE single precision.

@{b}   INPUTS@{ub}
       y - IEEE double precision floating point value

@{b}   RESULT@{ub}
       x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEEDPFieee()" Link "IEEEDPFieee()"}
@EndNode

