@database "mathieeesingtrans"
@master "AMIDEV:NDK/Autodocs/mathieeesingtrans.doc"

@Node Main "mathieeesingtrans.doc"
@toc "Autodocs/AG/INDEX/Main"
    @{" IEEESPAcos() " Link "IEEESPAcos()"}
    @{" IEEESPAsin() " Link "IEEESPAsin()"}
    @{" IEEESPAtan() " Link "IEEESPAtan()"}
    @{" IEEESPCos() " Link "IEEESPCos()"}
    @{" IEEESPCosh() " Link "IEEESPCosh()"}
    @{" IEEESPExp() " Link "IEEESPExp()"}
    @{" IEEESPFieee() " Link "IEEESPFieee()"}
    @{" IEEESPLog() " Link "IEEESPLog()"}
    @{" IEEESPLog10() " Link "IEEESPLog10()"}
    @{" IEEESPPow() " Link "IEEESPPow()"}
    @{" IEEESPSin() " Link "IEEESPSin()"}
    @{" IEEESPSincos() " Link "IEEESPSincos()"}
    @{" IEEESPSinh() " Link "IEEESPSinh()"}
    @{" IEEESPSqrt() " Link "IEEESPSqrt()"}
    @{" IEEESPTan() " Link "IEEESPTan()"}
    @{" IEEESPTanh() " Link "IEEESPTanh()"}
    @{" IEEESPTieee() " Link "IEEESPTieee()"}
@EndNode

@Node "IEEESPAcos()" "mathieeesingtrans.library/IEEESPAcos"

@{b}   NAME@{ub}
       IEEESPAcos -- compute the arc cosine of a number

@{b}   SYNOPSIS@{ub}
         x   = IEEESPAcos(  y  );
       d0                 d0

       float   x,y;

@{b}   FUNCTION@{ub}
       Compute arc cosine of y in IEEE single precision

@{b}   INPUTS@{ub}
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEESPCos()" Link "IEEESPCos()"}, @{"IEEESPAtan()" Link "IEEESPAtan()"}, @{"IEEESPAsin()" Link "IEEESPAsin()"}
@EndNode

@Node "IEEESPAsin()" "mathieeesingtrans.library/IEEESPAsin"

@{b}   NAME@{ub}
       IEEESPAsin -- compute the arcsine of a number

@{b}   SYNOPSIS@{ub}
         x   = IEEESPAsin(  y  );
       d0                 d0

       float   x,y;

@{b}   FUNCTION@{ub}
       Compute the arc sine of y in IEEE single precision

@{b}   INPUTS@{ub}
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEESPSin()" Link "IEEESPSin()"}, @{"IEEESPAtan()" Link "IEEESPAtan()"}, @{"IEEESPAcos()" Link "IEEESPAcos()"}
@EndNode

@Node "IEEESPAtan()" "mathieeesingtrans.library/IEEESPAtan"

@{b}   NAME@{ub}
       IEEESPAtan -- compute the arc tangent of number

@{b}   SYNOPSIS@{ub}
         x   = IEEESPAtan(  y  );
       d0                 d0

       single  x,y;

@{b}   FUNCTION@{ub}
       Compute arctangent of y in IEEE single precision

@{b}   INPUTS@{ub}
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
@EndNode

@Node "IEEESPCos()" "mathieeesingtrans.library/IEEESPCos"

@{b}   NAME@{ub}
	IEEESPCos -- compute the cosine of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEESPCos(  y  );
	d0		   d0

	float	x,y;

@{b}   FUNCTION@{ub}
	Compute cosine of y in IEEE single precision

@{b}   INPUTS@{ub}
	y - IEEE single precision floating point value

@{b}   RESULT@{ub}
	x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEESPAcos()" Link "IEEESPAcos()"}, @{"IEEESPSin()" Link "IEEESPSin()"}, @{"IEEESPTan()" Link "IEEESPTan()"}
@EndNode

@Node "IEEESPCosh()" "mathieeesingtrans.library/IEEESPCosh"

@{b}   NAME@{ub}
	IEEESPCosh -- compute the hyperbolic cosine of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEESPCosh(  y  );
	d0		   d0

	float	x,y;

@{b}   FUNCTION@{ub}
	Compute hyperbolic cosine of y in IEEE single precision

@{b}   INPUTS@{ub}
	y - IEEE single precision floating point value

@{b}   RESULT@{ub}
	x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEESPSinh()" Link "IEEESPSinh()"}, @{"IEEESPTanh()" Link "IEEESPTanh()"}
@EndNode

@Node "IEEESPExp()" "mathieeesingtrans.library/IEEESPExp"

@{b}   NAME@{ub}
       IEEESPExp -- compute the exponential of e

@{b}   SYNOPSIS@{ub}
         x   = IEEESPExp(  y  );
       d0                d0

       float   x,y;

@{b}   FUNCTION@{ub}
       Compute e^y in IEEE single precision

@{b}   INPUTS@{ub}
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEESPLog()" Link "IEEESPLog()"}
@EndNode

@Node "IEEESPFieee()" "mathieeesingtrans.library/IEEESPFieee"

@{b}   NAME@{ub}
	IEEESPFieee -- convert IEEE single to IEEE single

@{b}   SYNOPSIS@{ub}
	  x   = IEEESPFieee(  y  );
	d0	              d0

	float	y;
	float  x;

@{b}   FUNCTION@{ub}
	Convert IEEE single precision number to IEEE single precision.
	These are included for completeness although they just
	return the input parameter. A good way to remember how these
	functions work is: They convert to and from the local format
	to Single Precision IEEE. The local format for this library
	happens to also be Single Precision IEEE.

@{b}   INPUTS@{ub}
	y - IEEE single precision floating point value

@{b}   RESULT@{ub}
	x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEESPTieee()" Link "IEEESPTieee()"}
@EndNode

@Node "IEEESPLog()" "mathieeesingtrans.library/IEEESPLog"

@{b}   NAME@{ub}
	IEEESPLog -- compute the natural logarithm of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEESPLog(  y  );
	d0	          d0

	float	x,y;

@{b}   FUNCTION@{ub}
	Compute ln(y) in IEEE single precision

@{b}   INPUTS@{ub}
	y - IEEE single precision floating point value

@{b}   RESULT@{ub}
	x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEESPExp()" Link "IEEESPExp()"}
@EndNode

@Node "IEEESPLog10()" "mathieeesingtrans.library/IEEESPLog10"

@{b}   NAME@{ub}
	IEEESPLog10 -- compute logarithm base 10 of a number

@{b}   SYNOPSIS@{ub}
	  x   = IEEESPLog10(  y  );
	d0	            d0

	float	x,y;

@{b}   FUNCTION@{ub}
	Compute the logarithm base 10 of y in IEEE single precision

@{b}   INPUTS@{ub}
	y - IEEE single precision floating point value

@{b}   RESULT@{ub}
	x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEESPLog()" Link "IEEESPLog()"}
@EndNode

@Node "IEEESPPow()" "mathieeesingtrans.library/IEEESPPow"

@{b}   NAME@{ub}
       IEEESPPow -- raise a number to another number power

@{b}   SYNOPSIS@{ub}
         z   = IEEESPPow(  x  ,  y  );
       d0                d1 d0

       float   x,y,z;

@{b}   FUNCTION@{ub}
       Compute y^x in IEEE single precision

@{b}   INPUTS@{ub}
       x - IEEE single precision floating point value
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       z - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
@EndNode

@Node "IEEESPSin()" "mathieeesingtrans.library/IEEESPSin"

@{b}   NAME@{ub}
       IEEESPSin -- compute the sine of a floating point number

@{b}   SYNOPSIS@{ub}
         x   = IEEESPSin(  y  );
       d0                d0

       float   x,y;

@{b}   FUNCTION@{ub}
       Compute sine of y in IEEE single precision

@{b}   INPUTS@{ub}
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEESPAsin()" Link "IEEESPAsin()"}, @{"IEEESPTan()" Link "IEEESPTan()"}, @{"IEEESPCos()" Link "IEEESPCos()"}
@EndNode

@Node "IEEESPSincos()" "mathieeesingtrans.library/IEEESPSincos"

@{b}   NAME@{ub}
	IEEESPSincos -- compute the arc tangent of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEESPSincos( z ,  y  );
	d0		     a0  d0

	float	x,y,*z;

@{b}   FUNCTION@{ub}
	Compute sin and cosine of y in IEEE single precision.
	Store the cosine in *z. Return the sine of y.

@{b}   INPUTS@{ub}
	y - IEEE single precision floating point value
	z - pointer to IEEE single precision floating point number

@{b}   RESULT@{ub}
	x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEESPSin()" Link "IEEESPSin()"}, @{"IEEESPCos()" Link "IEEESPCos()"}
@EndNode

@Node "IEEESPSinh()" "mathieeesingtrans.library/IEEESPSinh"

@{b}   NAME@{ub}
       IEEESPSinh -- compute the hyperbolic sine of a floating point number

@{b}   SYNOPSIS@{ub}
         x   = IEEESPSinh(  y  );
       d0                 d0

       float   x,y;

@{b}   FUNCTION@{ub}
       Compute hyperbolic sine of y in IEEE single precision

@{b}   INPUTS@{ub}
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEESPCosh" Link "mathieeesingtrans/IEEESPCosh()"}, @{"IEEESPTanh" Link "mathieeesingtrans/IEEESPTanh()"}
@EndNode

@Node "IEEESPSqrt()" "mathieeesingtrans.library/IEEESPSqrt"

@{b}   NAME@{ub}
       IEEESPSqrt -- compute the square root of a number

@{b}   SYNOPSIS@{ub}
         x   = IEEESPSqrt(  y  );
        d0                  d0

       float   x,y;

@{b}   FUNCTION@{ub}
       Compute square root of y in IEEE single precision

@{b}   INPUTS@{ub}
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
@EndNode

@Node "IEEESPTan()" "mathieeesingtrans.library/IEEESPTan"

@{b}   NAME@{ub}
       IEEESPTan -- compute the tangent of a floating point number

@{b}   SYNOPSIS@{ub}
         x   = IEEESPTan(  y  );
       d0                d0

       float   x,y;

@{b}   FUNCTION@{ub}
       Compute tangent of y in IEEE single precision

@{b}   INPUTS@{ub}
       y - IEEE single precision floating point value

@{b}   RESULT@{ub}
       x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
       @{"IEEESPAtan()" Link "IEEESPAtan()"}, @{"IEEESPSin()" Link "IEEESPSin()"}, @{"IEEESPCos()" Link "IEEESPCos()"}
@EndNode

@Node "IEEESPTanh()" "mathieeesingtrans.library/IEEESPTanh"

@{b}   NAME@{ub}
	IEEESPTanh -- compute the hyperbolic tangent of a floating point number

@{b}   SYNOPSIS@{ub}
	  x   = IEEESPTanh(  y  );
	d0		   d0

	float	x,y;

@{b}   FUNCTION@{ub}
	Compute hyperbolic tangent of y in IEEE single precision

@{b}   INPUTS@{ub}
	y - IEEE single precision floating point value

@{b}   RESULT@{ub}
	x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEESPSinh()" Link "IEEESPSinh()"}, @{"IEEESPCosh()" Link "IEEESPCosh()"}
@EndNode

@Node "IEEESPTieee()" "mathieeesingtrans.library/IEEESPTieee"

@{b}   NAME@{ub}
	IEEESPTieee -- convert IEEE single to IEEE single

@{b}   SYNOPSIS@{ub}
	  x   = IEEESPTieee(  y  );
	 d0	            d0

	float 	y;
	float   x;

@{b}   FUNCTION@{ub}
	Convert IEEE single precision number to IEEE single precision.
	These are included for completeness although they just
	return the input parameter. A good way to remember how these
	functions work is: They convert to and from the local format
	to Single Precision IEEE. The local format for this library
	happens to also be Single Precision IEEE.

@{b}   INPUTS@{ub}
	y - IEEE single precision floating point value

@{b}   RESULT@{ub}
	x - IEEE single precision floating point value

@{b}   BUGS@{ub}

@{b}   SEE ALSO@{ub}
	@{"IEEESPFieee()" Link "IEEESPFieee()"}
@EndNode

