@database "mathtrans"
@master "AMIDEV:NDK/Autodocs/mathtrans.doc"

@Node Main "mathtrans.doc"
@toc "Autodocs/AG/INDEX/Main"
    @{" SPAcos() " Link "SPAcos()"}
    @{" SPAsin() " Link "SPAsin()"}
    @{" SPAtan() " Link "SPAtan()"}
    @{" SPCos() " Link "SPCos()"}
    @{" SPCosh() " Link "SPCosh()"}
    @{" SPExp() " Link "SPExp()"}
    @{" SPFieee() " Link "SPFieee()"}
    @{" SPLog() " Link "SPLog()"}
    @{" SPLog10() " Link "SPLog10()"}
    @{" SPPow() " Link "SPPow()"}
    @{" SPSin() " Link "SPSin()"}
    @{" SPSincos() " Link "SPSincos()"}
    @{" SPSinh() " Link "SPSinh()"}
    @{" SPSqrt() " Link "SPSqrt()"}
    @{" SPTan() " Link "SPTan()"}
    @{" SPTanh() " Link "SPTanh()"}
    @{" SPTieee() " Link "SPTieee()"}
@EndNode

@Node "SPAcos()" "mathtrans.library/SPAcos"

@{b}   NAME@{ub}
	 SPAcos - obtain the arccosine of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPAcos(fnum1);
                   d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number representing the cosine
	 of an angle and returns the value of said angle in
	 radians

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPSin" Link "mathtrans/SPSin()"}

@EndNode

@Node "SPAsin()" "mathtrans.library/SPAsin"

@{b}   NAME@{ub}
	 SPAsin - obtain the arcsine of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPAsin(fnum1);
                   d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number representing the sine
	 of an angle and returns the value of said angle in
	 radians

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPCos" Link "mathtrans/SPCos()"}

@EndNode

@Node "SPAtan()" "mathtrans.library/SPAtan"

@{b}   NAME@{ub}
	 SPAtan - obtain the arctangent of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPAtan(fnum1);
                   d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number representing the tangent
	 of an angle and returns the value of said angle in
	 radians

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPTan" Link "mathtrans/SPTan()"}

@EndNode

@Node "SPCos()" "mathtrans.library/SPCos"

@{b}   NAME@{ub}
	 SPCos - obtain the cosine of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPCos(fnum1);
	               d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number representing an angle
	 in radians and returns the cosine of said angle.

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPAcos" Link "mathtrans/SPAcos()"}

@EndNode

@Node "SPCosh()" "mathtrans.library/SPCosh"

@{b}   NAME@{ub}
	 SPCosh - obtain the hyperbolic cosine of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPCosh(fnum1);
	                d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number representing an angle
	 in radians and returns the hyperbolic cosine of said angle.

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPSinh" Link "mathtrans/SPSinh()"}

@EndNode

@Node "SPExp()" "mathtrans.library/SPExp"

@{b}   NAME@{ub}
	 SPExp - obtain the exponential (e**X) of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPExp(fnum1);
	               d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number and returns the value
	 of e raised to the fnum1 power

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPLog" Link "mathtrans/SPLog()"}

@EndNode

@Node "SPFieee()" "mathtrans.library/SPFieee"

@{b}   NAME@{ub}
	 SPFieee - convert single precision ieee to FFP number

@{b}   SYNOPSIS@{ub}
	 fnum = SPFieee(ieeenum);
	                 d0.l
	 float fnum;
	 float ieeenum;

@{b}   FUNCTION@{ub}
	 Accepts a standard single precision format
	 returns the same number, converted to Motorola
	 fast floating point number

@{b}   INPUTS@{ub}
	 ieeenum - IEEE Single Precision Floating Point

@{b}   RESULT@{ub}
	 fnum - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPTieee" Link "mathtrans/SPTieee()"}

@EndNode

@Node "SPLog()" "mathtrans.library/SPLog"

@{b}   NAME@{ub}
	 SPLog - obtain the natural logarithm of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPLog(fnum1);
	               d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number and returns the natural
	 logarithem (base e) of said number

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number
	 If the argument is invalid, the V flag is set on
	 on return.

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPExp" Link "mathtrans/SPExp()"}

@EndNode

@Node "SPLog10()" "mathtrans.library/SPLog10"

@{b}   NAME@{ub}
	 SPLog10 - obtain the naperian logarithm(base 10) of the
	           floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPLog10(fnum1);
	                 d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number and returns the naperian
	 logarithm (base 10) of said number

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

	 If the argument is invalid, the V flag is set on
	 on return.

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPExp" Link "mathtrans/SPExp()"}, SpLog

@EndNode

@Node "SPPow()" "mathtrans.library/SPPow"

@{b}   NAME@{ub}
	 SPPow - raise a number to a power

@{b}   SYNOPSIS@{ub}
	 result = SPPow(fnum1, fnum2);
	                d1.l    d0.l
	 float fnum1, fnum2;
	 float result;

@{b}   FUNCTION@{ub}
	 Accepts two floating point numbers and returns the
	 result of fnum2 raised to the fnum1 power

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number
	 fnum2 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 result - Motorola fast floating point number

	 On error, for example overflow, the V bit
	 is set on return.

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPExp" Link "mathtrans/SPExp()"}, @{"SPLog" Link "mathtrans/SPLog()"}

@EndNode

@Node "SPSin()" "mathtrans.library/SPSin"

@{b}   NAME@{ub}
	 SPSin - obtain the sine of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPSin(fnum1);
                  d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number representing an angle
	 in radians and returns the sine of said angle.

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPAsin" Link "mathtrans/SPAsin()"}

@EndNode

@Node "SPSincos()" "mathtrans.library/SPSincos"

@{b}   NAME@{ub}
	 SPSincos - obtain the sine and cosine of a number

@{b}   SYNOPSIS@{ub}
	 fnum3 = SPSincos(pfnum2, fnum1);
	                  d1.l,   d0.l
	 float *pfnum2;
	 float fnum1;
	 float fnum3;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number (fnum1) representing
	 an angle in radians and a pointer to another floating
	 point number (pfnum2). It computes the cosine and places it in
	 *pfnum2. It computes the sine and returns it as a result.

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number
	 pfnum2 - pointer to Motorola fast floating point number

@{b}   RESULT@{ub}
	 *pfnum2 - Motorola fast floating point number (cosine)
	 fnum3 - Motorola fast floating point number (sine)

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPSin" Link "mathtrans/SPSin()"}, @{"SPCos" Link "mathtrans/SPCos()"}

@EndNode

@Node "SPSinh()" "mathtrans.library/SPSinh"

@{b}   NAME@{ub}
	 SPSinh - obtain the hyperbolic sine of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPSinh(fnum1);
	                d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number representing an angle
	 in radians and returns the hyperbolic sine of said angle.

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPCosh" Link "mathtrans/SPCosh()"}

@EndNode

@Node "SPSqrt()" "mathtrans.library/SPSqrt"

@{b}   NAME@{ub}
	 SPSqrt - obtain the square root of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPSqrt(fnum1);
	                d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number and returns the square toot
	 of said number

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPPow" Link "mathtrans/SPPow()"}, @{"SPMul" Link "mathffp/SPMul()"}

@EndNode

@Node "SPTan()" "mathtrans.library/SPTan"

@{b}   NAME@{ub}
	 SPTan - obtain the tangent of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPTan(fnum1);
	               d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number representing an angle
	 in radians and returns the tangent of said angle.

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPAtan" Link "mathtrans/SPAtan()"}

@EndNode

@Node "SPTanh()" "mathtrans.library/SPTanh"

@{b}   NAME@{ub}
	 SPTanh - obtain the hyperbolic tangent of the floating point number

@{b}   SYNOPSIS@{ub}
	 fnum2 = SPTanh(fnum1);
	                d0.l
	 float fnum2;
	 float fnum1;

@{b}   FUNCTION@{ub}
	 Accepts a floating point number representing an angle
	 in radians and returns the hyperbolic tangent of said angle.

@{b}   INPUTS@{ub}
	 fnum1 - Motorola fast floating point number

@{b}   RESULT@{ub}
	 fnum2 - Motorola fast floating point number

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPSinh" Link "mathtrans/SPSinh()"}, @{"SPCosh" Link "mathtrans/SPCosh()"}

@EndNode

@Node "SPTieee()" "mathtrans.library/SPTieee"

@{b}   NAME@{ub}
	 SPTieee - convert FFP number to single precision ieee

@{b}   SYNOPSIS@{ub}
	 ieeenum = SPTieee(fnum);
	                   d0.l
	 float ieeenum;
	 float fnum;

@{b}   FUNCTION@{ub}
	 Accepts a Motorola fast floating point number and
	 returns the same number, converted into IEEE
	 standard single precision format

@{b}   INPUTS@{ub}
	 fnum - Motorola fast floating point number

@{b}   RESULT@{ub}
	 ieeenum - IEEE Single Precision Floating Point

@{b}   BUGS@{ub}
	 None

@{b}   SEE ALSO@{ub}
	 @{"SPFieee" Link "mathtrans/SPFieee()"}

@EndNode

