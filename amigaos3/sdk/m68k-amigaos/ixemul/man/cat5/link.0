
LINK(5)                    UNIX Programmer's Manual                    LINK(5)

NNAAMMEE
     lliinnkk - dynamic loader and link editor interface

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<lliinnkk..hh>>

DDEESSCCRRIIPPTTIIOONN
     The include file <_l_i_n_k_._h> declares several structures that are present in
     dynamically linked programs and libraries.  The structures define the in-
     terface between several components of the link-editor and loader mecha-
     nism. The layout of a number of these structures within the binaries re-
     sembles the a.out format in many places as it serves such similar func-
     tions as symbol definitions (including the accompanying string table) and
     relocation records needed to resolve references to external entities. It
     also records a number of data structures unique to the dynamic loading
     and linking process. These include references to other objects that are
     required to complete the link-editing process and indirection tables to
     facilitate _P_o_s_i_t_i_o_n _I_n_d_e_p_e_n_d_e_n_t _C_o_d_e (PIC for short) to improve sharing
     of code pages among different processes.  The collection of data struc-
     tures described here will be refered to as the _R_u_n_-_t_i_m_e _R_e_l_o_c_a_t_i_o_n
     _S_e_c_t_i_o_n _(_R_R_S_) and is embedded in the standard text and data segments of
     the dynamically linked program or shared object image as the existing
     a.out format offers no room for it elsewhere.

     Several utilities co-operate to ensure that the task of getting a program
     ready to run can complete successfully in a way that optimizes the use of
     system resources. The compiler emits PIC code from which shared libraries
     can be built by ld(1).  The compiler also includes size information of
     any initialized data items through the .size assembler directive. PIC
     code differs from conventional code in that it accesses data variables
     through an indirection table, the Global Offset Table, by convention ac-
     cessable by the reserved name ___G_L_O_B_A_L___O_F_F_S_E_T___T_A_B_L_E__. The exact mechanism
     used for this is machine dependent, usually a machine register is re-
     served for the purpose. The rational behind this construct is to generate
     code that is independent of the actual load address. Only the values con-
     tained in the Global Offset Table may need updating at run-time depending
     on the load addresses of the various shared objects in the address space.

     Likewise, procedure calls to globally defined functions are redirected
     through the Procedure Linkage Table (PLT) residing in the data segment of
     the core image. Again, this is done to avoid run-time modifications to
     the text segment.

     The linker-editor allocates the Global Offset Table and Procedure Linkage
     Table when combining PIC object files into an image suitable for mapping
     into the process address space. It also collects all symbols that may be
     needed by the run-time link-editor and stores these along with the im-
     age's text and data bits.  Another reserved symbol, ___D_Y_N_A_M_I_C is used to
     indicate the presence of the run-time linker structures. Whenever _DYNAM-
     IC is relocated to 0, there is no need to invoke the run-time link-edi-
     tor. If this symbol is non-zero, it points at a data structure from which
     the location of the necessary relocation- and symbol information can be
     derived. This is most notably used by the start-up module, _c_r_t_0. The _DY-
     NAMIC structure is conventionally located at the start of the data seg-
     ment of the image to which it pertains.

DDAATTAA SSTTRRUUCCTTUURREESS
     The data structures supporting dynamic linking and run-time relocation
     reside both in the text and data segments of the image they apply to.
     The text segments contain read-only data such as symbols descriptions and
     names, while the data segments contain the tables that need to be modi-
     fied by during the relocation process.

     The _DYNAMIC symbol references a ___d_y_n_a_m_i_c structure:

           struct  _dynamic {
                   int     d_version;
                   struct  so_debug *d_debug;
                   union {
                           struct section_dispatch_table *d_sdt;
                   } d_un;
                   struct  ld_entry *d_entry;
           };

     _d___v_e_r_s_i_o_n  This field provides for different versions of the dynamic
                linking implementation. The current version numbers understood
                by ld and ld.so are _L_D___V_E_R_S_I_O_N___S_U_N _(_3_)_, which is used by the
                SunOS 4.x releases, and _L_D___V_E_R_S_I_O_N___B_S_D _(_8_)_, which is currently
                in use by NetBSD.

     _d___u_n       Refers to a _d___v_e_r_s_i_o_n dependent data structure.

     _d___d_e_b_u_g    this field provides debuggers with a hook to access symbol ta-
                bles of shared objects loaded as a result of the actions of
                the run-time link-editor.

     _d___e_n_t_r_y    this field is obsoleted by CRT interface version CRT_VER-
                SION_BSD4, and is replaced by the crt_ldentry in _c_r_t___l_d_s_o.

     The _s_e_c_t_i_o_n___d_i_s_p_a_t_c_h___t_a_b_l_e structure is the main ``dispatcher'' table,
     containing offsets into the image's segments where various symbol and re-
     location information is located.

           struct section_dispatch_table {
                   struct  so_map *sdt_loaded;
                   long    sdt_sods;
                   long    sdt_paths;
                   long    sdt_got;
                   long    sdt_plt;
                   long    sdt_rel;
                   long    sdt_hash;
                   long    sdt_nzlist;
                   long    sdt_filler2;
                   long    sdt_buckets;
                   long    sdt_strings;
                   long    sdt_str_sz;
                   long    sdt_text_sz;
                   long    sdt_plt_sz;
           };

     _s_d_t___l_o_a_d_e_d  A pointer to the first link map loaded (see below). This
                 field is set by ld.so for the benefit of debuggers that may
                 use it to load a shared object's symbol table.

     _s_d_t___s_o_d_s    The start of a (linked) list of shared object descriptors
                 needed by _t_h_i_s object.

     _s_d_t___p_a_t_h_s   Library search rules. A colon separated list of directories
                 corresponding to the --RR option of ld(1).

     _s_d_t___g_o_t     The location of the Global Offset Table within this image.

     _s_d_t___p_l_t     The location of the Procedure Linkage Table within this im-
                 age.

     _s_d_t___r_e_l     The location of an array of _r_e_l_o_c_a_t_i_o_n___i_n_f_o structures (see


                 a.out(5)) specifying run-time relocations.

     _s_d_t___h_a_s_h    The location of the hash table for fast symbol lookup in this
                 object's symbol table.

     _s_d_t___n_z_l_i_s_t  The location of the symbol table.

     _s_d_t___f_i_l_l_e_r_2
                 Currently unused.

     _s_d_t___b_u_c_k_e_t_s
                 The number of buckets in _s_d_t___h_a_s_h

     _s_d_t___s_t_r_i_n_g_s
                 The location of the symbol string table that goes with
                 _s_d_t___n_z_l_i_s_t.

     _s_d_t___s_t_r___s_z  The size of the string table.

     _s_d_t___t_e_x_t___s_z
                 The size of the object's text segment.

     _s_d_t___p_l_t___s_z  The size of the Procedure Linkage Table.

     A _s_o_d structure descibes a shared object that is needed to complete the
     link edit process of the object containing it.  A list of such objects
     (chained through _s_o_d___n_e_x_t) is pointed at by the _s_d_t___s_o_d_s in the sec-
     tion_dispatch_table structure.

           struct sod {
                   long    sod_name;
                   u_int   sod_library : 1,
                           sod_unused : 31;
                   short   sod_major;
                   short   sod_minor;
                   long    sod_next;
           };

     _s_o_d___n_a_m_e     The offset in the text segment of a string describing this
                  link object.

     _s_o_d___l_i_b_r_a_r_y  If set, _s_o_d___n_a_m_e specifies a library that is to be searched
                  for by ld.so. The path name is obtained by searching a set
                  of directories (see also ldconfig(8)) for a shared object
                  matching _l_i_b_<_s_o_d___n_a_m_e_>_._s_o_._n_._m. If not set, _s_o_d___n_a_m_e should
                  point at a full path name for the desired shared object.

     _s_o_d___m_a_j_o_r    Specifies the major version number of the shared object to
                  load.

     _s_o_d___m_i_n_o_r    Specifies the prefered minor version number of the shared
                  object to load.

     The run-time link-editor maintains a list of structures called _l_i_n_k _m_a_p_s
     to keep track of all shared objects loaded into a process' address space.
     These structures are only used at run-time and do not occur within the
     text or data segment of an executable or shared library.

           struct so_map {
                   caddr_t som_addr;
                   char    *som_path;
                   struct  so_map *som_next;
                   struct  sod *som_sod;
                   caddr_t som_sodbase;
                   u_int   som_write : 1;
                   struct  _dynamic *som_dynamic;
                   caddr_t som_spd;
           };

     _s_o_m___a_d_d_r     The address at which the shared object associated with this
                  link map has been loaded.

     _s_o_m___p_a_t_h     The full path name of the loaded object.

     _s_o_m___n_e_x_t     Pointer to the next link map.

     _s_o_m___s_o_d      The _s_o_d structure that was responsible for loading this
                  shared object.

     _s_o_m___s_o_d_b_a_s_e  Tossed in later versions the run-time linker.

     _s_o_m___w_r_i_t_e    Set if (some portion of) this object's text segment is cur-
                  rently writable.

     _s_o_m___d_y_n_a_m_i_c  Pointer to this object's ___d_y_n_a_m_i_c structure.

     _s_o_m___s_p_d      Hook for attaching private data maintained by the run-time
                  link-editor.

     Symbol description with size. This is simply an _n_l_i_s_t structure with one
     field (_n_z___s_i_z_e) added. Used to convey size information on items in the
     data segment of shared objects. An array of these lives in the shared ob-
     ject's text segment and is addressed by the _s_d_t___n_z_l_i_s_t field of
     _s_e_c_t_i_o_n___d_i_s_p_a_t_c_h___t_a_b_l_e.

           struct nzlist {
                   struct nlist    nlist;
                   u_long          nz_size;
           #define nz_un           nlist.n_un
           #define nz_strx         nlist.n_un.n_strx
           #define nz_name         nlist.n_un.n_name
           #define nz_type         nlist.n_type
           #define nz_value        nlist.n_value
           #define nz_desc         nlist.n_desc
           #define nz_other        nlist.n_other
           };

     _n_l_i_s_t    (see nlist(5)).

     _n_z___s_i_z_e  The size of the data represented by this symbol.

     A hash table is included within the text segment of shared object to to
     facilitate quick lookup of symbols during run-time link-editing.  The
     _s_d_t___h_a_s_h field of the _s_e_c_t_i_o_n___d_i_s_p_a_t_c_h___t_a_b_l_e structure points at an array
     of _r_r_s___h_a_s_h structures:

           struct rrs_hash {
                   int     rh_symbolnum;           /* symbol number */
                   int     rh_next;                /* next hash entry */
           };

     _r_h___s_y_m_b_o_l_n_u_m  The index of the symbol in the shared object's symbol table
                   (as given by the _l_d___s_y_m_b_o_l_s field).

     _r_h___n_e_x_t       In case of collisions, this field is the offset of the next
                   entry in this hash table bucket. It is zero for the last
                   bucket element.
     The _r_t___s_y_m_b_o_l structure is used to keep track of run-time allocated com-
     mons and data items copied from shared objects. These items are kept on
     linked list and is exported through the _d_d___c_c field in the _s_o___d_e_b_u_g
     structure (see below) for use by debuggers.

           struct rt_symbol {
                   struct nzlist           *rt_sp;
                   struct rt_symbol        *rt_next;
                   struct rt_symbol        *rt_link;
                   caddr_t                 rt_srcaddr;
                   struct so_map           *rt_smp;
           };

     _r_t___s_p       The symbol description.

     _r_t___n_e_x_t     Virtual address of next rt_symbol.

     _r_t___l_i_n_k     Next in hash bucket. Used by internally by ld.so.

     _r_t___s_r_c_a_d_d_r  Location of the source of initialized data within a shared
                 object.

     _r_t___s_m_p      The shared object which is the original source of the data
                 that this run-time symbol describes.

     The _s_o___d_e_b_u_g structure is used by debuggers to gain knowledge of any
     shared objects that have been loaded in the process's address space as a
     result of run-time link-editing. Since the run-time link-editor runs as a
     part of process initialization, a debugger that wishes to access symbols
     from shared objects can only do so after the link-editor has been called
     from crt0.  A dynamically linked binary contains a _s_o___d_e_b_u_g structure
     which can be located by means of the _d___d_e_b_u_g field in ___d_y_n_a_m_i_c.

           struct  so_debug {
                   int     dd_version;
                   int     dd_in_debugger;
                   int     dd_sym_loaded;
                   char    *dd_bpt_addr;
                   int     dd_bpt_shadow;
                   struct rt_symbol *dd_cc;
           };

     _d_d___v_e_r_s_i_o_n      Version number of this interface.

     _d_d___i_n___d_e_b_u_g_g_e_r  Set by the debugger to indicate to the run-time linker
                     that the program is run under control of a debugger.

     _d_d___s_y_m___l_o_a_d_e_d   Set by the run-time linker whenever it adds symbols by
                     loading shared objects.

     _d_d___b_p_t___a_d_d_r     The address were a breakpoint will be set by the the run-
                     time linker to divert control to the debugger. This ad-
                     dress is determined by the start-up module, _c_r_t_0_._o_, to be
                     some convenient place before the call to _main.

     _d_d___b_p_t___s_h_a_d_o_w   Contains the original instruction that was at
                     _d_d___b_p_t___a_d_d_r. The debugger is expected to put this in-
                     struction back before continuing the program.

     _d_d___c_c           A pointer to the linked list of run-time allocated sym-
                     bols that the debugger may be interested in.

     The _l_d___e_n_t_r_y structure defines a set of service routines within ld.so.
     See dlfcn(3) for more information.

           struct ld_entry {
                   void    *(*dlopen)(char *, int);
                   int     (*dlclose)(void *);
                   void    *(*dlsym)(void *, char *);
                   int     (*dlctl)(void *, int, void *);
                   void    (*dlexit) __P((void));
           };

     The _c_r_t___l_d_s_o structure defines the interface between ld.so and the start-
     up code in crt0.

           struct crt_ldso {
                   int             crt_ba;
                   int             crt_dzfd;
                   int             crt_ldfd;
                   struct _dynamic *crt_dp;
                   char            **crt_ep;
                   caddr_t         crt_bp;
                   char            *crt_prog;
                   char            *crt_ldso;
                   char            *crt_ldentry;
           };
           #define CRT_VERSION_SUN         1
           #define CRT_VERSION_BSD2        2
           #define CRT_VERSION_BSD3        3
           #define CRT_VERSION_BSD4        4

     _c_r_t___b_a    The virtual address at which ld.so was loaded by crt0.

     _c_r_t___d_z_f_d  On SunOS systems, this field contains an open file descriptor
               to ``/dev/zero'' used to get demand paged zeroed pages. On
               NetBSD systems it contains -1.

     _c_r_t___l_d_f_d  Contains an open file descriptor that was used by crt0 to load
               ld.so.

     _c_r_t___d_p    A pointer to main's ___d_y_n_a_m_i_c structure.

     _c_r_t___e_p    A pointer to the environment strings.

     _c_r_t___b_p    The address at which a breakpoint will be placed by the run-
               time linker if the main program is run by a debugger.  See
               _s_o___d_e_b_u_g

     _c_r_t___p_r_o_g  The name of the main program as determined by crt0 (CRT_VER-
               SION_BSD3 only).

     _c_r_t___l_d_s_o  The path of the run-time linker as mapped by crt0 (CRT_VER-
               SION_BSD4 only).

     _c_r_t___l_d_e_n_t_r_y
               The dlfcn(3) entry points provided by the run-time linker
               (CRT_VERSION_BSD4 only).

     The _h_i_n_t_s___h_e_a_d_e_r and _h_i_n_t_s___b_u_c_k_e_t structures define the layout of the li-
     brary hints, normally found in ``/var/run/ld.so.hints,'' which is used by
     ld.so to quickly locate the shared object images in the filesystem.  The
     organization of the hints file is not unlike that of an ``a.out'' object
     file, in that it contains a header determining the offset and size of a
     table of fixed sized hash buckets and a common string pool.

           struct hints_header {
                   long            hh_magic;
           #define HH_MAGIC        011421044151
                   long            hh_version;
           #define LD_HINTS_VERSION_1      1
                   long            hh_hashtab;
                   long            hh_nbucket;
                   long            hh_strtab;
                   long            hh_strtab_sz;
                   long            hh_ehints;
           };


     _h_h___m_a_g_i_c      Hints file magic number.

     _h_h___v_e_r_s_i_o_n    Interface version number.

     _h_h___h_a_s_h_t_a_b    Offset of hash table.

     _h_h___s_t_r_t_a_b     Offset of string table.

     _h_h___s_t_r_t_a_b___s_z  Size of strings.

     _h_h___e_h_i_n_t_s     Maximum usable offset in hints file.

           /*
            * Hash table element in hints file.
            */
           struct hints_bucket {
                   int             hi_namex;
                   int             hi_pathx;
                   int             hi_dewey[MAXDEWEY];
                   int             hi_ndewey;
           #define hi_major hi_dewey[0]
           #define hi_minor hi_dewey[1]
                   int             hi_next;
           };

     _h_i___n_a_m_e_x   Index of the string identifying the library.

     _h_i___p_a_t_h_x   Index of the string representing the full path name of the li-
                brary.

     _h_i___d_e_w_e_y   The version numbers of the shared library.

     _h_i___n_d_e_w_e_y  The number of valid entries in _h_i___d_e_w_e_y.

     _h_i___n_e_x_t    Next bucket in case of hashing collisions.


CCAAVVEEAATTSS
     Only the (GNU) C compiler currently supports the creation of shared li-
     braries.  Other programming languages can not be used.


BSD Experimental               October 23, 1993                              7
