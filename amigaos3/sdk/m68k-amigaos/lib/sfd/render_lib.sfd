* This SFD file was automatically generated by fd2sfd from
* /opt/amiga/m68k-amigaos/lib/fd/render_lib.fd and
* /opt/amiga/m68k-amigaos/include/clib/render_protos.h.
==base _RenderBase
==basetype struct Library *
==libname render.library
==include <graphics/gfx.h>
==include <utility/hooks.h>
==include <utility/tagitem.h>
==include <exec/types.h>
*
*   render_lib.fd    © TEK neoscientists
*   v27.2
*
==bias 30
==private
void TurboFillMem(APTR mem, ULONG len, UBYTE fill) (a0,d0,d1)
void TurboCopyMem(APTR source, APTR dest, ULONG len) (a0,a1,d0)
==public
APTR CreateRMHandlerA(struct TagItem * taglist) (a1)
==varargs
APTR CreateRMHandler(Tag taglist, ...) (a1)
void DeleteRMHandler(APTR rmh) (a0)
APTR AllocRenderMem(APTR rendermemhandler, ULONG size) (a0,d0)
void FreeRenderMem(APTR rendermemhandler, APTR mem, ULONG size) (a0,a1,d0)
APTR AllocRenderVec(APTR rendermemhandler, ULONG size) (a0,d0)
void FreeRenderVec(APTR mem) (a0)
APTR CreateHistogramA(struct TagItem * taglist) (a1)
==varargs
APTR CreateHistogram(Tag taglist, ...) (a1)
void DeleteHistogram(APTR histogram) (a0)
ULONG QueryHistogram(APTR histogram, Tag tag) (a0,d0)
ULONG AddRGB(APTR histogram, ULONG RGB, ULONG count) (a0,d0,d1)
ULONG AddRGBImageA(APTR histogram, ULONG * rgb, UWORD width, UWORD height, struct TagItem * taglist) (a0,a1,d0,d1,a2)
==varargs
ULONG AddRGBImage(APTR histogram, ULONG * rgb, UWORD width, UWORD height, Tag taglist, ...) (a0,a1,d0,d1,a2)
ULONG AddChunkyImageA(APTR histogram, UBYTE * chunky, UWORD width, UWORD height, APTR palette, struct TagItem * taglist) (a0,a1,d0,d1,a2,a3)
==varargs
ULONG AddChunkyImage(APTR histogram, UBYTE * chunky, UWORD width, UWORD height, APTR palette, Tag taglist, ...) (a0,a1,d0,d1,a2,a3)
ULONG ExtractPaletteA(APTR histogram, ULONG * palette, UWORD numcolors, struct TagItem * taglist) (a0,a1,d0,a2)
==varargs
ULONG ExtractPalette(APTR histogram, ULONG * palette, UWORD numcolors, Tag taglist, ...) (a0,a1,d0,a2)
ULONG RenderA(ULONG * rgb, UWORD width, UWORD height, UBYTE * chunky, APTR palette, struct TagItem * taglist) (a0,d0,d1,a1,a2,a3)
==varargs
ULONG Render(ULONG * rgb, UWORD width, UWORD height, UBYTE * chunky, APTR palette, Tag taglist, ...) (a0,d0,d1,a1,a2,a3)
void Planar2ChunkyA(PLANEPTR * planetab, UWORD bytewidth, UWORD height, UWORD depth, UWORD bytesperrow, UBYTE * chunky, struct TagItem * taglist) (a0,d0,d1,d2,d3,a1,a2)
==varargs
void Planar2Chunky(PLANEPTR * planetab, UWORD bytewidth, UWORD height, UWORD depth, UWORD bytesperrow, UBYTE * chunky, Tag taglist, ...) (a0,d0,d1,d2,d3,a1,a2)
ULONG Chunky2RGBA(UBYTE * chunky, UWORD width, UWORD height, ULONG * rgb, APTR palette, struct TagItem * taglist) (a0,d0,d1,a1,a2,a3)
==varargs
ULONG Chunky2RGB(UBYTE * chunky, UWORD width, UWORD height, ULONG * rgb, APTR palette, Tag taglist, ...) (a0,d0,d1,a1,a2,a3)
void Chunky2BitMapA(UBYTE * chunky, UWORD sx, UWORD sy, UWORD width, UWORD height, struct BitMap * bitmap, UWORD dx, UWORD dy, struct TagItem * taglist) (a0,d0,d1,d2,d3,a1,d4,d5,a2)
==varargs
void Chunky2BitMap(UBYTE * chunky, UWORD sx, UWORD sy, UWORD width, UWORD height, struct BitMap * bitmap, UWORD dx, UWORD dy, Tag taglist, ...) (a0,d0,d1,d2,d3,a1,d4,d5,a2)
APTR CreateScaleEngineA(UWORD sourcewidth, UWORD sourceheight, UWORD destwidth, UWORD destheight, struct TagItem * taglist) (d0,d1,d2,d3,a1)
==varargs
APTR CreateScaleEngine(UWORD sourcewidth, UWORD sourceheight, UWORD destwidth, UWORD destheight, Tag taglist, ...) (d0,d1,d2,d3,a1)
void DeleteScaleEngine(APTR engine) (a0)
ULONG ScaleA(APTR engine, APTR source, APTR dest, struct TagItem * taglist) (a0,a1,a2,a3)
==varargs
ULONG Scale(APTR engine, APTR source, APTR dest, Tag taglist, ...) (a0,a1,a2,a3)
ULONG ConvertChunkyA(UBYTE * source, APTR oldpalette, UWORD width, UWORD height, UBYTE * dest, APTR newpalette, struct TagItem * taglist) (a0,a1,d0,d1,a2,a3,a4)
==varargs
ULONG ConvertChunky(UBYTE * source, APTR oldpalette, UWORD width, UWORD height, UBYTE * dest, APTR newpalette, Tag taglist, ...) (a0,a1,d0,d1,a2,a3,a4)
void CreatePenTableA(UBYTE * chunky, APTR oldpalette, UWORD width, UWORD height, APTR newpalette, UBYTE * convtab, struct TagItem * taglist) (a0,a1,d0,d1,a2,a3,a4)
==varargs
void CreatePenTable(UBYTE * chunky, APTR oldpalette, UWORD width, UWORD height, APTR newpalette, UBYTE * convtab, Tag taglist, ...) (a0,a1,d0,d1,a2,a3,a4)
APTR CreatePaletteA(struct TagItem * taglist) (a1)
==varargs
APTR CreatePalette(Tag taglist, ...) (a1)
void DeletePalette(APTR palette) (a0)
void ImportPaletteA(APTR palette, APTR coltab, UWORD numcols, struct TagItem * taglist) (a0,a1,d0,a2)
==varargs
void ImportPalette(APTR palette, APTR coltab, UWORD numcols, Tag taglist, ...) (a0,a1,d0,a2)
void ExportPaletteA(APTR palette, APTR coltab, struct TagItem * taglist) (a0,a1,a2)
==varargs
void ExportPalette(APTR palette, APTR coltab, Tag taglist, ...) (a0,a1,a2)
ULONG CountRGB(APTR histogram, ULONG rgb) (a0,d0)
LONG BestPen(APTR palette, ULONG rgb) (a0,d0)
void FlushPalette(APTR palette) (a0)
ULONG SortPaletteA(APTR palette, ULONG mode, struct TagItem * taglist) (a0,d0,a1)
==varargs
ULONG SortPalette(APTR palette, ULONG mode, Tag taglist, ...) (a0,d0,a1)
ULONG AddHistogramA(APTR histogram1, APTR histogram2, struct TagItem * taglist) (a0,a1,a2)
==varargs
ULONG AddHistogram(APTR histogram1, APTR histogram2, Tag taglist, ...) (a0,a1,a2)
UWORD ScaleOrdinate(UWORD source, UWORD dest, UWORD ordinate) (d0,d1,d2)
==private
ULONG 	* CreateHistogramPointerArray(APTR histogram) (a0)
ULONG CountHistogram(APTR histogram) (a0)
==public
APTR CreateMapEngineA(APTR palette, struct TagItem * taglist) (a0,a1)
==varargs
APTR CreateMapEngine(APTR palette, Tag taglist, ...) (a0,a1)
void DeleteMapEngine(APTR engine) (a0)
ULONG MapRGBArrayA(APTR engine, ULONG * rgb, UWORD width, UWORD height, UBYTE * chunky, struct TagItem * taglist) (a0,a1,d0,d1,a2,a3)
==varargs
ULONG MapRGBArray(APTR engine, ULONG * rgb, UWORD width, UWORD height, UBYTE * chunky, Tag taglist, ...) (a0,a1,d0,d1,a2,a3)
LONG RGBArrayDiversityA(ULONG * rgb, UWORD width, UWORD height, struct TagItem * taglist) (a0,d0,d1,a1)
==varargs
LONG RGBArrayDiversity(ULONG * rgb, UWORD width, UWORD height, Tag taglist, ...) (a0,d0,d1,a1)
LONG ChunkyArrayDiversityA(UBYTE * chunky, APTR palette, UWORD width, UWORD height, struct TagItem * taglist) (a0,a1,d0,d1,a2)
==varargs
LONG ChunkyArrayDiversity(UBYTE * chunky, APTR palette, UWORD width, UWORD height, Tag taglist, ...) (a0,a1,d0,d1,a2)
ULONG MapChunkyArrayA(APTR engine, UBYTE * source, APTR palette, UWORD width, UWORD height, UBYTE * dest, struct TagItem * taglist) (a0,a1,a2,d0,d1,a3,a4)
==varargs
ULONG MapChunkyArray(APTR engine, UBYTE * source, APTR palette, UWORD width, UWORD height, UBYTE * dest, Tag taglist, ...) (a0,a1,a2,d0,d1,a3,a4)
void InsertAlphaChannelA(UBYTE * maskarray, UWORD width, UWORD height, ULONG * rgbarray, struct TagItem * taglist) (a0,d0,d1,a1,a2)
==varargs
void InsertAlphaChannel(UBYTE * maskarray, UWORD width, UWORD height, ULONG * rgbarray, Tag taglist, ...) (a0,d0,d1,a1,a2)
void ExtractAlphaChannelA(ULONG * rgbarray, UWORD width, UWORD height, UBYTE * chunkyarray, struct TagItem * taglist) (a0,d0,d1,a1,a2)
==varargs
void ExtractAlphaChannel(ULONG * rgbarray, UWORD width, UWORD height, UBYTE * chunkyarray, Tag taglist, ...) (a0,d0,d1,a1,a2)
void ApplyAlphaChannelA(ULONG * sourcearray, UWORD width, UWORD height, ULONG * destarray, struct TagItem * taglist) (a0,d0,d1,a1,a2)
==varargs
void ApplyAlphaChannel(ULONG * sourcearray, UWORD width, UWORD height, ULONG * destarray, Tag taglist, ...) (a0,d0,d1,a1,a2)
void MixRGBArrayA(ULONG * sourcearray, UWORD width, UWORD height, ULONG * destarray, UWORD ratio, struct TagItem * taglist) (a0,d0,d1,a1,d2,a2)
==varargs
void MixRGBArray(ULONG * sourcearray, UWORD width, UWORD height, ULONG * destarray, UWORD ratio, Tag taglist, ...) (a0,d0,d1,a1,d2,a2)
APTR AllocRenderVecClear(APTR rendermemhandler, ULONG size) (a0,d0)
void CreateAlphaArrayA(ULONG * rgbarray, UWORD width, UWORD height, struct TagItem * taglist) (a0,d0,d1,a1)
==varargs
void CreateAlphaArray(ULONG * rgbarray, UWORD width, UWORD height, Tag taglist, ...) (a0,d0,d1,a1)
void MixAlphaChannelA(ULONG * source1, ULONG * source2, UWORD width, UWORD height, ULONG * dest, struct TagItem * taglist) (a0,a1,d0,d1,a2,a3)
==varargs
void MixAlphaChannel(ULONG * source1, ULONG * source2, UWORD width, UWORD height, ULONG * dest, Tag taglist, ...) (a0,a1,d0,d1,a2,a3)
void TintRGBArrayA(ULONG * source, UWORD width, UWORD height, ULONG RGB, UWORD ratio, ULONG * dest, struct TagItem * taglist) (a0,d0,d1,d2,d3,a1,a2)
==varargs
void TintRGBArray(ULONG * source, UWORD width, UWORD height, ULONG RGB, UWORD ratio, ULONG * dest, Tag taglist, ...) (a0,d0,d1,d2,d3,a1,a2)
==private
ULONG GetPaletteAttrs(APTR palette, ULONG args) (a0,d0)
void RemapArrayA(UBYTE * source, UWORD width, UWORD height, UBYTE * dest, UBYTE * pentab, struct TagItem * taglist) (a0,d0,d1,a1,a2,a3)
==varargs
void RemapArray(UBYTE * source, UWORD width, UWORD height, UBYTE * dest, UBYTE * pentab, Tag taglist, ...) (a0,d0,d1,a1,a2,a3)
==end
