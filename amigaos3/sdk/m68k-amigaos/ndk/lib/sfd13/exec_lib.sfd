* This SFD file was automatically generated by fd2sfd from
* /opt/amiga/m68k-amigaos/ndk/lib/fd13/exec_lib.fd and
* /opt/amiga/m68k-amigaos/ndk13-include/clib/exec_protos.h.
==base _SysBase
==basetype struct ExecBase *
==libname exec.library
==include <exec/execbase.h>
==include <exec/tasks.h>
==include <exec/memory.h>
==include <exec/ports.h>
==include <exec/devices.h>
==include <exec/io.h>
==include <exec/semaphores.h>
==include <exec/resident.h>
==include <exec/interrupts.h>
==include <exec/types.h>
==include <utility/tagitem.h>
*------ misc ---------------------------------------------------------
==bias 30
==public
ULONG Supervisor(ULONG (*userFunction)()) (a5)
*------ special patchable hooks to internal exec activity ------------
==private
ULONG execPrivate1() ()
ULONG execPrivate2() ()
ULONG execPrivate3() ()
ULONG execPrivate4() ()
ULONG execPrivate5() ()
ULONG execPrivate6() ()
*------ module creation ----------------------------------------------
==public
VOID InitCode(ULONG startClass, ULONG version) (d0,d1)
VOID InitStruct(CONST_APTR initTable, APTR memory, ULONG size) (a1,a2,d0)
struct Library * MakeLibrary(CONST_APTR funcInit, CONST_APTR structInit, ULONG (*libInit)(), ULONG dataSize, ULONG segList) (a0,a1,a2,d0,d1)
VOID MakeFunctions(APTR target, CONST_APTR functionArray, ULONG funcDispBase) (a0,a1,a2)
struct Resident * FindResident(CONST_STRPTR name) (a1)
APTR InitResident(CONST struct Resident * resident, ULONG segList) (a1,d1)
*------ diagnostics --------------------------------------------------
VOID Alert(ULONG alertNum) (d7)
VOID Debug(ULONG flags) (d0)
*------ interrupts ---------------------------------------------------
VOID Disable() ()
VOID Enable() ()
VOID Forbid() ()
VOID Permit() ()
ULONG SetSR(ULONG newSR, ULONG mask) (d0,d1)
APTR SuperState() ()
VOID UserState(APTR sysStack) (d0)
struct Interrupt * SetIntVector(LONG intNumber, struct Interrupt * interrupt) (d0,a1)
VOID AddIntServer(LONG intNumber, struct Interrupt * interrupt) (d0,a1)
VOID RemIntServer(LONG intNumber, struct Interrupt * interrupt) (d0,a1)
VOID Cause(CONST struct Interrupt * interrupt) (a1)
*------ memory allocation --------------------------------------------
APTR Allocate(struct MemHeader * freeList, ULONG byteSize) (a0,d0)
VOID Deallocate(struct MemHeader * freeList, APTR memoryBlock, ULONG byteSize) (a0,a1,d0)
APTR AllocMem(ULONG byteSize, ULONG requirements) (d0,d1)
APTR AllocAbs(ULONG byteSize, APTR location) (d0,a1)
VOID FreeMem(APTR memoryBlock, ULONG byteSize) (a1,d0)
ULONG AvailMem(ULONG requirements) (d1)
struct MemList * AllocEntry(CONST struct MemList * entry) (a0)
VOID FreeEntry(struct MemList * entry) (a0)
*------ lists --------------------------------------------------------
VOID Insert(struct List * list, struct Node * node, struct Node * pred) (a0,a1,a2)
VOID AddHead(struct List * list, struct Node * node) (a0,a1)
VOID AddTail(struct List * list, struct Node * node) (a0,a1)
VOID Remove(struct Node * node) (a1)
struct Node * RemHead(struct List * list) (a0)
struct Node * RemTail(struct List * list) (a0)
VOID Enqueue(struct List * list, struct Node * node) (a0,a1)
struct Node * FindName(struct List * list, CONST_STRPTR name) (a0,a1)
*------ tasks --------------------------------------------------------
APTR AddTask(struct Task * task, APTR initPC, APTR finalPC) (a1,a2,a3)
VOID RemTask(struct Task * task) (a1)
struct Task * FindTask(CONST_STRPTR name) (a1)
BYTE SetTaskPri(struct Task * task, LONG priority) (a1,d0)
ULONG SetSignal(ULONG newSignals, ULONG signalSet) (d0,d1)
ULONG SetExcept(ULONG newSignals, ULONG signalSet) (d0,d1)
ULONG Wait(ULONG signalSet) (d0)
VOID Signal(struct Task * task, ULONG signalSet) (a1,d0)
BYTE AllocSignal(LONG signalNum) (d0)
VOID FreeSignal(LONG signalNum) (d0)
LONG AllocTrap(LONG trapNum) (d0)
VOID FreeTrap(LONG trapNum) (d0)
*------ messages -----------------------------------------------------
VOID AddPort(struct MsgPort * port) (a1)
VOID RemPort(struct MsgPort * port) (a1)
VOID PutMsg(struct MsgPort * port, struct Message * message) (a0,a1)
struct Message * GetMsg(struct MsgPort * port) (a0)
VOID ReplyMsg(struct Message * message) (a1)
struct Message * WaitPort(struct MsgPort * port) (a0)
struct MsgPort * FindPort(CONST_STRPTR name) (a1)
*------ libraries ----------------------------------------------------
VOID AddLibrary(struct Library * library) (a1)
VOID RemLibrary(struct Library * library) (a1)
struct Library * OldOpenLibrary(CONST_STRPTR libName) (a1)
VOID CloseLibrary(struct Library * library) (a1)
APTR SetFunction(struct Library * library, LONG funcOffset, ULONG (*newFunction)()) (a1,a0,d0)
VOID SumLibrary(struct Library * library) (a1)
*------ devices ------------------------------------------------------
VOID AddDevice(struct Device * device) (a1)
VOID RemDevice(struct Device * device) (a1)
BYTE OpenDevice(CONST_STRPTR devName, ULONG unit, struct IORequest * ioRequest, ULONG flags) (a0,d0,a1,d1)
VOID CloseDevice(struct IORequest * ioRequest) (a1)
BYTE DoIO(struct IORequest * ioRequest) (a1)
VOID SendIO(struct IORequest * ioRequest) (a1)
struct IORequest * CheckIO(CONST struct IORequest * ioRequest) (a1)
BYTE WaitIO(struct IORequest * ioRequest) (a1)
VOID AbortIO(struct IORequest * ioRequest) (a1)
*------ resources ----------------------------------------------------
VOID AddResource(APTR resource) (a1)
VOID RemResource(APTR resource) (a1)
APTR OpenResource(CONST_STRPTR resName) (a1)
*------ private diagnostic support -----------------------------------
==private
ULONG execPrivate7() ()
ULONG execPrivate8() ()
ULONG execPrivate9() ()
*------ misc ---------------------------------------------------------
==public
APTR RawDoFmt(CONST_STRPTR formatString, APTR dataStream, VOID (*putChProc)(), APTR putChData) (a0,a1,a2,a3)
ULONG GetCC() ()
ULONG TypeOfMem(CONST_APTR address) (a1)
ULONG Procure(struct SignalSemaphore * sigSem, struct SemaphoreMessage * bidMsg) (a0,a1)
VOID Vacate(struct SignalSemaphore * sigSem, struct SemaphoreMessage * bidMsg) (a0,a1)
struct Library * OpenLibrary(CONST_STRPTR libName, ULONG version) (a1,d0)
*--- functions in V33 or higher (Release 1.2) ---
*------ signal semaphores (note funny registers)----------------------
VOID InitSemaphore(struct SignalSemaphore * sigSem) (a0)
VOID ObtainSemaphore(struct SignalSemaphore * sigSem) (a0)
VOID ReleaseSemaphore(struct SignalSemaphore * sigSem) (a0)
ULONG AttemptSemaphore(struct SignalSemaphore * sigSem) (a0)
VOID ObtainSemaphoreList(struct List * sigSem) (a0)
VOID ReleaseSemaphoreList(struct List * sigSem) (a0)
struct SignalSemaphore * FindSemaphore(CONST_STRPTR name) (a1)
VOID AddSemaphore(struct SignalSemaphore * sigSem) (a1)
VOID RemSemaphore(struct SignalSemaphore * sigSem) (a1)
*------ kickmem support ----------------------------------------------
ULONG SumKickData() ()
*------ more memory support ------------------------------------------
VOID AddMemList(ULONG size, ULONG attributes, LONG pri, APTR base, STRPTR name) (d0,d1,d2,a0,a1)
VOID CopyMem(CONST_APTR source, APTR dest, ULONG size) (a0,a1,d0)
VOID CopyMemQuick(CONST_APTR source, APTR dest, ULONG size) (a0,a1,d0)
==end
